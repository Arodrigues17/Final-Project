{
  "model": "llama-3.3-70b-versatile",
  "dataset": "dev.json",
  "total_examples": 1034,
  "exact_match_accuracy": 0.269825918762089,
  "execution_match_accuracy": 0.7330754352030948,
  "execution_success_rate": 0.9264990328820116,
  "error_rate": 0.06866537717601548,
  "average_time_per_query": 0.8298578469850109,
  "total_time": 858.0730137825012,
  "per_database_accuracy": {
    "concert_singer": {
      "exact_match_accuracy": 0.24444444444444444,
      "execution_match_accuracy": 0.7555555555555555,
      "execution_success_rate": 0.8888888888888888,
      "total_examples": 45
    },
    "pets_1": {
      "exact_match_accuracy": 0.2619047619047619,
      "execution_match_accuracy": 0.6666666666666666,
      "execution_success_rate": 0.9285714285714286,
      "total_examples": 42
    },
    "car_1": {
      "exact_match_accuracy": 0.18478260869565216,
      "execution_match_accuracy": 0.6521739130434783,
      "execution_success_rate": 0.9456521739130435,
      "total_examples": 92
    },
    "flight_2": {
      "exact_match_accuracy": 0.225,
      "execution_match_accuracy": 0.8125,
      "execution_success_rate": 0.925,
      "total_examples": 80
    },
    "employee_hire_evaluation": {
      "exact_match_accuracy": 0.5263157894736842,
      "execution_match_accuracy": 0.8421052631578947,
      "execution_success_rate": 0.9473684210526315,
      "total_examples": 38
    },
    "cre_Doc_Template_Mgt": {
      "exact_match_accuracy": 0.32142857142857145,
      "execution_match_accuracy": 0.8571428571428571,
      "execution_success_rate": 0.9285714285714286,
      "total_examples": 84
    },
    "course_teach": {
      "exact_match_accuracy": 0.4,
      "execution_match_accuracy": 0.9333333333333333,
      "execution_success_rate": 1.0,
      "total_examples": 30
    },
    "museum_visit": {
      "exact_match_accuracy": 0.4444444444444444,
      "execution_match_accuracy": 0.8333333333333334,
      "execution_success_rate": 0.9444444444444444,
      "total_examples": 18
    },
    "wta_1": {
      "exact_match_accuracy": 0.3225806451612903,
      "execution_match_accuracy": 0.5806451612903226,
      "execution_success_rate": 0.9032258064516129,
      "total_examples": 62
    },
    "battle_death": {
      "exact_match_accuracy": 0.3125,
      "execution_match_accuracy": 0.75,
      "execution_success_rate": 0.875,
      "total_examples": 16
    },
    "student_transcripts_tracking": {
      "exact_match_accuracy": 0.2564102564102564,
      "execution_match_accuracy": 0.6410256410256411,
      "execution_success_rate": 0.9487179487179487,
      "total_examples": 78
    },
    "tvshow": {
      "exact_match_accuracy": 0.1774193548387097,
      "execution_match_accuracy": 0.7580645161290323,
      "execution_success_rate": 0.9032258064516129,
      "total_examples": 62
    },
    "poker_player": {
      "exact_match_accuracy": 0.4,
      "execution_match_accuracy": 0.975,
      "execution_success_rate": 1.0,
      "total_examples": 40
    },
    "voter_1": {
      "exact_match_accuracy": 0.3333333333333333,
      "execution_match_accuracy": 0.8666666666666667,
      "execution_success_rate": 0.9333333333333333,
      "total_examples": 15
    },
    "world_1": {
      "exact_match_accuracy": 0.125,
      "execution_match_accuracy": 0.575,
      "execution_success_rate": 0.9166666666666666,
      "total_examples": 120
    },
    "orchestra": {
      "exact_match_accuracy": 0.55,
      "execution_match_accuracy": 0.875,
      "execution_success_rate": 0.925,
      "total_examples": 40
    },
    "network_1": {
      "exact_match_accuracy": 0.26785714285714285,
      "execution_match_accuracy": 0.5892857142857143,
      "execution_success_rate": 0.8571428571428571,
      "total_examples": 56
    },
    "dog_kennels": {
      "exact_match_accuracy": 0.12195121951219512,
      "execution_match_accuracy": 0.7317073170731707,
      "execution_success_rate": 0.926829268292683,
      "total_examples": 82
    },
    "singer": {
      "exact_match_accuracy": 0.5,
      "execution_match_accuracy": 0.9333333333333333,
      "execution_success_rate": 0.9333333333333333,
      "total_examples": 30
    },
    "real_estate_properties": {
      "exact_match_accuracy": 0.25,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 1.0,
      "total_examples": 4
    }
  },
  "results": [
    {
      "db_id": "concert_singer",
      "question": "How many singers do we have?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.766746997833252,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        },
        {
          "question": "How many employees do we have?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the total number of singers?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7013309001922607,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the total number of companies?",
          "query": "SELECT count(*) FROM company"
        },
        {
          "question": "What is the total number of campuses?",
          "query": "SELECT count(*) FROM campuses"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "generated_sql": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7541360855102539,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name, home city, and age for all drivers.",
          "query": "SELECT name ,  home_city ,  age FROM driver"
        },
        {
          "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
          "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors"
        },
        {
          "question": "Show all artist name, age, and country ordered by the yeared they joined.",
          "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "generated_sql": "SELECT Name, Country, Age \nFROM singer \nORDER BY Age DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7449343204498291,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the famous titles and ages of each artist, listed in descending order by age?",
          "query": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC"
        },
        {
          "question": "What are the characters of actors in descending order of age?",
          "query": "SELECT Character FROM actor ORDER BY age DESC"
        },
        {
          "question": "What are the dates of publications in descending order of price?",
          "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "generated_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6849963665008545,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the minimum, average, and maximum distance of all aircrafts.",
          "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
        },
        {
          "question": "What is the average and minimum age of all artists from United States.",
          "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"
        },
        {
          "question": "What is the average rating and resolution of all bangla songs?",
          "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "generated_sql": "SELECT avg(Age), min(Age), max(Age) \nFROM singer \nWHERE Country = 'France';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8719077110290527,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the minimum, average, and maximum distance of all aircrafts.",
          "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"
        },
        {
          "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
          "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
        },
        {
          "question": "What is the total and maximum duration for all trips with the bike id 636?",
          "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show the name and the release year of the song by the youngest singer.",
      "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "generated_sql": "SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6793434619903564,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name and the nationality of the oldest host.",
          "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
        },
        {
          "question": "Show the id and name of the aircraft with the maximum distance.",
          "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"
        },
        {
          "question": "Show the id and name of the employee with maximum salary.",
          "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "generated_sql": "SELECT Song_Name, Song_release_year \nFROM singer \nWHERE Age = (SELECT MIN(Age) FROM singer)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7067098617553711,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and distances for all airplanes?",
          "query": "SELECT name ,  distance FROM Aircraft"
        },
        {
          "question": "What are the codes and names for all regions, sorted by codes?",
          "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code"
        },
        {
          "question": "What are the names of all songs that are ordered by their resolution numbers?",
          "query": "SELECT song_name FROM song ORDER BY resolution"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are all distinct countries where singers above age 20 are from?",
      "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "generated_sql": "SELECT DISTINCT Country \nFROM singer \nWHERE Age > 20",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6728382110595703,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are distinct locations where tracks are located?",
          "query": "SELECT DISTINCT LOCATION FROM track"
        },
        {
          "question": "What are the first names of all the students aged above 22?",
          "query": "SELECT Fname FROM STUDENT WHERE Age  >  22"
        },
        {
          "question": "Show all distinct city where branches with at least 100 memberships are located.",
          "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are  the different countries with singers above age 20?",
      "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "generated_sql": "SELECT DISTINCT Country \nFROM singer \nWHERE Age > 20",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6493310928344727,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different majors?",
          "query": "SELECT DISTINCT Major FROM Student"
        },
        {
          "question": "What are the mascots for schools with enrollments above the average?",
          "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
        },
        {
          "question": "What are the countries of mountains with height bigger than 5000?",
          "query": "SELECT Country FROM mountain WHERE Height  >  5000"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show all countries and the number of singers in each country.",
      "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "generated_sql": "SELECT Country, COUNT(*) \nFROM singer \nGROUP BY Country",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6682343482971191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all countries and the number of people from each country.",
          "query": "SELECT country ,  count(*) FROM people GROUP BY country"
        },
        {
          "question": "Please show the countries and the number of climbers from each country.",
          "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
        },
        {
          "question": "Show all allergy types and the number of allergies in each type.",
          "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "How many singers are from each country?",
      "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "generated_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7641110420227051,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many players are from each country?",
          "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
        },
        {
          "question": "How many climbers are from each country?",
          "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
        },
        {
          "question": "how many airports are there in each country?",
          "query": "SELECT count(*) ,  country FROM airport GROUP BY country"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "List all song names by singers above the average age.",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT Song_Name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7963435649871826,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all the distinct product names ordered by product id?",
          "query": "SELECT DISTINCT product_name FROM product ORDER BY product_id"
        },
        {
          "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
          "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
        },
        {
          "question": "What are the names of all players that got more than the average number of points?",
          "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are all the song names by singers who are older than average?",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT Song_Name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.683239221572876,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first names of all students who are older than 20?",
          "query": "SELECT fname FROM student WHERE age  >  20"
        },
        {
          "question": "What are the names of people who are shorter than average?",
          "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
        },
        {
          "question": "What are the names of all employees who have a salary higher than average?",
          "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "generated_sql": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6921939849853516,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name and location for all tracks.",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "Show the cinema name and location for cinemas with capacity above average.",
          "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
        },
        {
          "question": "Show first name for all students with major 600.",
          "query": "SELECT Fname FROM Student WHERE Major  =  600"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "generated_sql": "SELECT Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6773600578308105,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and locations of all tracks?",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "What are the names of all races held between 2009 and 2011?",
          "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
        },
        {
          "question": "What are the names of companies with revenue between 100 and 150?",
          "query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the maximum capacity and the average of all stadiums ?",
      "gold_sql": "select max(capacity), average from stadium",
      "generated_sql": "SELECT max(Capacity), avg(Capacity) FROM stadium",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6740641593933105,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is average and maximum salary of all employees.",
          "query": "SELECT avg(salary) ,  max(salary) FROM Employee"
        },
        {
          "question": "What is the average and largest salary of all employees?",
          "query": "SELECT avg(salary) ,  max(salary) FROM Employee"
        },
        {
          "question": "What is the maximum and minimum height of all players?",
          "query": "SELECT max(weight) ,  min(weight) FROM Player"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average and maximum capacities for all stadiums ?",
      "gold_sql": "select avg(capacity) ,  max(capacity) from stadium",
      "generated_sql": "SELECT avg(Capacity) , max(Capacity) FROM stadium",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6426193714141846,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the minimum, maximum, and average seating for all tracks.",
          "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"
        },
        {
          "question": "What is the average age for all person?",
          "query": "SELECT avg(age) FROM Person"
        },
        {
          "question": "What is the average age for all managers?",
          "query": "SELECT avg(Age) FROM manager"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "generated_sql": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7535443305969238,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and distance for aircraft with id 12?",
          "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
        },
        {
          "question": "What is the id and name of the employee with the highest salary?",
          "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
        },
        {
          "question": "What is the department name and corresponding building for the department with the greatest budget?",
          "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "generated_sql": "SELECT Name, Capacity \nFROM stadium \nORDER BY Average DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6930685043334961,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and distance for aircraft with id 12?",
          "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
        },
        {
          "question": "What is the id and name of the employee with the highest salary?",
          "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"
        },
        {
          "question": "What is the department name and corresponding building for the department with the greatest budget?",
          "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "How many concerts are there in year 2014 or 2015?",
      "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "generated_sql": "SELECT COUNT(*) \nFROM concert \nWHERE Year = 2014 OR Year = 2015",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6881647109985352,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many exhibition are there in year 2005 or after?",
          "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
        },
        {
          "question": "How many weddings are there in year 2016?",
          "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016"
        },
        {
          "question": "How many faculty, in total, are there in the year 2002?",
          "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "How many concerts occurred in 2014 or 2015?",
      "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "generated_sql": "SELECT COUNT(*) \nFROM concert \nWHERE Year = '2014' OR Year = '2015'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6655571460723877,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students live in HKG or CHI?",
          "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
        },
        {
          "question": "How many exhibition are there in year 2005 or after?",
          "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
        },
        {
          "question": "How many manufacturers have headquarters in either Tokyo or Beijing?",
          "query": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "generated_sql": "SELECT T2.Name, COUNT(*) \nFROM concert AS T1 \nJOIN stadium AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nGROUP BY T1.Stadium_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7728040218353271,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of track and the number of races in each track.",
          "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
        },
        {
          "question": "Show the station name and number of trains in each station.",
          "query": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id"
        },
        {
          "question": "For each building, show the name of the building and the number of institutions in it.",
          "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "For each stadium, how many concerts play there?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "generated_sql": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8022744655609131,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each team, how many technicians are there?",
          "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"
        },
        {
          "question": "For each project id, how many tasks are there?",
          "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id"
        },
        {
          "question": "How many classes exist for each school?",
          "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "gold_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Name, T2.Capacity \nFROM concert AS T1 \nJOIN stadium AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Year >= '2014' \nGROUP BY T2.Stadium_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7854712009429932,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of track with most number of races.",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
          "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
          "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
      "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
      "generated_sql": "SELECT T1.Name, T1.Capacity \nFROM stadium AS T1 \nJOIN concert AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Year > '2013' \nGROUP BY T1.Stadium_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0740845203399658,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and address of the department with the most students?",
          "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
          "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
          "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Which year has most number of concerts?",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7054893970489502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which origin has most number of flights?",
          "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which major has most number of students?",
          "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which advisor has most number of students?",
          "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the year that had the most concerts?",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT Year, COUNT(*) \nFROM concert \nGROUP BY Year \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8382692337036133,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the country that has the most perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the label that has the most albums?",
          "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most used instrument?",
          "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium names without any concert.",
      "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "generated_sql": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7254087924957275,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show station names without any trains.",
          "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)"
        },
        {
          "question": "Show names for artists without any exhibition.",
          "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
        },
        {
          "question": "Show member names without any registered branch.",
          "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the stadiums without any concerts?",
      "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "generated_sql": "SELECT Name \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6777007579803467,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of courses without prerequisites?",
          "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        },
        {
          "question": "What are the title and director of the films without any schedule?",
          "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"
        },
        {
          "question": "What are the titles of courses without prerequisites?",
          "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "gold_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "gold_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
      "generated_sql": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 \nON T1.concert_ID = T2.concert_ID \nGROUP BY T1.concert_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9635705947875977,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each building, show the name of the building and the number of institutions in it.",
          "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
        },
        {
          "question": "Show the name of track and the number of races in each track.",
          "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
        },
        {
          "question": "Show the name for regions and the number of storms for each region.",
          "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names , themes , and number of singers for every concert ?",
      "gold_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
      "generated_sql": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 \nON T1.concert_ID = T2.concert_ID \nGROUP BY T1.concert_Name, T1.Theme",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8488955497741699,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and names for each of the documents?",
          "query": "SELECT document_id ,  document_name FROM Documents"
        },
        {
          "question": "What is the average age for each dorm and what are the names of each dorm?",
          "query": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
        },
        {
          "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
          "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "List singer names and number of concerts for each singer.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "generated_sql": "SELECT T2.Name, COUNT(*) \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8870344161987305,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show aircraft names and number of flights for each aircraft.",
          "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
        },
        {
          "question": "For each phone, show its names and total number of stocks.",
          "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name"
        },
        {
          "question": "Show party names and the number of events for each party.",
          "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers and number of concerts for each person?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "generated_sql": "SELECT T1.Name, COUNT(T2.concert_ID) \nFROM singer AS T1 \nLEFT JOIN singer_in_concert AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8268678188323975,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and names for each of the documents?",
          "query": "SELECT document_id ,  document_name FROM Documents"
        },
        {
          "question": "What is the average age for each dorm and what are the names of each dorm?",
          "query": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"
        },
        {
          "question": "What are the subject ID, subject name, and the number of available courses for each subject?",
          "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "List all singer names in concerts in year 2014.",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 \nON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 \nON T2.concert_ID = T3.concert_ID \nWHERE T3.Year = '2014'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8339977264404297,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all region names in alphabetical order.",
          "query": "SELECT region_name FROM region ORDER BY region_name"
        },
        {
          "question": "Show all company names with a movie directed in year 1999.",
          "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999"
        },
        {
          "question": "list all female (sex is F) candidate names in the alphabetical order.",
          "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 \nON T1.Singer_ID = T2.Singer_ID \nJOIN concert AS T3 \nON T2.concert_ID = T3.concert_ID \nWHERE T3.Year = 2014",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8495621681213379,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of students who took a course in the Fall of 2003?",
          "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"
        },
        {
          "question": "What are the names of customers who live in Colorado state?",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""
        },
        {
          "question": "What are the names of customers who have a loan of more than 3000 in amount?",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "generated_sql": "SELECT T1.Name, T1.Country \nFROM singer AS T1 \nWHERE T1.Song_Name LIKE \"%Hey%\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7270092964172363,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
          "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
        },
        {
          "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
          "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
        },
        {
          "question": "What are the names of the physicians who have 'senior' in their titles.",
          "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "generated_sql": "SELECT Name, Country \nFROM singer \nWHERE Song_Name LIKE '%Hey%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7234442234039307,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
          "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""
        },
        {
          "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
          "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
        },
        {
          "question": "What are the names and account balances of customers with the letter a in their names?",
          "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "Find the number of concerts happened in the stadium with the highest capacity .",
      "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "generated_sql": "SELECT COUNT(T1.concert_ID) \nFROM concert AS T1 \nJOIN stadium AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.Capacity = (SELECT MAX(Capacity) FROM stadium)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8278825283050537,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of routes with destination airports in Italy.",
          "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"
        },
        {
          "question": "Find the emails of parties with the most popular party form.",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "Find the entry names of the catalog with the attribute that have the most entries.",
          "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "concert_singer",
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
      "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "generated_sql": "SELECT COUNT(T2.concert_ID) \nFROM stadium AS T1 \nJOIN concert AS T2 \nON T1.Stadium_ID = T2.Stadium_ID \nWHERE T1.Capacity = (SELECT MAX(Capacity) FROM stadium)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9606266021728516,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
          "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
        },
        {
          "question": "What is the first and last name of the students who are not in the largest major?",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What are the entry names of catalog with the attribute possessed by most entries.",
          "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of pets whose weight is heavier than 10.",
      "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
      "generated_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6873376369476318,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of people whose age is greater than all engineers.",
          "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
        },
        {
          "question": "Find the number of employees of each gender whose salary is lower than 50000.",
          "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex"
        },
        {
          "question": "find the name of people whose height is lower than the average.",
          "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "How many pets have a greater weight than 10?",
      "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
      "generated_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6590800285339355,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many universities have a campus fee greater than the average?",
          "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
        },
        {
          "question": "How many clubs have total medals less than 10?",
          "query": "SELECT count(*) FROM club_rank WHERE Total  <  10"
        },
        {
          "question": "How many flights have a velocity larger than 200?",
          "query": "SELECT count(*) FROM flight WHERE velocity  >  200"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the weight of the youngest dog.",
      "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT weight \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6927883625030518,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the youngest organization.",
          "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
        },
        {
          "question": "Return the weight of the shortest person.",
          "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
        },
        {
          "question": "Return the name of the youngest captain.",
          "query": "SELECT name FROM captain ORDER BY age LIMIT 1"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "How much does the youngest dog weigh?",
      "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT weight \nFROM Pets \nWHERE PetType = 'dog' \nORDER BY pet_age ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7193214893341064,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many credits does the department offer?",
          "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
        },
        {
          "question": "How much salary did the top 3 well-paid players get in 2001?",
          "query": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;"
        },
        {
          "question": "Return the name of the youngest captain.",
          "query": "SELECT name FROM captain ORDER BY age LIMIT 1"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "generated_sql": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.760148286819458,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
          "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
        },
        {
          "question": "Find the number of phones for each accreditation type.",
          "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
        },
        {
          "question": "Find the average and minimum weight for each gender.",
          "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "List the maximum weight and type for each type of pet.",
      "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "generated_sql": "SELECT PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7060596942901611,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
          "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
        },
        {
          "question": "List document type codes and the number of documents in each code.",
          "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"
        },
        {
          "question": "What are the maximum price and score of wines for each year?",
          "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find number of pets owned by students who are older than 20.",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(T2.PetID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.Age > 20",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.052965879440308,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first name of students who is older than 20.",
          "query": "SELECT fname FROM student WHERE age  >  20"
        },
        {
          "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
          "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?",
          "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "How many pets are owned by students that have an age greater than 20?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(T2.PetID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.Age > 20",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8103346824645996,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students are age 18?",
          "query": "SELECT count(*) FROM Student WHERE age  =  18"
        },
        {
          "question": "How many distinct delegates are from counties with population larger than 50000?",
          "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"
        },
        {
          "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
          "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(*) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.4221503734588623,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of students taught by TARRING LEIA.",
          "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""
        },
        {
          "question": "Find the number of students taught by the teacher KAWA GORDON.",
          "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""
        },
        {
          "question": "Find the number of albums by the artist \"Metallica\".",
          "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "How many dog pets are raised by female students?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(T2.PetID) \nFROM Student AS T1 \nJOIN Has_Pet AS T3 ON T1.StuID = T3.StuID \nJOIN Pets AS T2 ON T3.PetID = T2.PetID \nWHERE T1.Sex = 'F' AND T2.PetType = 'dog'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8531033992767334,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many distinct courses are enrolled in by students?",
          "query": "SELECT count(course_id) FROM Student_Course_Enrolment"
        },
        {
          "question": "How many songs, on average, are sung by a female artist?",
          "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\""
        },
        {
          "question": "How many products are not made by Sony?",
          "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of distinct type of pets.",
      "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
      "generated_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6193745136260986,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of distinct amenities.",
          "query": "SELECT count(*) FROM dorm_amenity"
        },
        {
          "question": "Find the number of distinct projects.",
          "query": "SELECT count(DISTINCT name) FROM projects"
        },
        {
          "question": "Find the distinct number of president votes.",
          "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "How many different types of pet are there?",
      "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
      "generated_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.666527509689331,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different types of transactions are there?",
          "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"
        },
        {
          "question": "How many different types of beds are there?",
          "query": "SELECT count(DISTINCT bedType) FROM Rooms;"
        },
        {
          "question": "How many different types of rooms are there?",
          "query": "SELECT count(DISTINCT roomtype) FROM room"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name of students who have cat or dog pet.",
      "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8865945339202881,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the last and first name of students who are playing Football or Lacrosse.",
          "query": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""
        },
        {
          "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
          "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"
        },
        {
          "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
          "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8759357929229736,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the  ids of every student who has never attended a course?",
          "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
        },
        {
          "question": "What are the names of every person who has a friend over 40 and under 30?",
          "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"
        },
        {
          "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
          "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name of students who have both cat and dog pets .",
      "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' \nINTERSECT \nSELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1869840621948242,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first name and age of the students who are playing both Football and Lacrosse.",
          "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")"
        },
        {
          "question": "Find the name of customers who have loans of both Mortgages and Auto.",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"
        },
        {
          "question": "Find the name and address of the customers who have both New and Pending orders.",
          "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "pets_1",
      "question": "Find the major and age of students who do not have a cat pet.",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nWHERE T1.StuID NOT IN (\n    SELECT T2.StuID \n    FROM Has_Pet AS T2 \n    JOIN Pets AS T3 \n    ON T2.PetID = T3.PetID \n    WHERE T3.PetType = 'cat'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8980631828308105,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
          "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        },
        {
          "question": "Find the average age of the students who have allergies with food and animal types.",
          "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
        },
        {
          "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
          "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Major, T1.Age \nFROM Student AS T1 \nWHERE T1.StuID NOT IN (\n    SELECT T2.StuID \n    FROM Has_Pet AS T2 \n    JOIN Pets AS T3 \n    ON T2.PetID = T3.PetID \n    WHERE T3.PetType = 'cat'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9551339149475098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How old is each student and how many students are each age?",
          "query": "SELECT age ,  count(*) FROM Student GROUP BY age"
        },
        {
          "question": "What are the names and ages of every person who is a friend of both Dan and Alice?",
          "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
        },
        {
          "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?",
          "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the id of students who do not have a cat pet.",
      "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "pets_1",
      "question": "What are the ids of the students who do not own cats as pets?",
      "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nWHERE T1.StuID IN (\n    SELECT T2.StuID \n    FROM Has_Pet AS T2 \n    JOIN Pets AS T3 \n    ON T2.PetID = T3.PetID \n    WHERE T3.PetType = 'dog'\n) \nAND T1.StuID NOT IN (\n    SELECT T2.StuID \n    FROM Has_Pet AS T2 \n    JOIN Pets AS T3 \n    ON T2.PetID = T3.PetID \n    WHERE T3.PetType = 'cat'\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.071716547012329,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
          "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        },
        {
          "question": "Find the average age of the students who have allergies with food and animal types.",
          "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"
        },
        {
          "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
          "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog' \nEXCEPT \nSELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.3757851123809814,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first name and GPA of every student that has a GPA lower than average?",
          "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)"
        },
        {
          "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?",
          "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        },
        {
          "question": "What is the first names of the professors from the history department who do not teach a class.",
          "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the type and weight of the youngest pet.",
      "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT PetType, weight \nFROM Pets \nORDER BY pet_age ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6709175109863281,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the youngest organization.",
          "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
        },
        {
          "question": "Find the type code of the most frequently used policy.",
          "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name and category of the most expensive product.",
          "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT PetType, weight \nFROM Pets \nORDER BY pet_age ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6662650108337402,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the description for the CIS-220 and how many credits does it have?",
          "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'"
        },
        {
          "question": "What is the name of the youngest editor?",
          "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
        },
        {
          "question": "What is the party of the youngest people?",
          "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "generated_sql": "SELECT PetID, weight \nFROM Pets \nWHERE pet_age > 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.70899510383606,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of people whose age is greater than all engineers.",
          "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
        },
        {
          "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
          "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)"
        },
        {
          "question": "Find the first and last name of students whose age is younger than the average age.",
          "query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the id and weight of every pet who is older than 1?",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "generated_sql": "SELECT T2.PetID, T2.weight \nFROM Student AS T1 \nJOIN Has_Pet AS T3 ON T1.StuID = T3.StuID \nJOIN Pets AS T2 ON T3.PetID = T2.PetID \nWHERE T1.Age > 20;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9290306568145752,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the id and family name of the driver who has the longest laptime?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
        },
        {
          "question": "What is the id of every employee who has at least a salary of  100000?",
          "query": "SELECT eid FROM Employee WHERE salary  >  100000"
        },
        {
          "question": "Find the first name of students who is older than 20.",
          "query": "SELECT fname FROM student WHERE age  >  20"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the average and maximum age for each type of pet.",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT avg(pet_age) , max(pet_age) , PetType \nFROM Pets \nGROUP BY PetType",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8033485412597656,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average and oldest age for each gender of student?",
          "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
        },
        {
          "question": "Find the number and average age of students living in each city.",
          "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"
        },
        {
          "question": "Find the average and minimum weight for each gender.",
          "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the average and maximum age for each pet type?",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT AVG(pet_age) , MAX(pet_age) , PetType \nFROM Pets \nGROUP BY PetType",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9003491401672363,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age for each gender?",
          "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender"
        },
        {
          "question": "What is the average age for each city and what are those cities?",
          "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code"
        },
        {
          "question": "What is the average and oldest age for each gender of student?",
          "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the average weight for each pet type.",
      "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7932076454162598,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average and minimum weight for each gender.",
          "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
        },
        {
          "question": "Return the average price for each product type.",
          "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code"
        },
        {
          "question": "For each bed type, find the average base price of different bed type.",
          "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the average weight for each type of pet?",
      "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7795281410217285,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average price for each type of product?",
          "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code"
        },
        {
          "question": "What is the average rating of songs for each language?",
          "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages"
        },
        {
          "question": "What is the average price of the products for each category?",
          "query": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a pet.",
      "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "generated_sql": "SELECT DISTINCT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8352031707763672,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
          "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
        },
        {
          "question": "Find the name and age of the person who is a friend of Dan or Alice.",
          "query": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
        },
        {
          "question": "Find the last and first name of students who are playing Football or Lacrosse.",
          "query": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What are the different first names and ages of the students who do have pets?",
      "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "generated_sql": "SELECT DISTINCT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8312487602233887,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names of all the female students who have president votes?",
          "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
        },
        {
          "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
          "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
        },
        {
          "question": "What are the names of students who have taken Statistics courses?",
          "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "generated_sql": "SELECT T2.PetID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8539896011352539,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average grade point of student whose last name is Smith.",
          "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""
        },
        {
          "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
          "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""
        },
        {
          "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
          "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "generated_sql": "SELECT T2.PetID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9106864929199219,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the code of the course which the student whose last name is Smithson took?",
          "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'"
        },
        {
          "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?",
          "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\""
        },
        {
          "question": "Find the average grade point of student whose last name is Smith.",
          "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of pets for each student who has any pet and student id.",
      "gold_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
      "generated_sql": "SELECT T1.StuID, COUNT(*) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nGROUP BY T1.StuID \nHAVING COUNT(*) > 0",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8880984783172607,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
          "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "List the name and the number of enrolled student for each course.",
          "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
        },
        {
          "question": "Find the number of routes for each source airport and the airport name.",
          "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
      "gold_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
      "generated_sql": "SELECT T1.StuID, COUNT(*) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nGROUP BY T1.StuID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8600161075592041,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many tracks does each genre have and what are the names of the top 5?",
          "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
        },
        {
          "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
        },
        {
          "question": "How many registed students do each course have? List course name and the number of their registered students?",
          "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and gender of student who have more than one pet.",
      "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nGROUP BY T1.StuID \nHAVING count(T2.PetID) > 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.919670581817627,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the students who have more than one advisor?",
          "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
        },
        {
          "question": "Find the name of customers who have more than one loan.",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
        },
        {
          "question": "Find the name and email for the users who have more than one follower.",
          "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Fname, T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 \nON T1.StuID = T2.StuID \nGROUP BY T1.StuID \nHAVING COUNT(T2.PetID) > 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8872330188751221,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first and last name of all students who are younger than average?",
          "query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
        },
        {
          "question": "Find the name of the students who have more than one advisor?",
          "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of students who have more than one advisor?",
          "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the last name of the student who has a cat that is age 3.",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "generated_sql": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' AND T3.pet_age = 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8905608654022217,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the last name and age of the student who has allergy to both milk and cat.",
          "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
        },
        {
          "question": "Find the name of the person who has no student friends.",
          "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"
        },
        {
          "question": "Find the name and age of the person who is a friend of Dan or Alice.",
          "query": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "generated_sql": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' AND T3.pet_age = 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8735253810882568,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?",
          "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"
        },
        {
          "question": "What is the last name of the student who got a grade A in the class with code 10018.",
          "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018"
        },
        {
          "question": "What is the last name of the student who received an A in the class with the code 10018?",
          "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "Find the average age of students who do not have any pet .",
      "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "generated_sql": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9165339469909668,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average credit score of the customers who do not have any loan.",
          "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
        },
        {
          "question": "Find the average number of followers for the users who do not have any tweet.",
          "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
        },
        {
          "question": "Find the number of rooms that do not have any reservation.",
          "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
        }
      ]
    },
    {
      "db_id": "pets_1",
      "question": "What is the average age for all students who do not own any pets ?",
      "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "generated_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8673369884490967,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age for all person?",
          "query": "SELECT avg(age) FROM Person"
        },
        {
          "question": "Find the average number of followers for the users who do not have any tweet.",
          "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
        },
        {
          "question": "What is the average credit score for customers who have taken a loan?",
          "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many continents are there?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7984659671783447,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of continents?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6635684967041016,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the number of flights?",
          "query": "SELECT count(*) FROM Flight"
        },
        {
          "question": "What is the number of technicians?",
          "query": "SELECT count(*) FROM technician"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "generated_sql": "SELECT T1.ContId, T1.Continent, COUNT(*) \nFROM continents AS T1 \nJOIN countries AS T2 \nON T1.ContId = T2.Continent \nGROUP BY T1.ContId",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.80621337890625,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
          "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id"
        },
        {
          "question": "How many registed students do each course have? List course name and the number of their registered students?",
          "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        },
        {
          "question": "How many employees does each role have? List role description, id and number of employees.",
          "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "For each continent, list its id, name, and how many countries it has?",
      "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "generated_sql": "SELECT T1.ContId, T1.Continent, COUNT(*) \nFROM continents AS T1 \nJOIN countries AS T2 \nON T1.ContId = T2.Continent \nGROUP BY T1.ContId",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0322339534759521,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
          "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
        },
        {
          "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
          "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id"
        },
        {
          "question": "For each project id, how many staff does it have? List them in increasing order.",
          "query": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many countries are listed?",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "generated_sql": "SELECT COUNT(DISTINCT CountryName) FROM countries",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6655378341674805,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different advisors are listed?",
          "query": "SELECT count(DISTINCT advisor) FROM Student"
        },
        {
          "question": "How many Bangladeshi artists are listed?",
          "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""
        },
        {
          "question": "How many different jobs are listed?",
          "query": "SELECT count(DISTINCT job) FROM Person"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many countries exist?",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "generated_sql": "SELECT COUNT(*) FROM countries",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7720403671264648,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students exist?",
          "query": "SELECT count(*) FROM student"
        },
        {
          "question": "How many vehicles exist?",
          "query": "SELECT count(*) FROM Vehicles;"
        },
        {
          "question": "How many video games exist?",
          "query": "SELECT count(*) FROM Video_games"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT T1.FullName, T1.Id, COUNT(*) \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nGROUP BY T1.Id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8849697113037109,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many hosts does each nationality have? List the nationality and the count.",
          "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"
        },
        {
          "question": "How many films are there in each category? List the genre name, genre id and the count.",
          "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
        },
        {
          "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
          "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT T1.FullName, T1.Id, COUNT(T2.ModelId) \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nGROUP BY T1.Id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9303553104400635,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of each aircraft and how many flights does each one complete?",
          "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
        },
        {
          "question": "what is the full name and id of the college with the largest number of baseball players?",
          "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
          "query": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which model of the car has the minimum horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Model, T2.Horsepower \nFROM model_list AS T1 \nJOIN car_names AS T3 ON T1.ModelId = T3.MakeId \nJOIN cars_data AS T2 ON T3.MakeId = T2.Id \nORDER BY T2.Horsepower ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8877167701721191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
          "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;"
        },
        {
          "question": "Which room has the largest number of reservations?",
          "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "Which party has the largest number of delegates?",
          "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Model \nFROM model_list AS T1 \nJOIN car_names AS T2 \nON T1.Model = T2.Model \nJOIN cars_data AS T3 \nON T2.MakeId = T3.Id \nORDER BY T3.Horsepower ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8959004878997803,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the district with the smallest area?",
          "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
        },
        {
          "question": "What is the name of the entrepreneur with the greatest weight?",
          "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
        },
        {
          "question": "What is the name of the perpetrator with the biggest weight.",
          "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Find the model of the car whose weight is below the average weight.",
      "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "generated_sql": "SELECT T1.Model \nFROM model_list AS T1 \nJOIN cars_data AS T2 \nON T1.ModelId = T2.Id \nWHERE T2.Weight < (SELECT AVG(Weight) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8756933212280273,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of accounts whose checking balance is below the average checking balance.",
          "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
        },
        {
          "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
          "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"
        },
        {
          "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
          "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the model for the car with a weight smaller than the average?",
      "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "generated_sql": "SELECT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T3 ON T1.Id = T3.MakeId \nJOIN model_list AS T2 ON T3.Model = T2.Model \nWHERE T1.Weight < (SELECT AVG(Weight) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9063990116119385,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
          "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
        },
        {
          "question": "What are the different names of friends who are younger than the average age for a friend?",
          "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"
        },
        {
          "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
          "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "generated_sql": "SELECT DISTINCT T1.Maker \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nJOIN car_names AS T3 \nON T2.Model = T3.Model \nJOIN cars_data AS T4 \nON T3.MakeId = T4.Id \nWHERE T4.Year = 1970",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.055206537246704,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of bank branches that provided some loans.",
          "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"
        },
        {
          "question": "Find the name of the club that has the most female students.",
          "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
          "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the name of the different car makers who produced a car in 1970?",
      "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "generated_sql": "SELECT DISTINCT T1.Maker \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nJOIN car_names AS T3 \nON T2.ModelId = T3.MakeId \nJOIN cars_data AS T4 \nON T3.MakeId = T4.Id \nWHERE T4.Year = 1970",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9857008457183838,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the artist who produced the shortest song?",
          "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"
        },
        {
          "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?",
          "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Find the make and production time of the cars that were produced in the earliest year?",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "generated_sql": "SELECT T1.Make, T2.Year \nFROM car_names AS T1 \nJOIN cars_data AS T2 \nON T1.MakeId = T2.Id \nWHERE T2.Year = (SELECT MIN(Year) FROM cars_data)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8996305465698242,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the address of all customers that live in Germany and have invoice.",
          "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
        },
        {
          "question": "Find the average price of wines that are not produced from Sonoma county.",
          "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
        },
        {
          "question": "Find the entry names of the catalog with the attribute that have the most entries.",
          "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the maker of the carr produced in the earliest year and what year was it?",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "generated_sql": "SELECT T3.Maker, T1.Year \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T1.Year = (SELECT MIN(Year) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9728298187255859,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What was the date of the earliest payment?",
          "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
        },
        {
          "question": "What is the maximum stars and year for the most recent movie?",
          "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"
        },
        {
          "question": "What is the age of the friend of Zach with longest year relationship?",
          "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which distinct car models are the produced after 1980?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T3 ON T1.Id = T3.MakeId \nJOIN model_list AS T2 ON T3.Model = T2.Model \nWHERE T1.Year > 1980",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0909483432769775,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
          "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
        },
        {
          "question": "What are the names of the races held after 2017 in Spain?",
          "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
        },
        {
          "question": "Find the cities which were once a host city after 2010?",
          "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the different models for the cards produced after 1980?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T3 ON T1.Id = T3.MakeId \nJOIN model_list AS T2 ON T3.Model = T2.Model \nWHERE T1.Year > 1980",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.17673659324646,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different positions for match season?",
          "query": "SELECT DISTINCT POSITION FROM match_season"
        },
        {
          "question": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?",
          "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'"
        },
        {
          "question": "What are the id and name of the photos for mountains?",
          "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many car makers are there in each continents? List the continent name and the count.",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "generated_sql": "SELECT T1.Continent, COUNT(T3.Id) \nFROM continents AS T1 \nJOIN countries AS T2 ON T1.ContId = T2.Continent \nJOIN car_makers AS T3 ON T2.CountryId = T3.Country \nGROUP BY T1.Continent",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9924678802490234,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many films are there in each category? List the genre name, genre id and the count.",
          "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
        },
        {
          "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
          "query": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"
        },
        {
          "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
          "query": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the name of each continent and how many car makers are there in each one?",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "generated_sql": "SELECT T1.Continent, COUNT(*) \nFROM continents AS T1 \nJOIN countries AS T2 ON T1.ContId = T2.Continent \nJOIN car_makers AS T3 ON T2.CountryId = T3.Country \nGROUP BY T1.Continent",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0232853889465332,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age and how many male students are there in each city?",
          "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
        },
        {
          "question": "What is the name of each aircraft and how many flights does each one complete?",
          "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
        },
        {
          "question": "What are the department names and how many employees work in each of them?",
          "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which of the countries has the most car makers? List the country name.",
      "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T2.CountryName \nFROM car_makers AS T1 \nJOIN countries AS T2 \nON T1.Country = T2.CountryId \nGROUP BY T2.CountryName \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1741397380828857,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries has the most number of airlines?",
          "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which kind of part has the least number of faults? List the part name.",
          "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
          "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the name of the country with the most car makers?",
      "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T2.CountryName \nFROM car_makers AS T1 \nJOIN countries AS T2 \nON T1.Country = T2.CountryId \nGROUP BY T2.CountryName \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8870294094085693,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the country with the most number of home airlines?",
          "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the activity with the most students?",
          "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the airline with the most routes?",
          "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
      "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
      "generated_sql": "SELECT COUNT(T2.ModelId), T1.FullName \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nGROUP BY T1.FullName",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.912329912185669,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
          "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"
        },
        {
          "question": "How many tasks does each project have? List the task count and the project detail.",
          "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id"
        },
        {
          "question": "How many assets does each third party company supply? List the count and the company id.",
          "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
      "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
      "generated_sql": "SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nGROUP BY T1.Id, T1.FullName",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9263167381286621,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the id of each employee and the number of document destroyed by that employee?",
          "query": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"
        },
        {
          "question": "what is the full name and id of the college with the largest number of baseball players?",
          "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "What are the faculty id and the number of students each faculty has?",
          "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
      "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "generated_sql": "SELECT T1.Accelerate \nFROM cars_data AS T1 \nJOIN car_names AS T2 \nON T1.Id = T2.MakeId \nWHERE T2.Model = \"amc hornet sportabout (sw)\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8121840953826904,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the role of the employee named Koby?",
          "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
        },
        {
          "question": "What city is the headquarter of the store Blackville?",
          "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
      "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "generated_sql": "SELECT T2.Accelerate \nFROM model_list AS T1 \nJOIN car_names AS T3 ON T1.ModelId = T3.MakeId \nJOIN cars_data AS T2 ON T3.MakeId = T2.Id \nWHERE T1.Model = 'hornet sportabout (sw)' AND T1.Maker = 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9835200309753418,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many credits does the department offer?",
          "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
        },
        {
          "question": "How many instruments does the song \"Badlands\" use?",
          "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""
        },
        {
          "question": "How many members does the club \"Tennis Club\" has?",
          "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many car makers are there in france?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nWHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.747042179107666,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many countries are there in total?",
          "query": "SELECT count(*) FROM country"
        },
        {
          "question": "How many leagues are there in England?",
          "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of makers of care in France?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'france'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8335020542144775,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
          "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
        },
        {
          "question": "What is the number of professors who are in the Accounting or Biology departments?",
          "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many car models are produced in the usa?",
      "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "generated_sql": "SELECT COUNT(T1.ModelId) \nFROM model_list AS T1 \nJOIN car_makers AS T2 ON T1.Maker = T2.Id \nJOIN countries AS T3 ON T2.Country = T3.CountryId \nWHERE T3.CountryName = 'usa'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9692280292510986,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many females are in the network?",
          "query": "SELECT count(*) FROM Person WHERE gender  =  'female'"
        },
        {
          "question": "How many professors are in the accounting dept?",
          "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the count of the car models produced in the United States?",
      "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "generated_sql": "SELECT COUNT(T2.ModelId) \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id = T2.Maker \nJOIN countries AS T3 ON T1.Country = T3.CountryId \nWHERE T3.CountryName = \"usa\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.88673996925354,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total count of enzymes?",
          "query": "SELECT count(*) FROM enzyme"
        },
        {
          "question": "What is the average price of wines produced in appelations in Sonoma County?",
          "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""
        },
        {
          "question": "What is the count of customers that Steve Johnson supports?",
          "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
      "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "generated_sql": "SELECT AVG(CAST(MPG AS REAL)) \nFROM cars_data \nWHERE Cylinders = 4;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.718438148498535,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average number of pages per minute color?",
          "query": "SELECT avg(pages_per_minute_color) FROM product"
        },
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        },
        {
          "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
          "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
      "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "generated_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7553160190582275,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average weight of all players?",
          "query": "SELECT avg(weight) FROM Player"
        },
        {
          "question": "What is the average rating and resolution of all bangla songs?",
          "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
        },
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
      "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "generated_sql": "SELECT MIN(Weight) \nFROM cars_data \nWHERE Cylinders = 8 AND Year = 1974",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7787659168243408,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the district with the smallest area?",
          "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
        },
        {
          "question": "What is the total number of professors with a Ph.D. ?",
          "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
        },
        {
          "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
          "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
      "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "generated_sql": "SELECT MIN(Weight) \nFROM cars_data \nWHERE Cylinders = 8 AND Year = 1974;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8740723133087158,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of professors with a Ph.D. ?",
          "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
        },
        {
          "question": "What is the sum of revenue from companies with headquarters in Austin?",
          "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'"
        },
        {
          "question": "What is the number of departments in Division \"AS\"?",
          "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are all the makers and models?",
      "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "generated_sql": "SELECT DISTINCT T1.Maker, T2.Model \nFROM car_makers AS T1 \nINNER JOIN model_list AS T2 \nON T1.Id = T2.Maker",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9038400650024414,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are all the distinct asset models?",
          "query": "SELECT DISTINCT asset_model FROM Assets"
        },
        {
          "question": "What are all the location codes and location names?",
          "query": "SELECT location_code ,  location_name FROM Ref_locations"
        },
        {
          "question": "What are all the labels?",
          "query": "SELECT DISTINCT label FROM Albums"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the makers and models?",
      "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "generated_sql": "SELECT DISTINCT T1.Maker, T2.Model \nFROM car_makers AS T1 \nINNER JOIN model_list AS T2 \nON T1.Id = T2.Maker",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8078536987304688,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the allergies and their types?",
          "query": "SELECT allergy ,  allergytype FROM Allergy_type"
        },
        {
          "question": "What are all the distinct asset models?",
          "query": "SELECT DISTINCT asset_model FROM Assets"
        },
        {
          "question": "What are the advisors",
          "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the countries having at least one car maker? List name and id.",
      "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "generated_sql": "SELECT T1.CountryId, T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nGROUP BY T1.CountryId \nHAVING COUNT(*) >= 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8895683288574219,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the countries that have at least two perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the id and name of the mountains that have at least 2 photos?",
          "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the name of courses that have at least five enrollments?",
          "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the names and ids of all countries with at least one car maker?",
      "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "generated_sql": "SELECT T1.CountryId, T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nGROUP BY T1.CountryId \nHAVING COUNT(*) >= 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8604574203491211,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
          "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
        },
        {
          "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
          "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What are the names of parties with at least 2 events?",
          "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of the cars with horsepower more than 150?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Horsepower > '150'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8397274017333984,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of cities in the United States with more than 3 airports?",
          "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
        },
        {
          "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
          "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
        },
        {
          "question": "What is the number of branches that have more than the average number of memberships?",
          "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with a horsepower greater than 150?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Horsepower > 150;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8351445198059082,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        },
        {
          "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
          "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
        },
        {
          "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
          "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight of cars each year?",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "generated_sql": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6848118305206299,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average weight of all players?",
          "query": "SELECT avg(weight) FROM Player"
        },
        {
          "question": "What is the average number of attendance at home games for each year?",
          "query": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;"
        },
        {
          "question": "What is the average rating of songs for each language?",
          "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight and year for each year?",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "generated_sql": "SELECT AVG(Weight), Year \nFROM cars_data \nGROUP BY Year",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7911012172698975,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the team and starting year for each technician?",
          "query": "SELECT Team ,  Starting_Year FROM technician"
        },
        {
          "question": "For each type, what is the average tonnage?",
          "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE"
        },
        {
          "question": "What is the average age for each gender?",
          "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which countries in europe have at least 3 car manufacturers?",
      "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "generated_sql": "SELECT T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nJOIN continents AS T3 \nON T1.Continent = T3.ContId \nWHERE T3.Continent = 'europe' \nGROUP BY T1.CountryId \nHAVING COUNT(DISTINCT T2.Maker) >= 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9466090202331543,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries have at least 3 cities?",
          "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
        },
        {
          "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
          "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
        },
        {
          "question": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?",
          "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the names of all European countries with at least 3 manufacturers?",
      "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "generated_sql": "SELECT T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nJOIN continents AS T3 \nON T1.Continent = T3.ContId \nWHERE T3.Continent = 'europe' \nGROUP BY T1.CountryName \nHAVING COUNT(T2.Id) >= 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9816398620605469,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of parties with at least 2 events?",
          "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the names of the customers who bought product \"food\" at least once?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"
        },
        {
          "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
          "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT MAX(Horsepower), T2.Make \nFROM cars_data AS T1 \nJOIN car_names AS T2 \nON T1.Id = T2.MakeId \nWHERE T1.Cylinders = 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9525594711303711,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total and maximum duration of trips with bike id 636?",
          "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
        },
        {
          "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
          "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
          "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T2.Make, MAX(T1.Horsepower) \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nWHERE T1.Cylinders = 3 \nGROUP BY T2.Make \nORDER BY MAX(T1.Horsepower) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9313018321990967,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of residents for the districts with the 3 largest areas?",
          "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
        },
        {
          "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
          "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
          "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
      "generated_sql": "SELECT Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nORDER BY MPG DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.811701774597168,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which allergy is the most common?",
          "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which is the email of the party that has used the services the most number of times?",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the area for the appelation which produced the most wines prior to 2010?",
          "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the car model with the highest mpg ?",
      "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
      "generated_sql": "SELECT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T3 ON T1.Id = T3.MakeId \nJOIN model_list AS T2 ON T3.Model = T2.ModelId \nGROUP BY T2.Model \nORDER BY AVG(CAST(T1.MPG AS REAL)) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.901679515838623,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the deparment with the highest enrollment?",
          "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the song with the most vocals?",
          "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the city with the most customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average horsepower of the cars before 1980?",
      "gold_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
      "generated_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8298048973083496,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        },
        {
          "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
          "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"
        },
        {
          "question": "What are the average enrollment size of the universities that are founded before 1850?",
          "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average horsepower for all cars produced before 1980 ?",
      "gold_sql": "select avg(horsepower) from cars_data where year  <  1980;",
      "generated_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6796836853027344,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age for all person?",
          "query": "SELECT avg(age) FROM Person"
        },
        {
          "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
          "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"
        },
        {
          "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
          "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl of the cars of model volvo?",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "generated_sql": "SELECT AVG(T2.Edispl) \nFROM model_list AS T1 \nJOIN car_names AS T3 ON T1.Model = T3.Model \nJOIN cars_data AS T2 ON T3.MakeId = T2.Id \nWHERE T1.Model = 'volvo'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7768769264221191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        },
        {
          "question": "What is the average unit price of rock tracks?",
          "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
        },
        {
          "question": "What is the average GPA of students taking ACCT-211?",
          "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl for all volvos?",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "generated_sql": "SELECT AVG(T1.Edispl) \nFROM cars_data AS T1 \nJOIN car_names AS T2 \nON T1.Id = T2.MakeId \nJOIN model_list AS T3 \nON T2.Model = T3.Model \nJOIN car_makers AS T4 \nON T3.Maker = T4.Id \nWHERE T4.Maker = 'volvo'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0048918724060059,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age for all person?",
          "query": "SELECT avg(age) FROM Person"
        },
        {
          "question": "What is the average rating stars and title for the oldest movie?",
          "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"
        },
        {
          "question": "What is the average gradepoint for students with the last name Smith?",
          "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum accelerate for different number of cylinders?",
      "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "generated_sql": "SELECT MAX(Accelerate), Cylinders \nFROM cars_data \nGROUP BY Cylinders",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.4406039714813232,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of professors for different school?",
          "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code"
        },
        {
          "question": "What is the number of artists for each gender?",
          "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender"
        },
        {
          "question": "Show the number of transactions for different investors.",
          "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum accelerate for all the different cylinders?",
      "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "generated_sql": "SELECT Cylinders, MAX(Accelerate) \nFROM cars_data \nGROUP BY Cylinders",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.0040009021759033,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum enrollment across all schools?",
          "query": "SELECT max(Enrollment) FROM university"
        },
        {
          "question": "For each type, what is the average tonnage?",
          "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE"
        },
        {
          "question": "What is the most common role for the staff?",
          "query": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which model has the most version(make) of cars?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT Model \nFROM car_names \nGROUP BY Model \nORDER BY COUNT(Make) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7265529632568359,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries has the most number of airlines?",
          "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the state which has the most number of customers.",
          "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
        },
        {
          "question": "Which nationality has the most hosts?",
          "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What model has the most different versions?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT Model, COUNT(DISTINCT Make) \nFROM car_names \nGROUP BY Model \nORDER BY COUNT(DISTINCT Make) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8321735858917236,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What type has the most games?",
          "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the country that has the most perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the label that has the most albums?",
          "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many cars have more than 4 cylinders?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "generated_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6826920509338379,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many courses have more than 2 credits?",
          "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2"
        },
        {
          "question": "How many movie ratings have more than 3 stars?",
          "query": "SELECT count(*) FROM Rating WHERE stars  >  3"
        },
        {
          "question": "How many players have more than 1000 hours of training?",
          "query": "SELECT count(*) FROM Player WHERE HS  >  1000"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with more than 4 cylinders?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6739294528961182,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of cities in the United States with more than 3 airports?",
          "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"
        },
        {
          "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
          "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
        },
        {
          "question": "What is the number of branches that have more than the average number of memberships?",
          "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "how many cars were produced in 1980?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Year = 1980;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6734569072723389,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many lessons were in cancelled state?",
          "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"
        },
        {
          "question": "How many products were not included in any order?",
          "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
        },
        {
          "question": "How many employees live in Canada?",
          "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "In 1980, how many cars were made?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Year = 1980;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6613426208496094,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many lessons were in cancelled state?",
          "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"
        },
        {
          "question": "How many products were not included in any order?",
          "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
        },
        {
          "question": "How many employees live in Canada?",
          "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many car models were produced by the maker with full name American Motor Company?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "generated_sql": "SELECT COUNT(T2.ModelId) \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nWHERE T1.FullName = \"American Motor Company\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7805793285369873,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
          "query": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";"
        },
        {
          "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
          "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
        },
        {
          "question": "How many instrument does the musician with last name \"Heilo\" use?",
          "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of car models created by the car maker American Motor Company?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nWHERE FullName = 'American Motor Company';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8201043605804443,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the number of different different airports that are destinations for American Airlines?",
          "query": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
        },
        {
          "question": "Find the number of routes operated by American Airlines.",
          "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which makers designed more than 3 car models? List full name and the id.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SELECT T1.FullName, T1.Id \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nGROUP BY T1.Id \nHAVING count(T2.ModelId) > 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 8.548813343048096,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which 3 players won the most player awards? List their full name and id.",
          "query": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
        },
        {
          "question": "Which parts have more than 2 faults? Show the part name and id.",
          "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2"
        },
        {
          "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
          "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the names and ids of all makers with more than 3 models?",
      "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SELECT T2.Maker, T2.Id \nFROM model_list AS T1 \nJOIN car_makers AS T2 \nON T1.Maker = T2.Id \nGROUP BY T2.Id \nHAVING COUNT(*) > 3;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.3273632526397705,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names of all customers with more than 2 payments?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
        },
        {
          "question": "What are the ids and names of accounts with 4 or more transactions?",
          "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
        },
        {
          "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
          "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
      "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nWHERE T1.FullName = 'General Motors' \nUNION \nSELECT DISTINCT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T2 \nON T1.Id = T2.MakeId \nWHERE T1.Weight > 3500",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0807065963745117,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all songs produced by the artist with the first name \"Marianne\"?",
          "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\""
        },
        {
          "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        },
        {
          "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
          "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
      "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "generated_sql": "SELECT DISTINCT T1.Model \nFROM model_list AS T1 \nJOIN car_makers AS T2 ON T1.Maker = T2.Id \nWHERE T2.Maker = 'General Motors' \nUNION \nSELECT DISTINCT T3.Model \nFROM model_list AS T3 \nJOIN car_names AS T4 ON T3.Model = T4.Model \nJOIN cars_data AS T5 ON T4.MakeId = T5.Id \nWHERE T5.Weight > 3500",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9910175800323486,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different cities that have more than 100 memberships?",
          "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"
        },
        {
          "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        },
        {
          "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
          "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
      "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
      "generated_sql": "SELECT Year \nFROM cars_data \nWHERE Weight BETWEEN 3000 AND 4000",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7240502834320068,
      "error": null,
      "few_shot_examples": [
        {
          "question": "On which days more than one revisions were made on catalogs.",
          "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
        },
        {
          "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
          "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
        },
        {
          "question": "In which locations are there more than one movie theater with capacity above 300?",
          "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
      "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
      "generated_sql": "SELECT DISTINCT Year \nFROM cars_data \nWHERE Weight < 4000 \nINTERSECT \nSELECT DISTINCT Year \nFROM cars_data \nWHERE Weight > 3000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8259220123291016,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
          "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
        },
        {
          "question": "What are the different cities that have more than 100 memberships?",
          "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"
        },
        {
          "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
          "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the horsepower of the car with the largest accelerate?",
      "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "generated_sql": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8014547824859619,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the location of the perpetrator with the largest kills.",
          "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
        },
        {
          "question": "What is the name of the ship with the largest tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
        },
        {
          "question": "What is the headquarter of the company with the largest sales?",
          "query": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the horsepower of the car with the greatest accelerate?",
      "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "generated_sql": "SELECT Horsepower \nFROM cars_data \nORDER BY Accelerate DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6850101947784424,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the entrepreneur with the greatest weight?",
          "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
        },
        {
          "question": "What is the name of the county with the greatest population?",
          "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
        },
        {
          "question": "What is the name of the hardware product with the greatest price?",
          "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
      "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Cylinders \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nWHERE T3.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') \nORDER BY T1.Accelerate ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9830281734466553,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many draft copies does the document with id 2 have?",
          "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"
        },
        {
          "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
          "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;"
        },
        {
          "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
          "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
      "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Cylinders \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T4.Maker = 'volvo' \nORDER BY T1.Accelerate ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9207537174224854,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many draft copies does the document with id 2 have?",
          "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"
        },
        {
          "question": "Which department has the most professors with a Ph.D.?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (SELECT Accelerate \n                    FROM cars_data \n                    ORDER BY Horsepower DESC \n                    LIMIT 1)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7653005123138428,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many flights have a velocity larger than 200?",
          "query": "SELECT count(*) FROM flight WHERE velocity  >  200"
        },
        {
          "question": "Find the first and last name of students who are not in the largest major.",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What is the first and last name of the students who are not in the largest major?",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7347714900970459,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        },
        {
          "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
          "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"
        },
        {
          "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
          "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many countries has more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(T1.CountryId) \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nGROUP BY T1.CountryId \nHAVING COUNT(DISTINCT T2.Maker) > 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8106777667999268,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many courses have more than 2 credits?",
          "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2"
        },
        {
          "question": "Show the names of countries that have more than one roller coaster.",
          "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
        },
        {
          "question": "Which parts have more than 2 faults? Show the part name and id.",
          "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of countries with more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(*) \nFROM (\n  SELECT T1.CountryId \n  FROM countries AS T1 \n  JOIN car_makers AS T2 \n  ON T1.CountryId = T2.Country \n  GROUP BY T1.CountryId \n  HAVING COUNT(DISTINCT T2.Maker) > 2\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.992100715637207,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of courses with more than 2 credits.",
          "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2"
        },
        {
          "question": "What are the first and last names of all customers with more than 2 payments?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
        },
        {
          "question": "What are the names of parties with at least 2 events?",
          "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "How many cars has over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6955883502960205,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Advisor 1121 has how many students?",
          "query": "SELECT count(*) FROM Student WHERE Advisor =  1121;"
        },
        {
          "question": "How many colleges has more than 15000 students?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        },
        {
          "question": "How many rooms in each building have a capacity of over 50?",
          "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the number of carsw ith over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 6",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7025079727172852,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the number of branches that have more than the average number of memberships?",
          "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"
        },
        {
          "question": "What is the total number of ratings that has more than 3 stars?",
          "query": "SELECT count(*) FROM Rating WHERE stars  >  3"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T2.Model, T1.Horsepower \nFROM cars_data AS T1 \nJOIN car_names AS T2 \nON T1.Id = T2.MakeId \nWHERE T1.Cylinders = 4 \nORDER BY T1.Horsepower DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8539884090423584,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which district has the largest population?",
          "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
        },
        {
          "question": "Which department has the most professors with a Ph.D.?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which vocal type has the band mate with last name \"Heilo\" played the most?",
          "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Model, T2.Horsepower \nFROM model_list AS T1 \nJOIN car_names AS T3 ON T1.ModelId = T3.MakeId \nJOIN cars_data AS T2 ON T3.MakeId = T2.Id \nWHERE T2.Cylinders = 4 \nORDER BY T2.Horsepower DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9877910614013672,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries has the most number of airlines?",
          "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which campus has the most faculties in year 2003?",
          "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
        },
        {
          "question": "Which department has the most professors with a Ph.D.?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
      "gold_sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
      "generated_sql": "SELECT T1.MakeId, T1.Make \nFROM car_names AS T1 \nJOIN cars_data AS T2 \nON T1.MakeId = T2.Id \nWHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) \nAND T2.Cylinders <= 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9010748863220215,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the list of page size which have more than 3 product listed",
          "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3"
        },
        {
          "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
          "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"
        },
        {
          "question": "List all player names who have an overall rating higher than the average.",
          "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
      "gold_sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
      "generated_sql": "SELECT T1.MakeId, T1.Make \nFROM car_names AS T1 \nJOIN cars_data AS T2 \nON T1.MakeId = T2.Id \nWHERE T2.Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data) \nAND T2.Cylinders < 4;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0108823776245117,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all clubs that do not have any players?",
          "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
        },
        {
          "question": "What are the names of customers with checking balances lower than the average checking balance?",
          "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
        },
        {
          "question": "What are the names of teams from universities that have a below average enrollment?",
          "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
      "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "generated_sql": "SELECT MAX(MPG) \nFROM cars_data \nWHERE Cylinders = 8 OR Year < 1980",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8029968738555908,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of professors with a Ph.D. ?",
          "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
        },
        {
          "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
          "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"
        },
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
      "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "generated_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7473526000976562,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
          "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"
        },
        {
          "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
          "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"
        },
        {
          "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
          "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "generated_sql": "SELECT T2.Model \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id = T2.Maker \nJOIN cars_data AS T3 ON T3.Id = T2.ModelId \nWHERE T3.Weight < 3500 AND T1.FullName != 'Ford Motor Company'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8785824775695801,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which channels are not owned by CCTV? Give me the channel names.",
          "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'"
        },
        {
          "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        },
        {
          "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "generated_sql": "SELECT DISTINCT T4.Model \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id = T2.Maker \nJOIN car_names AS T3 ON T2.Model = T3.Model \nJOIN cars_data AS T4 ON T3.MakeId = T4.Id \nWHERE T4.Weight < 3500 AND T1.FullName != 'Ford Motor Company'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.961402416229248,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the titles of all movies that were not reviewed by Chris Jackson?",
          "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'"
        },
        {
          "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        },
        {
          "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
          "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the name of the countries where there is not a single car maker?",
      "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "car_1",
      "question": "What are the names of the countries with no car makers?",
      "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "car_1",
      "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
      "gold_sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
      "generated_sql": "SELECT T1.Id, T1.Maker \nFROM car_makers AS T1 \nJOIN model_list AS T2 \nON T1.Id = T2.Maker \nGROUP BY T1.Id \nHAVING COUNT(T2.ModelId) >= 2 \nAND T1.Id IN (\n    SELECT T1.Id \n    FROM car_makers AS T1 \n    GROUP BY T1.Id \n    HAVING COUNT(T1.Id) > 3\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0344982147216797,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
          "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2"
        },
        {
          "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
          "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"
        },
        {
          "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
          "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
      "gold_sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "car_1",
      "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
      "gold_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
      "generated_sql": "SELECT T1.CountryId, T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nGROUP BY T1.CountryId \nHAVING COUNT(*) > 3 \n\nUNION \n\nSELECT T1.CountryId, T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 \nON T1.CountryId = T2.Country \nJOIN model_list AS T3 \nON T2.Id = T3.Maker \nWHERE T3.Model = 'fiat'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.102590799331665,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of musicals who have at 3 or more actors?",
          "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
          "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
        },
        {
          "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
          "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
        }
      ]
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
      "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
      "generated_sql": "SELECT T1.CountryId, T1.CountryName \nFROM countries AS T1 \nWHERE T1.CountryId IN (\n    SELECT T2.Country \n    FROM car_makers AS T2 \n    GROUP BY T2.Country \n    HAVING COUNT(*) > 3\n) \nUNION \nSELECT T1.CountryId, T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId = T2.Country \nJOIN model_list AS T3 ON T2.Id = T3.Maker \nWHERE T3.Model = 'fiat'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.250572919845581,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all reviewers that have rated 3 or more movies?",
          "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
          "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
        },
        {
          "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
          "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which country does Airline \"JetBlue Airways\" belong to?",
      "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6587362289428711,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
          "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""
        },
        {
          "question": "Which category does the product named \"flax\" belong to?",
          "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\""
        },
        {
          "question": "In which country does Roberto Almeida?",
          "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What country is Jetblue Airways affiliated with?",
      "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT Country FROM airlines WHERE Airline = \"Jetblue Airways\"",
      "exact_match": true,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6806807518005371,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the country that has the most perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the location code for the country \"Canada\"?",
          "query": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\""
        },
        {
          "question": "What is Nancy Edwards's address?",
          "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
      "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6447486877441406,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the airline with the most routes?",
          "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the type of allergy Cat?",
          "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
        },
        {
          "question": "What is the title of the newest movie?",
          "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which abbreviation corresponds to Jetblue Airways?",
      "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6716723442077637,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which cities have 2 to 4 parks?",
          "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"
        },
        {
          "question": "What student id corresponds to the oldest student?",
          "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
        },
        {
          "question": "Which authors did not submit to any workshop?",
          "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "List all airline names and their abbreviations in \"USA\".",
      "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6886193752288818,
      "error": null,
      "few_shot_examples": [
        {
          "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
          "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"
        },
        {
          "question": "List all public schools and their locations.",
          "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
        },
        {
          "question": "List all students' first names and last names who majored in 600.",
          "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are the airline names and abbreviations for airlines in the USA?",
      "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6612372398376465,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and distances for all airplanes?",
          "query": "SELECT name ,  distance FROM Aircraft"
        },
        {
          "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
          "query": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'"
        },
        {
          "question": "What are the names of all songs in English?",
          "query": "SELECT song_name FROM song WHERE languages  =  \"english\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "List the airport code and name in the city of Anthony.",
      "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "generated_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1038188934326172,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the airport in the city of Goroka.",
          "query": "SELECT name FROM airports WHERE city  =  'Goroka'"
        },
        {
          "question": "List the type of bed and name of all traditional rooms.",
          "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"
        },
        {
          "question": "Find the name and description of the role with code \"MG\".",
          "query": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the airport code and airport name corresonding to the city Anthony.",
      "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "generated_sql": "SELECT AirportCode, AirportName \nFROM airports \nWHERE City = 'Anthony'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.392434597015381,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give me the name and description of the document type code RV.",
          "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
        },
        {
          "question": "Give me the name and description of the location with code x.",
          "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""
        },
        {
          "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
          "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many airlines do we have?",
      "gold_sql": "SELECT count(*) FROM AIRLINES",
      "generated_sql": "SELECT COUNT(*) FROM airlines",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6463637351989746,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        },
        {
          "question": "How many employees do we have?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the total number of airlines?",
      "gold_sql": "SELECT count(*) FROM AIRLINES",
      "generated_sql": "SELECT COUNT(*) FROM airlines",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6367857456207275,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of airlines?",
          "query": "SELECT count(*) FROM airlines"
        },
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the total number of companies?",
          "query": "SELECT count(*) FROM company"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many airports do we have?",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.4254355430603027,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        },
        {
          "question": "How many employees do we have?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of  airports.",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.622826337814331,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the total number of distinct customers.",
          "query": "SELECT count(*) FROM customers"
        },
        {
          "question": "Return the number of companies created by Andy.",
          "query": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'"
        },
        {
          "question": "Return the number of music festivals of each category.",
          "query": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights do we have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) FROM flights",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6224629878997803,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        },
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        },
        {
          "question": "How many employees do we have?",
          "query": "SELECT count(*) FROM Employee"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) FROM flights",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.680117130279541,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the total number of distinct customers.",
          "query": "SELECT count(*) FROM customers"
        },
        {
          "question": "Return the number of companies created by Andy.",
          "query": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'"
        },
        {
          "question": "Return the number of music festivals of each category.",
          "query": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which airline has abbreviation 'UAL'?",
      "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "generated_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7378630638122559,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which artist has the most albums?",
          "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which order has the most recent shipment? Give me the order id.",
          "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)"
        },
        {
          "question": "Which head's name has the substring 'Ha'? List the id and name.",
          "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the airline with abbreviation 'UAL'.",
      "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "generated_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7161083221435547,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the advisor with the most students.",
          "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Give the name of the student in the History department with the most credits.",
          "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
        },
        {
          "question": "Give me the name and description of the location with code x.",
          "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many airlines are from USA?",
      "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT COUNT(*) FROM airlines WHERE Country = \"USA\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5931706428527832,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many airlines are there?",
          "query": "SELECT count(*) FROM airlines"
        },
        {
          "question": "How many customers are from California?",
          "query": "SELECT count(*) FROM customers WHERE state = \"CA\";"
        },
        {
          "question": "How many artists are from Bangladesh?",
          "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of airlines in the USA.",
      "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6299078464508057,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of airlines based in Russia?",
          "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'"
        },
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of courses in the Physics department.",
          "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which city and country is the Alton airport at?",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6559984683990479,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name and city of the airport which is the destination of the most number of routes.",
          "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What city and state is the bank with the name morningside in?",
          "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'"
        },
        {
          "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
          "query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the city and country for the Alton airport.",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT City, Country \nFROM airports \nWHERE AirportName = 'Alton';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7727954387664795,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give me the title and highest price for each film.",
          "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
        },
        {
          "question": "Show the city and the number of branches opened before 2010 for each city.",
          "query": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"
        },
        {
          "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
          "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the airport name for airport 'AKO'?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "generated_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6485044956207275,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the aircraft name for the flight with number 99",
          "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
        },
        {
          "question": "What is the name and distance for aircraft with id 12?",
          "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
        },
        {
          "question": "What is the name and salary for employee with id 242518965?",
          "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the name of the airport with code 'AKO'.",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "generated_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.645272970199585,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the name of the mountain with the greatest height.",
          "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
        },
        {
          "question": "Show the zip code of the county with name \"Howard\".",
          "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""
        },
        {
          "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
          "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are airport names at City 'Aberdeen'?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "generated_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7544872760772705,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the airports in the city of Goroka?",
          "query": "SELECT name FROM airports WHERE city  =  'Goroka'"
        },
        {
          "question": "What are the names of all campuses located at Chico?",
          "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\""
        },
        {
          "question": "What are the names of products with price at most 200?",
          "query": "SELECT name FROM products WHERE price  <=  200"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are the names of airports in Aberdeen?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "generated_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6613945960998535,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the airports in the city of Goroka?",
          "query": "SELECT name FROM airports WHERE city  =  'Goroka'"
        },
        {
          "question": "What are the names of the airports which are not in the country 'Iceland'?",
          "query": "SELECT name FROM airport WHERE country != 'Iceland'"
        },
        {
          "question": "What are the names of all airports in Cuba or Argentina?",
          "query": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from 'APG'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6681914329528809,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each origin, how many flights came from there?",
          "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
        },
        {
          "question": "How many customers are from California?",
          "query": "SELECT count(*) FROM customers WHERE state = \"CA\";"
        },
        {
          "question": "How many artists are from Bangladesh?",
          "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights departing from 'APG'.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7361080646514893,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of courses without prerequisites.",
          "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights have destination ATO?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6702642440795898,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many employees have certificate.",
          "query": "SELECT count(DISTINCT eid) FROM Certificate"
        },
        {
          "question": "How many flights have a velocity larger than 200?",
          "query": "SELECT count(*) FROM flight WHERE velocity  >  200"
        },
        {
          "question": "How many allergies have type animal?",
          "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights into ATO.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6880755424499512,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of courses without prerequisites.",
          "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from City Aberdeen?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.SourceAirport = T2.AirportCode \nWHERE T2.City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.843163013458252,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each origin, how many flights came from there?",
          "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
        },
        {
          "question": "How many games were played in city Atlanta in 2000?",
          "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
        },
        {
          "question": "How many customers are living in city \"Lake Geovannyton\"?",
          "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights departing from Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport IN (\n  SELECT AirportCode \n  FROM airports \n  WHERE City = 'Aberdeen'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8355886936187744,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the total number of distinct customers.",
          "query": "SELECT count(*) FROM customers"
        },
        {
          "question": "What is the average number of votes of representatives from party \"Republican\"?",
          "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""
        },
        {
          "question": "Find the number of papers published by authors from the institution \"Tokohu University\".",
          "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights arriving in Aberdeen city?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport IN (\n    SELECT AirportCode \n    FROM airports \n    WHERE City = 'Aberdeen'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7279610633850098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students live in each city?",
          "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "How many leagues are there in England?",
          "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights arriving in Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport IN (\n    SELECT AirportCode \n    FROM airports \n    WHERE City = 'Aberdeen'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7277834415435791,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of tweets in record.",
          "query": "SELECT count(*) FROM tweets"
        },
        {
          "question": "Count the number of cities in Australia.",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "Find the number of professors in accounting department.",
          "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode \nJOIN airports AS T3 ON T1.DestAirport = T3.AirportCode \nWHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9850120544433594,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
          "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
        },
        {
          "question": "How many people have membership in the club \"Pen and Paper Gaming\"?",
          "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""
        },
        {
          "question": "How many students have a food allergy?",
          "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights fly from Aberdeen to Ashley?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = 'ABR' AND DestAirport = 'ASY'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7010748386383057,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each origin, how many flights came from there?",
          "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
        },
        {
          "question": "How many tracks belong to rock genre?",
          "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
        },
        {
          "question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?",
          "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights does airline 'JetBlue Airways' have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "generated_sql": "SELECT COUNT(T2.FlightNo) \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T1.Airline = 'JetBlue Airways'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.8767821788787842,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        },
        {
          "question": "How many friends does Dan have?",
          "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
        },
        {
          "question": "How many friends does Dan have?",
          "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the number of Jetblue Airways flights.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights AS T1 \nJOIN airlines AS T2 \nON T1.Airline = T2.uid \nWHERE T2.Airline = 'Jetblue Airways'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.818530797958374,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of cities in Australia.",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "Count the number of characteristics of the 'flax' product.",
          "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines \nON flights.Airline = airlines.uid \nJOIN airports \nON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8550395965576172,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many routes go from the United States to Canada?",
          "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
        },
        {
          "question": "How many tracks belong to rock genre?",
          "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
        },
        {
          "question": "How many students who are female are allergic to milk or eggs?",
          "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of United Airlines flights arriving in ASY Airport.",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines \nON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.DestAirport = 'ASY'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8825645446777344,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of cities in Australia.",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "Count the number of different positions in the club \"Bootup Baltimore\".",
          "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines \nON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.SourceAirport = 'AHD';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8793444633483887,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each origin, how many flights came from there?",
          "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
        },
        {
          "question": "How many people graduated from San Francisco State University in 2004?",
          "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""
        },
        {
          "question": "How many professors who are from either Accounting or Biology department?",
          "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of United Airlines flights leaving from AHD Airport.",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT COUNT(T2.FlightNo) \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0637245178222656,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the maximum number of points for climbers from the United Kingdom.",
          "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\""
        },
        {
          "question": "What is the average number of votes of representatives from party \"Republican\"?",
          "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""
        },
        {
          "question": "Find the number of papers published by authors from the institution \"Tokohu University\".",
          "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many United Airlines flights go to City 'Aberdeen'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8910567760467529,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many routes go from the United States to Canada?",
          "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
        },
        {
          "question": "How many Annual Meeting events happened in the United Kingdom region?",
          "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
        },
        {
          "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
          "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines AS t1 \nJOIN flights AS t2 \nON t1.uid = t2.Airline \nJOIN airports AS t3 \nON t2.DestAirport = t3.AirportCode \nWHERE t1.Airline = \"United Airlines\" AND t3.City = \"Aberdeen\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1517443656921387,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.",
          "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
        },
        {
          "question": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.",
          "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"
        },
        {
          "question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
          "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which city has most number of arriving flights?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.City \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.DestAirport = T2.AirportCode \nGROUP BY T2.City \nORDER BY count(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8889491558074951,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which origin has most number of flights?",
          "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which city does has most number of customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "which course has most number of registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which city has the most frequent destination airport?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.City \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.DestAirport = T2.AirportCode \nGROUP BY T2.City \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8502964973449707,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which city has hosted the most events?",
          "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which artist has the most albums?",
          "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which song has the most vocals?",
          "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which city has most number of departing flights?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.City \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.SourceAirport = T2.AirportCode \nGROUP BY T2.City \nORDER BY count(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8644907474517822,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which origin has most number of flights?",
          "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which city does has most number of customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "which course has most number of registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which city is the most frequent source airport?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City \nFROM airports AS T1 \nJOIN flights AS T2 \nON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.City \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0780537128448486,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which allergy is the most common?",
          "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which city has hosted the most events?",
          "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the city with the most customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the code of airport that has the highest number of flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT SourceAirport \nFROM flights \nGROUP BY SourceAirport \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8778674602508545,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of flights?",
          "query": "SELECT count(*) FROM Flight"
        },
        {
          "question": "What is the id, name and IATA code of the airport that had most number of flights?",
          "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the airport code of the airport with the most flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT SourceAirport \nFROM flights \nGROUP BY SourceAirport \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7595689296722412,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the code of the city with the most students?",
          "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id, name and IATA code of the airport that had most number of flights?",
          "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the activity with the most students?",
          "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the code of airport that has fewest number of flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT SourceAirport \nFROM flights \nGROUP BY SourceAirport \nORDER BY count(*) \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8223202228546143,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What destination has the fewest number of flights?",
          "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "What is the id, name and IATA code of the airport that had most number of flights?",
          "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the code of the airport with the least flights.",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT SourceAirport \nFROM flights \nGROUP BY SourceAirport \nORDER BY COUNT(*) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.814021110534668,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the names of the courses with at least five enrollments.",
          "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"
        },
        {
          "question": "Show the location name and code with the least documents.",
          "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "What is the structure of the document with the least number of accesses?",
          "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which airline has most number of flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.Airline \nORDER BY count(*) DESC \nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8795723915100098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which origin has most number of flights?",
          "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "which course has most number of registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which city does has most number of customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What airline serves the most flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.Airline \nORDER BY count(*) DESC \nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8430261611938477,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the airline with the most routes?",
          "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the song with the most vocals?",
          "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the city with the most customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
      "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.Abbreviation, T1.Country \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.uid \nORDER BY count(*) \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9038577079772949,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What destination has the fewest number of flights?",
          "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "Find the name and address of the department that has the highest number of students.",
          "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name and hours of project that has the most number of scientists.",
          "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
      "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.Abbreviation, T1.Country \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.uid \nORDER BY count(*) \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9026906490325928,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
          "query": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "What is the name and country for the artist with most number of exhibitions?",
          "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the type and id of the organization that has the most research staff?",
          "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have some flight departing from airport 'AHD'?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT DISTINCT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T2.SourceAirport = 'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8173236846923828,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of teams from universities that have a below average enrollment?",
          "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
        },
        {
          "question": "What are the names of departments that have primarily affiliated physicians.",
          "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
        },
        {
          "question": "what are the event details of the services that have the type code 'Marriage'?",
          "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have a flight with source airport AHD?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T2.SourceAirport = 'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8248167037963867,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all locations which don't have a train station with at least 15 platforms.",
          "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
        },
        {
          "question": "Which department has the most professors with a Ph.D.?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
          "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have flights arriving at airport 'AHD'?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T2.DestAirport = 'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7892963886260986,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the countries that have at least two perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
          "query": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""
        },
        {
          "question": "What are the names of departments that have primarily affiliated physicians.",
          "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have a flight with destination airport AHD?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T2.DestAirport = 'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.758291482925415,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all locations which don't have a train station with at least 15 platforms.",
          "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"
        },
        {
          "question": "Which department has the most professors with a Ph.D.?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
          "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have departing flights from both APG and CVO airports?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have departures from CVO but not from APG airports?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have at least 10 flights.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.uid \nHAVING count(*) >= 10",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8053028583526611,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all the buildings that have at least 10 professors.",
          "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
        },
        {
          "question": "Show names for all aircraft with at least two flights.",
          "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
        },
        {
          "question": "Show all church names that have hosted least two weddings.",
          "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have at least 10 flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.uid \nHAVING COUNT(*) >= 10",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.819291353225708,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which districts have at least two addresses?",
          "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
        },
        {
          "question": "Which countries have at least 3 cities?",
          "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"
        },
        {
          "question": "Show names of musicals which have at least three actors.",
          "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have fewer than 200 flights.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.uid \nHAVING COUNT(T2.FlightNo) < 200;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8174879550933838,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Report all majors that have less than 3 students.",
          "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3"
        },
        {
          "question": "Find the name of the ships that have more than one captain.",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of all playlists that have more than 100 tracks?",
          "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have less than 200 flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo) < 200",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7594244480133057,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries have more than one mountain?",
          "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
        },
        {
          "question": "Which authors have submitted to more than one workshop?",
          "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"
        },
        {
          "question": "Which schools have more than 1 player? Give me the school locations.",
          "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of Airline \"United Airlines\"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T1.Airline = \"United Airlines\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9757540225982666,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of the shortest flights?",
          "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
        },
        {
          "question": "What are the flight numbers for the aircraft Airbus A340-300?",
          "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
        },
        {
          "question": "What are the titles of all the Aerosmith albums?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Which flight numbers correspond to United Airlines flights?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T1.Airline = 'United Airlines'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1244454383850098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which job titles correspond to jobs with salaries over 9000?",
          "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000"
        },
        {
          "question": "Show all flight numbers with aircraft Airbus A340-300.",
          "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
        },
        {
          "question": "What are the flight numbers for the aircraft Airbus A340-300?",
          "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights departing from Airport \"APG\"?",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7157144546508789,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "What are the card numbers of members from Kentucky?",
          "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
        },
        {
          "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
          "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights leaving from APG.",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9206609725952148,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "What are the card numbers of members from Kentucky?",
          "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
        },
        {
          "question": "List the number of invoices from Chicago, IL.",
          "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "generated_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7559189796447754,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "What are the card numbers of members from Kentucky?",
          "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
        },
        {
          "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
          "query": "SELECT flno FROM Flight WHERE distance  >  2000"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights landing at APG.",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "generated_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7641506195068359,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the flight number of flights with three lowest distances.",
          "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
        },
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "Find the name of all the clubs at \"AKW\".",
          "query": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.SourceAirport = T2.AirportCode \nWHERE T2.City = \"Aberdeen\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7717189788818359,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "What are the flight numbers for the aircraft Airbus A340-300?",
          "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
        },
        {
          "question": "What are the names of wines made from red grapes?",
          "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights leaving from Aberdeen.",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7178184986114502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "Give the names and scores of wines made from white grapes.",
          "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""
        },
        {
          "question": "Give me the temperature of Shanghai in January.",
          "query": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.DestAirport = T2.AirportCode \nWHERE T2.City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7665772438049316,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the numbers of all flights coming from Los Angeles?",
          "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
        },
        {
          "question": "What are the flight numbers for the aircraft Airbus A340-300?",
          "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""
        },
        {
          "question": "What are full names and salaries of employees working in the city of London?",
          "query": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights arriving in Aberdeen.",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.72564697265625,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the names of mountains in alphabetical order.",
          "query": "SELECT Name FROM mountain ORDER BY Name ASC"
        },
        {
          "question": "Give me the temperature of Shanghai in January.",
          "query": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""
        },
        {
          "question": "Give id of the instructor who advises students in the History department.",
          "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights AS T1 \nJOIN airports AS T2 \nON T1.DestAirport = T2.AirportCode \nWHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9098708629608154,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of tweets in record.",
          "query": "SELECT count(*) FROM tweets"
        },
        {
          "question": "Find the number of games taken place in city Atlanta in 2000.",
          "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
        },
        {
          "question": "Find the number of professors in accounting department.",
          "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "How many flights land in Aberdeen or Abilene?",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport IN (\n    SELECT AirportCode \n    FROM airports \n    WHERE City = 'Aberdeen' OR City = 'Abilene'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8176541328430176,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students live in HKG or CHI?",
          "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "How many leagues are there in England?",
          "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
        }
      ]
    },
    {
      "db_id": "flight_2",
      "question": "Find the name of airports which do not have any flight in and out.",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Which airports do not have departing or arriving flights?",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many employees are there?",
      "gold_sql": "SELECT count(*) FROM employee",
      "generated_sql": "SELECT COUNT(*) FROM employee;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.816115140914917,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many employees are there?",
          "query": "SELECT count(*) FROM Staff;"
        },
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of employees",
      "gold_sql": "SELECT count(*) FROM employee",
      "generated_sql": "SELECT COUNT(*) FROM employee",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6984481811523438,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Sort employee names by their age in ascending order.",
      "gold_sql": "SELECT name FROM employee ORDER BY age",
      "generated_sql": "SELECT Name FROM employee ORDER BY Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7507474422454834,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Sort the names of products in ascending order of their price.",
          "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"
        },
        {
          "question": "Sort the customer names in alphabetical order.",
          "query": "SELECT customer_details FROM customers ORDER BY customer_details"
        },
        {
          "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
          "query": "SELECT name FROM swimmer ORDER BY meter_100"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "List the names of employees and sort in ascending order of age.",
      "gold_sql": "SELECT name FROM employee ORDER BY age",
      "generated_sql": "SELECT Name FROM employee ORDER BY Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8941085338592529,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of editors in ascending order of age.",
          "query": "SELECT Name FROM editor ORDER BY Age ASC"
        },
        {
          "question": "List the names of technicians in ascending order of age.",
          "query": "SELECT Name FROM technician ORDER BY Age ASC"
        },
        {
          "question": "List the names of players in ascending order of votes.",
          "query": "SELECT Player_name FROM player ORDER BY Votes ASC"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is the number of employees from each city?",
      "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "generated_sql": "SELECT City, COUNT(*) FROM employee GROUP BY City",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7061781883239746,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of employees whose title is IT Staff from each city?",
          "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
        },
        {
          "question": "What is the number of artists for each gender?",
          "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender"
        },
        {
          "question": "What is the code of each role and the number of employees in each role?",
          "query": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of employees for each city.",
      "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "generated_sql": "SELECT City, COUNT(*) FROM employee GROUP BY City",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6846041679382324,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each competition, count the number of matches.",
          "query": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition"
        },
        {
          "question": "Count the number of voting records for each election cycle.",
          "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle"
        },
        {
          "question": "Find the number of followers for each user.",
          "query": "SELECT count(*) FROM follows GROUP BY f1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which cities do more than one employee under age 30 come from?",
      "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "generated_sql": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(*) > 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8124656677246094,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries have more than one mountain?",
          "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
        },
        {
          "question": "In which locations are there more than one movie theater with capacity above 300?",
          "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
        },
        {
          "question": "Find the locations that have more than one movie theater with capacity above 300.",
          "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the cities that have more than one employee under age 30.",
      "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "generated_sql": "SELECT City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING count(*) > 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8931357860565186,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the ships that have more than one captain.",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        },
        {
          "question": "Find the locations that have more than one movie theater with capacity above 300.",
          "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
        },
        {
          "question": "Show all the buildings that have at least 10 professors.",
          "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the number of shops in each location.",
      "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "generated_sql": "SELECT COUNT(*) , Location FROM shop GROUP BY Location",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6970982551574707,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of departments in each school.",
          "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
        },
        {
          "question": "Find the number of users in each role.",
          "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code"
        },
        {
          "question": "Find the number of students in each major.",
          "query": "SELECT count(*) ,  major FROM student GROUP BY major"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many shops are there in each location?",
      "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "generated_sql": "SELECT count(*) ,  Location FROM shop GROUP BY Location",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7034480571746826,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students are there in each major?",
          "query": "SELECT count(*) ,  major FROM student GROUP BY major"
        },
        {
          "question": "how many airports are there in each country?",
          "query": "SELECT count(*) ,  country FROM airport GROUP BY country"
        },
        {
          "question": "How many students are in each department?",
          "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the manager name and district of the shop whose number of products is the largest.",
      "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "generated_sql": "SELECT Manager_name, District \nFROM shop \nORDER BY Number_products DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7683656215667725,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name and ID of the product whose total order quantity is the largest.",
          "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"
        },
        {
          "question": "Find the name and email of the user followed by the least number of people.",
          "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1"
        },
        {
          "question": "What is the name of the district with the most residents?",
          "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the manager name and district of the shop that sells the largest number of products?",
      "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "generated_sql": "SELECT Manager_name, District \nFROM shop \nORDER BY Number_products DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7653303146362305,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name and location of the cinema with the largest capacity?",
          "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
        },
        {
          "question": "What is the party that has the largest number of representatives?",
          "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the player with the largest number of votes?",
          "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "find the minimum and maximum number of products of all stores.",
      "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "generated_sql": "SELECT min(Number_products), max(Number_products) FROM shop",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8559510707855225,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the maximum and total number of followers of all users.",
          "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
        },
        {
          "question": "Return the maximum and minimum number of cows across all farms.",
          "query": "SELECT max(Cows) ,  min(Cows) FROM farm"
        },
        {
          "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
          "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the minimum and maximum number of products across all the shops?",
      "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "generated_sql": "SELECT min(Number_products), max(Number_products) FROM shop",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7324612140655518,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the maximum and minimum number of cows across all farms.",
          "query": "SELECT max(Cows) ,  min(Cows) FROM farm"
        },
        {
          "question": "What are the maximum and minimum number of cities in all markets.",
          "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"
        },
        {
          "question": "What are the maximum and minimum number of transit passengers of all aiports.",
          "query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Return the name, location and district of all shops in descending order of number of products.",
      "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "generated_sql": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8499515056610107,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all countries and their number of airlines in the descending order of number of airlines.",
          "query": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"
        },
        {
          "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
          "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
        },
        {
          "question": "Show all the cinema names and opening years in descending order of opening year.",
          "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
      "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "generated_sql": "SELECT Name, Location, District \nFROM shop \nORDER BY Number_products DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8150246143341064,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all locations and the number of gas stations in each location ordered by the count.",
          "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
        },
        {
          "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
          "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC"
        },
        {
          "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
          "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the names of stores whose number products is more than the average number of products.",
      "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "generated_sql": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.802117109298706,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
          "query": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)"
        },
        {
          "question": "Find the name of rooms whose price is higher than the average price.",
          "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
        },
        {
          "question": "Find the number of people whose age is greater than all engineers.",
          "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shops' number products is above the average? Give me the shop names.",
      "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "generated_sql": "SELECT Name \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7086846828460693,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
          "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\""
        },
        {
          "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
          "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )"
        },
        {
          "question": "What are the mascots for schools with enrollments above the average?",
          "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "find the name of employee who was awarded the most times in the evaluation.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Employee_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8620953559875488,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the full name of employee who supported the most number of customers.",
          "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name of the user who gives the most reviews.",
          "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name of the swimmer who has the most records.",
          "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which employee received the most awards in evaluations? Give me the employee name.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nGROUP BY T1.Name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8173739910125732,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which course is enrolled in by the most students? Give me the course name.",
          "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which customer uses the most policies? Give me the customer name.",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which program is broadcast most frequently? Give me the program name.",
          "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the employee who got the highest one time bonus.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nORDER BY T2.Bonus DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.920018196105957,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name and gender of the candidate who got the highest support rate.",
          "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
        },
        {
          "question": "Find the name of the user who gave the highest rating.",
          "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1"
        },
        {
          "question": "Find the name of customer who has the highest amount of loans.",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which employee received the biggest bonus? Give me the employee name.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 \nON T1.Employee_ID = T2.Employee_ID \nORDER BY T2.Bonus DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7496001720428467,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which customer uses the most policies? Give me the customer name.",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which program is broadcast most frequently? Give me the program name.",
          "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which course is enrolled in by the most students? Give me the course name.",
          "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the names of employees who never won any award in the evaluation.",
      "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "generated_sql": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8869588375091553,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
          "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
        },
        {
          "question": "Find the names of users who did not leave any review.",
          "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
        },
        {
          "question": "Find the names of users who did not leave any review.",
          "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the names of the employees who never received any evaluation?",
      "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "generated_sql": "SELECT Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8700258731842041,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of wrestlers who have never been eliminated?",
          "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
        },
        {
          "question": "What are the names of instructors who didn't teach?",
          "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
        },
        {
          "question": "What are the names of people who are not entrepreneurs?",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is the name of the shop that is hiring the largest number of employees?",
      "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM shop AS T1 \nJOIN hiring AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Shop_ID \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1901140213012695,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the name of the customer who has the largest number of orders?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shop has the most employees? Give me the shop name.",
      "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT t1.Name \nFROM shop AS t1 \nJOIN hiring AS t2 \nON t1.Shop_ID = t2.Shop_ID \nGROUP BY t1.Name \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1652605533599854,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which customer uses the most policies? Give me the customer name.",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which product has the most problems? Give me the number of problems and the product name.",
          "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which program is broadcast most frequently? Give me the program name.",
          "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the shops that do not hire any employee.",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.262998104095459,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the courses that do not have any prerequisite?",
          "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        },
        {
          "question": "Find the name of dorms that do not have any amenity",
          "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"
        },
        {
          "question": "Show the name of buildings that do not have any institution.",
          "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shops run with no employees? Find the shop names",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8900115489959717,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of all the clients with no booking.",
          "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID"
        },
        {
          "question": "Find the names of the swimmers who have no record.",
          "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
        },
        {
          "question": "List the names of shops that have no devices in stock.",
          "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the number of employees hired in each shop; show the shop name as well.",
      "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "generated_sql": "SELECT T2.Name, COUNT(*) \nFROM hiring AS T1 \nJOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0777695178985596,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of track and the number of races in each track.",
          "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
        },
        {
          "question": "display the department name and number of employees in each of the department.",
          "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"
        },
        {
          "question": "Give the name of each department and the number of employees in each.",
          "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "For each shop, return the number of employees working there and the name of the shop.",
      "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "generated_sql": "SELECT T2.Name, COUNT(*) \nFROM hiring AS T1 \nJOIN shop AS T2 \nON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Shop_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9909906387329102,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the name and number of reservations made for each of the rooms.",
          "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"
        },
        {
          "question": "For each party, return the name of the party and the number of delegates from that party.",
          "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"
        },
        {
          "question": "Show the name for regions and the number of storms for each region.",
          "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is total bonus given in all evaluations?",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "generated_sql": "SELECT SUM(Bonus) FROM evaluation",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7400016784667969,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total checking balance in all accounts?",
          "query": "SELECT sum(balance) FROM checking"
        },
        {
          "question": "What is the total amount of all payments?",
          "query": "SELECT sum(amount) FROM payment"
        },
        {
          "question": "What is the total enrollment number of all colleges?",
          "query": "SELECT sum(enr) FROM College"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the total amount of bonus given in all the evaluations.",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "generated_sql": "SELECT sum(Bonus) FROM evaluation",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.718238353729248,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the total claimed amount of all the claims.",
          "query": "SELECT sum(Amount_Claimed) FROM Claims"
        },
        {
          "question": "Find the total capacity of all dorms.",
          "query": "SELECT sum(student_capacity) FROM dorm"
        },
        {
          "question": "Find the total hours of all projects.",
          "query": "SELECT sum(hours) FROM projects"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Give me all the information about hiring.",
      "gold_sql": "SELECT * FROM hiring",
      "generated_sql": "SELECT * FROM hiring",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6871376037597656,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all the information about election.",
          "query": "SELECT * FROM election"
        },
        {
          "question": "What is all the information about all people?",
          "query": "SELECT * FROM people"
        },
        {
          "question": "Display all the information about the department Marketing.",
          "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is all the information about hiring?",
      "gold_sql": "SELECT * FROM hiring",
      "generated_sql": "SELECT * FROM hiring",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6476712226867676,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is all the information about all people?",
          "query": "SELECT * FROM people"
        },
        {
          "question": "What is all the information about the basketball match?",
          "query": "SELECT * FROM basketball_match"
        },
        {
          "question": "What is all the information about the Marketing department?",
          "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many different store locations are there?",
      "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
      "generated_sql": "SELECT COUNT(DISTINCT Location) FROM shop",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6940417289733887,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different classes are there?",
          "query": "SELECT count(DISTINCT class_code) FROM CLASS"
        },
        {
          "question": "How many different departments are there?",
          "query": "SELECT count(DISTINCT dept_name) FROM department"
        },
        {
          "question": "how many different positions are there?",
          "query": "SELECT count(DISTINCT POSITION) FROM player"
        }
      ]
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of distinct store locations.",
      "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
      "generated_sql": "SELECT COUNT(DISTINCT Location) FROM shop",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6997709274291992,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of distinct governors.",
          "query": "SELECT count(DISTINCT Governor) FROM party"
        },
        {
          "question": "Count the number of distinct channel owners.",
          "query": "SELECT count(DISTINCT OWNER) FROM channel"
        },
        {
          "question": "Count the number of distinct company industries.",
          "query": "SELECT count(DISTINCT Industry) FROM Companies"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many documents do we have?",
      "gold_sql": "SELECT count(*) FROM Documents",
      "generated_sql": "SELECT count(*) FROM Documents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8592166900634766,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        },
        {
          "question": "How many employees do we have?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of documents.",
      "gold_sql": "SELECT count(*) FROM Documents",
      "generated_sql": "SELECT count(*) FROM Documents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6622512340545654,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of documents.",
          "query": "SELECT count(*) FROM Documents"
        },
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "List document IDs, document names, and document descriptions for all documents.",
      "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "generated_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7352519035339355,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all document ids and receipt dates of documents.",
          "query": "SELECT document_id ,  receipt_date FROM Documents;"
        },
        {
          "question": "Show ids, first names, last names, and phones for all customers.",
          "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers"
        },
        {
          "question": "List all document type codes and document type names.",
          "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids, names, and descriptions for all documents?",
      "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "generated_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6434590816497803,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names, classes, and dates for all races?",
          "query": "SELECT name ,  CLASS ,  date FROM race"
        },
        {
          "question": "What are the account ids, customer ids, and account names for all the accounts?",
          "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
        },
        {
          "question": "What are the names and distances for all airplanes?",
          "query": "SELECT name ,  distance FROM Aircraft"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document name and template id for document with description with the letter 'w' in it?",
      "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "generated_sql": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7674474716186523,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and distance for aircraft with id 12?",
          "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
        },
        {
          "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
          "query": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
        },
        {
          "question": "What is the type of the document whose description starts with the word 'Initial'?",
          "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the names and template ids for documents that contain the letter w in their description.",
      "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "generated_sql": "SELECT Document_Name, Template_ID \nFROM Documents \nWHERE Document_Description LIKE '%w%'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7972214221954346,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
          "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
        },
        {
          "question": "Return the names and ids of customers who have TN in their address.",
          "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
        },
        {
          "question": "Return the full names and salaries for employees with first names that end with the letter m.",
          "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
      "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "generated_sql": "SELECT Document_ID, Template_ID, Document_Description \nFROM Documents \nWHERE Document_Name = \"Robbin CV\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7808887958526611,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type description for document type named Film?",
          "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""
        },
        {
          "question": "What is the name and description for document type code RV?",
          "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
        },
        {
          "question": "What is the type of the document named \"David CV\"?",
          "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
      "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "generated_sql": "SELECT t1.Document_ID, t1.Template_ID, t1.Document_Description \nFROM Documents AS t1 \nWHERE t1.Document_Name = \"Robbin CV\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7735927104949951,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the color code and description for the product with the name 'chervil'.",
          "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
        },
        {
          "question": "What is the name and description for document type code RV?",
          "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
        },
        {
          "question": "Return the description of the document type name 'Film'.",
          "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many different templates do all document use?",
      "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
      "generated_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8420932292938232,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different statuses do cities have?",
          "query": "SELECT count(DISTINCT Status) FROM city"
        },
        {
          "question": "How many different levels do members have?",
          "query": "SELECT count(DISTINCT LEVEL) FROM member"
        },
        {
          "question": "How many different cities do people originate from?",
          "query": "SELECT count(DISTINCT city) FROM Person"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of different templates used for documents.",
      "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
      "generated_sql": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Documents D \nJOIN Templates T ON D.Template_ID = T.Template_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7696919441223145,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of documents.",
          "query": "SELECT count(*) FROM Documents"
        },
        {
          "question": "Count the number of different statuses.",
          "query": "SELECT count(DISTINCT Status) FROM city"
        },
        {
          "question": "Count the number of different parties.",
          "query": "SELECT count(DISTINCT party_name) FROM party"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many documents are using the template with type code 'PPT'?",
      "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents \nJOIN Templates \nON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types \nON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'PPT'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8287804126739502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many documents are with document type code BK for each product id?",
          "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id"
        },
        {
          "question": "How many professors are in the accounting dept?",
          "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""
        },
        {
          "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
          "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of documents that use the PPT template type.",
      "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'PPT'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8658170700073242,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of documents that do not have expenses.",
          "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
        },
        {
          "question": "Count the number of tracks that are part of the rock genre.",
          "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""
        },
        {
          "question": "Count the number of cities in Australia.",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template ids and number of documents using each template.",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "generated_sql": "SELECT Template_ID, COUNT(*) \nFROM Documents \nGROUP BY Template_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7629222869873047,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show project ids and the number of documents in each project.",
          "query": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id"
        },
        {
          "question": "Show all customer ids and the number of accounts for each customer.",
          "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id"
        },
        {
          "question": "Show the employee ids and the number of documents destroyed by each employee.",
          "query": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are all different template ids used for documents, and how many times were each of them used?",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "generated_sql": "SELECT Template_ID, COUNT(*) \nFROM Documents \nGROUP BY Template_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6935522556304932,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
        },
        {
          "question": "For each type of store, how many of them are there?",
          "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE"
        },
        {
          "question": "What are the different transaction types, and how many transactions of each have taken place?",
          "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the id and type code for the template used by the most documents?",
      "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_ID, T2.Template_Type_Code \nFROM Templates AS T1 \nJOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_ID \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9135236740112305,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the payment method code used by the most orders?",
          "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
          "query": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the type and id of the organization that has the most research staff?",
          "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id and type code of the template that is used for the greatest number of documents.",
      "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_ID, T1.Template_Type_Code \nFROM Templates AS T1 \nJOIN Documents AS T2 \nON T1.Template_ID = T2.Template_ID \nGROUP BY T1.Template_ID, T1.Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9814064502716064,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the code of the card type that is most common.",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
          "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the party email that has used party services the greatest number of times.",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show ids for all templates that are used by more than one document.",
      "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "generated_sql": "SELECT Template_ID \nFROM Documents \nGROUP BY Template_ID \nHAVING COUNT(*) > 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7764022350311279,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find all the policy types that are used by more than 2 customers.",
          "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
        },
        {
          "question": "Show publishers that have more than one publication.",
          "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the denomination shared by more than one school.",
          "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the template ids of any templates used in more than a single document?",
      "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "generated_sql": "SELECT Template_ID \nFROM Documents \nGROUP BY Template_ID \nHAVING COUNT(*) > 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8059945106506348,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the carriers of devices that are in stock in more than a single shop?",
          "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1"
        },
        {
          "question": "What are the students ids of students who have more than one allergy?",
          "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
        },
        {
          "question": "What are the titles of courses that are offered in more than one department?",
          "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show ids for all templates not used by any document.",
      "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids for templates that are not used in any documents?",
      "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many templates do we have?",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT count(*) FROM Templates",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7259187698364258,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        },
        {
          "question": "How many employees do we have?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "How many flights do we have?",
          "query": "SELECT count(*) FROM Flight"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates.",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT COUNT(*) FROM Templates",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6841444969177246,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show template ids, version numbers, and template type codes for all templates.",
      "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "generated_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.777747392654419,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show ids, first names, last names, and phones for all customers.",
          "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers"
        },
        {
          "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
          "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"
        },
        {
          "question": "Show name and distance for all aircrafts.",
          "query": "SELECT name ,  distance FROM Aircraft"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids, version numbers, and type codes for each template?",
      "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "generated_sql": "SELECT Template_ID, Version_Number, Template_Type_Code \nFROM Templates",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6532654762268066,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the type codes and descriptions of each budget type?",
          "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
        },
        {
          "question": "What are all the document type codes and document type names?",
          "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
        },
        {
          "question": "What are the names and type codes of products?",
          "query": "SELECT Product_Name ,  Product_Type_Code FROM Products"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all distinct template type codes for all templates.",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "generated_sql": "SELECT DISTINCT Template_Type_Code FROM Templates",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8478965759277344,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all distinct publishers for books.",
          "query": "SELECT DISTINCT publisher FROM book_club"
        },
        {
          "question": "Show all the distinct districts for elections.",
          "query": "SELECT DISTINCT District FROM election"
        },
        {
          "question": "What are the distinct address type codes for all customer addresses?",
          "query": "SELECT DISTINCT address_type_code FROM customer_addresses"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes?",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "generated_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6737139225006104,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different card type codes?",
          "query": "SELECT DISTINCT card_type_code FROM Customers_Cards"
        },
        {
          "question": "What are the different majors?",
          "query": "SELECT DISTINCT Major FROM Student"
        },
        {
          "question": "What are the number of different course codes?",
          "query": "SELECT count(DISTINCT crs_code) FROM CLASS"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of templates with template type code PP or PPT?",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "generated_sql": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8036139011383057,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids of documents with the type code CV that do not have expenses.",
          "query": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"
        },
        {
          "question": "What are the names and ids of documents that have the type code BK?",
          "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""
        },
        {
          "question": "What are the different locations of the school with the code BUS?",
          "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the ids of templates that have the code PP or PPT.",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "generated_sql": "SELECT Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.786332368850708,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the ids of documents that do not have expenses.",
          "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"
        },
        {
          "question": "What are the ids of the candidates that have an outcome code of Pass?",
          "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
        },
        {
          "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
          "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many templates have template type code CV?",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = \"CV\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7460510730743408,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many allergies have type animal?",
          "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
        },
        {
          "question": "How many documents have document type code CV or BK?",
          "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\""
        },
        {
          "question": "How many addresses have zip code 197?",
          "query": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates of the type CV.",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7973110675811768,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of customer cards of the type Debit.",
          "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\""
        },
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the version number and template type code for the template with version number later than 5?",
      "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "generated_sql": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7580335140228271,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
          "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\""
        },
        {
          "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
          "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
        },
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
      "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "generated_sql": "SELECT Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9167537689208984,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show different type codes of products and the number of products with each type code.",
          "query": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code"
        },
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        },
        {
          "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
          "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and number of templates for each.",
      "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "generated_sql": "SELECT Template_Type_Code, count(*) \nFROM Templates \nGROUP BY Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7820215225219727,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the card type codes and the number of transactions.",
          "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
        },
        {
          "question": "Show all card type codes and the number of cards in each type.",
          "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"
        },
        {
          "question": "Show all payment method codes and the number of orders for each code.",
          "query": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes, and how many templates correspond to each?",
      "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "generated_sql": "SELECT Template_Type_Code, count(*) \nFROM Templates \nGROUP BY Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7431070804595947,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different classes of races, and how many races correspond to each?",
          "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"
        },
        {
          "question": "What are the different budget type codes, and how many documents are there for each?",
          "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
        },
        {
          "question": "What are the different card type codes, and how many different customers hold each type?",
          "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code has most number of templates?",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7391672134399414,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which allergy type has most number of allergies?",
          "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which game type has most number of games?",
          "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which origin has most number of flights?",
          "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the type code of the template type that the most templates belong to.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7490510940551758,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the code of the card type that is most common.",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the code of the document type that is most common.",
          "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the code of the city that has the most students.",
          "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes with less than three templates.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nHAVING count(*) < 3",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7637412548065186,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all allergies with type food.",
          "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
        },
        {
          "question": "Show card type codes with at least 5 cards.",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
        },
        {
          "question": "Show all role codes with at least 3 employees.",
          "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the codes of template types that have fewer than 3 templates?",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nHAVING COUNT(*) < 3",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7938559055328369,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the codes of card types that have 5 or more cards?",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
        },
        {
          "question": "What are the payment method codes that have been used by more than 3 parties?",
          "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3"
        },
        {
          "question": "What are the types of competition that have most 5 competitions for that type?",
          "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What the smallest version number and its template type code?",
      "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "generated_sql": "SELECT MIN(Version_Number), Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8918981552124023,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of records of each policy type and its type code.",
          "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
        },
        {
          "question": "Show the transaction type and the number of transactions.",
          "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
        },
        {
          "question": "What is the largest and smallest customer codes?",
          "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the lowest version number, along with its corresponding template type code.",
      "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "generated_sql": "SELECT Template_Type_Code, MIN(Version_Number) \nFROM Templates \nGROUP BY Template_Type_Code;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7733414173126221,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the type of transaction with the highest total amount.",
          "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1"
        },
        {
          "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
          "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"
        },
        {
          "question": "Find the number of records of each policy type and its type code.",
          "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code of the template used by document with the name \"Data base\"?",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "generated_sql": "SELECT T2.Template_Type_Code \nFROM Documents AS T1 \nJOIN Templates AS T2 \nON T1.Template_ID = T2.Template_ID \nWHERE T1.Document_Name = \"Data base\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9436216354370117,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type code with most number of documents?",
          "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the location name of the document \"Robin CV\"?",
          "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""
        },
        {
          "question": "What is the document type name for the document with name \"How to read a book\"?",
          "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type code of the template that is used by a document named Data base.",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "generated_sql": "SELECT T2.Template_Type_Code \nFROM Documents AS T1 \nJOIN Templates AS T2 \nON T1.Template_ID = T2.Template_ID \nWHERE T1.Document_Name = \"Data base\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9256038665771484,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the code of the document type that is most common.",
          "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the document type name of the document named \"How to read a book\".",
          "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\""
        },
        {
          "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
          "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document names using templates with template type code BK.",
      "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "generated_sql": "SELECT T2.Document_Name \nFROM Templates AS T1 \nJOIN Documents AS T2 \nON T1.Template_ID = T2.Template_ID \nWHERE T1.Template_Type_Code = \"BK\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9034268856048584,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find names and ids of all documents with document type code BK.",
          "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""
        },
        {
          "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
          "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""
        },
        {
          "question": "Show all company names with a movie directed in year 1999.",
          "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the names of documents that use templates with the code BK?",
      "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "generated_sql": "SELECT T2.Document_Name \nFROM Templates AS T1 \nJOIN Documents AS T2 \nON T1.Template_ID = T2.Template_ID \nWHERE T1.Template_Type_Code = \"BK\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.855928897857666,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and ids of documents that have the type code BK?",
          "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""
        },
        {
          "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
          "query": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""
        },
        {
          "question": "What are the names of the storms that affected Denmark?",
          "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and the number of documents using each type.",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "generated_sql": "SELECT T2.Template_Type_Code, COUNT(*) \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nGROUP BY T2.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1805927753448486,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show budget type codes and the number of documents in each budget type.",
          "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
        },
        {
          "question": "Show the type of school and the number of buses for each type.",
          "query": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type"
        },
        {
          "question": "Show the card type codes and the number of transactions.",
          "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes, and how many documents use each type?",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "generated_sql": "SELECT T2.Template_Type_Code, COUNT(*) \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T2.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8068530559539795,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different card type codes, and how many different customers hold each type?",
          "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
        },
        {
          "question": "What are the names of different tracks, and how many races has each had?",
          "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
        },
        {
          "question": "What are all the different product names, and how many complains has each received?",
          "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code is used by most number of documents?",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Template_Type_Code \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nGROUP BY T2.Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1167571544647217,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type code with most number of documents?",
          "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which is the email of the party that has used the services the most number of times?",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
          "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the code of the template type that is most commonly used in documents.",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3970575332641602,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the code of the card type that is most common.",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the description and code of the type of service that is performed the most often?",
          "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Find the description and code of the service type that is performed the most times.",
          "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes that are not used by any document.",
      "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the codes of template types that are not used for any document?",
      "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and descriptions.",
      "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "generated_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9118695259094238,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all budget type codes and descriptions.",
          "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
        },
        {
          "question": "List all document type codes and document type names.",
          "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
        },
        {
          "question": "Show all document type codes, document type names, document type descriptions.",
          "query": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the type codes and descriptions for all template types?",
      "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "generated_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8540430068969727,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are all the document type codes and document type names?",
          "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
        },
        {
          "question": "What are the distinct address type codes for all customer addresses?",
          "query": "SELECT DISTINCT address_type_code FROM customer_addresses"
        },
        {
          "question": "What are the type codes and descriptions of each budget type?",
          "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type descriptions for template type code \"AD\".",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "generated_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.904799222946167,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type code for document type \"Paper\"?",
          "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\""
        },
        {
          "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
          "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\""
        },
        {
          "question": "What is the description for the budget type with code ORG?",
          "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type description of the template type with the code AD.",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "generated_sql": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = \"AD\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9336163997650146,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the description of transaction type with code \"PUR\".",
          "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\""
        },
        {
          "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
          "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
        },
        {
          "question": "Return the description of the budget type that has the code ORG.",
          "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code for template type description \"Book\".",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "generated_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9825701713562012,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
          "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\""
        },
        {
          "question": "What is the description for the budget type with code ORG?",
          "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""
        },
        {
          "question": "What is the document type code for document type \"Paper\"?",
          "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the type code of the template type with the description \"Book\".",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "generated_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1613433361053467,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the description of transaction type with code \"PUR\".",
          "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\""
        },
        {
          "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
          "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
        },
        {
          "question": "Return the description of the budget type that has the code ORG.",
          "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the distinct template type descriptions for the templates ever used by any document?",
      "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "generated_sql": "SELECT DISTINCT t1.Template_Type_Description \nFROM Ref_Template_Types AS t1 \nJOIN Templates AS t2 \nON t1.Template_Type_Code = t2.Template_Type_Code \nWHERE t2.Template_ID IN (SELECT Template_ID FROM Documents)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7686853408813477,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the descriptions for the aircrafts?",
          "query": "SELECT Description FROM aircraft"
        },
        {
          "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
          "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
        },
        {
          "question": "What are the names, details and data types of the characteristics which are never used by any product?",
          "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the different descriptions for templates that have been used in a document.",
      "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "generated_sql": "SELECT DISTINCT T1.Template_Details \nFROM Templates AS T1 \nJOIN Documents AS T2 \nON T1.Template_ID = T2.Template_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7947690486907959,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
          "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
        },
        {
          "question": "Return the completion date for all the tests that have \"Fail\" result.",
          "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""
        },
        {
          "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
          "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the template ids with template type description \"Presentation\".",
      "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 \nON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T2.Template_Type_Description = \"Presentation\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8259575366973877,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
          "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\""
        },
        {
          "question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
          "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\""
        },
        {
          "question": "What are the ids of documents with letter 's' in the name with any expense budgets.",
          "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the ids corresponding to templates with the description 'Presentation'.",
      "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "generated_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7571313381195068,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the job ids corresponding to jobs with average salary above 8000?",
          "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
        },
        {
          "question": "Return the color code and description for the product with the name 'chervil'.",
          "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""
        },
        {
          "question": "Return the staff ids and genders for any staff with the title Department Manager.",
          "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many paragraphs in total?",
      "gold_sql": "SELECT count(*) FROM Paragraphs",
      "generated_sql": "SELECT count(*) FROM Paragraphs;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6914782524108887,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many colleges in total?",
          "query": "SELECT count(*) FROM College"
        },
        {
          "question": "How many vehicle in total?",
          "query": "SELECT count(*) FROM Vehicles;"
        },
        {
          "question": "How many staff in total?",
          "query": "SELECT count(*) FROM Staff;"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of paragraphs.",
      "gold_sql": "SELECT count(*) FROM Paragraphs",
      "generated_sql": "SELECT COUNT(*) FROM Paragraphs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6536562442779541,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many paragraphs for the document with name 'Summer Show'?",
      "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "generated_sql": "SELECT COUNT(*) \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID \n                      FROM Documents \n                      WHERE Document_Name = 'Summer Show');",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7474799156188965,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many draft copies does the document with id 2 have?",
          "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"
        },
        {
          "question": "How many instrument does the musician with last name \"Heilo\" use?",
          "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
        },
        {
          "question": "How many lessons did the customer with the first name Ray take?",
          "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of paragraphs in the document named 'Summer Show'.",
      "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "generated_sql": "SELECT COUNT(*) \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Summer Show'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9269530773162842,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of cities in Australia.",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "Count the number of characteristics of the product named 'laurel'.",
          "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show paragraph details for paragraph with text 'Korea ' .",
      "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
      "generated_sql": "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7963716983795166,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show other account details for account with name 338.",
          "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""
        },
        {
          "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
          "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"
        },
        {
          "question": "Return the full names and salaries for employees with first names that end with the letter m.",
          "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
      "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
      "generated_sql": "SELECT Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8812508583068848,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and details for each project?",
          "query": "SELECT project_id ,  project_details FROM Projects"
        },
        {
          "question": "What are the resident details containing the substring 'Miss'?",
          "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'"
        },
        {
          "question": "What are the names of enzymes that include the string 'ALA'?",
          "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
      "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "generated_sql": "SELECT T2.Paragraph_ID, T2.Paragraph_Text \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T1.Document_Name = 'Welcome to NY'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8171474933624268,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name and location for all tracks.",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
          "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"
        },
        {
          "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
          "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
      "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "generated_sql": "SELECT T1.Paragraph_ID, T1.Paragraph_Text \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Welcome to NY'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8770163059234619,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and details of all accounts?",
          "query": "SELECT account_id ,  account_details FROM Accounts"
        },
        {
          "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
          "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"
        },
        {
          "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
          "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all paragraph texts for the document \"Customer reviews\".",
      "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "generated_sql": "SELECT T2.Paragraph_Text \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T1.Document_Name = \"Customer reviews\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9286553859710693,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all the distinct districts for elections.",
          "query": "SELECT DISTINCT District FROM election"
        },
        {
          "question": "Show the location name for document \"Robin CV\".",
          "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""
        },
        {
          "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
          "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
      "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "generated_sql": "SELECT T2.Paragraph_Text \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nWHERE T1.Document_Name = 'Customer reviews'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8622443675994873,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the other account details for the account with the name 338?",
          "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""
        },
        {
          "question": "What is the document type name for the document with name \"How to read a book\"?",
          "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\""
        },
        {
          "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
          "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "generated_sql": "SELECT Document_ID, COUNT(*) \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8881304264068604,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the order ids and the number of items in each order.",
          "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"
        },
        {
          "question": "Show all locations and the number of gas stations in each location ordered by the count.",
          "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
        },
        {
          "question": "List all countries and their number of airlines in the descending order of number of airlines.",
          "query": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "generated_sql": "SELECT Document_ID, COUNT(*) \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7611467838287354,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show different locations of railways along with the corresponding number of railways at each location.",
          "query": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION"
        },
        {
          "question": "Please show the different statuses, ordered by the number of cities that have each.",
          "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
        },
        {
          "question": "Return the different statuses of cities, ascending by frequency.",
          "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids, names and the number of paragraphs in each document.",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "generated_sql": "SELECT T1.Document_ID, T1.Document_Name, COUNT(*) \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8132126331329346,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all party names and the number of members in each party.",
          "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
        },
        {
          "question": "Show all the activity names and the number of faculty involved in each activity.",
          "query": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
        },
        {
          "question": "Show all artist names and the number of exhibitions for each artist.",
          "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "generated_sql": "SELECT T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) \nFROM Documents AS T1 \nLEFT JOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0140588283538818,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names and ids of each account, as well as the number of transactions.",
          "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"
        },
        {
          "question": "What are the names and ids of the different categories, and how many films are in each?",
          "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
        },
        {
          "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
          "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "List all document ids with at least two paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8401491641998291,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the race class with at least two races.",
          "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
        },
        {
          "question": "Show all student IDs who have at least two allergies.",
          "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
        },
        {
          "question": "List all open years when at least two shops are opened.",
          "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of documents that have 2 or more paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING count(*) >= 2",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8166179656982422,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are project ids of projects that have 2 or more corresponding documents?",
          "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the codes of card types that have 5 or more cards?",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"
        },
        {
          "question": "What are the classes of races that have two or more corresponding races?",
          "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id and name with greatest number of paragraphs?",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID, T1.Document_Name \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8809256553649902,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the artist with the greatest number of albums?",
          "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the document with the most number of sections?",
          "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the customer first, last name and id with least number of accounts.",
          "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id and name of the document with the most paragraphs.",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID, T1.Document_Name \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9368479251861572,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the id and full name of the customer with the most accounts.",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the name of the party with the most members.",
          "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the student ID and login name of the student with the most course enrollments",
          "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id with least number of paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY count(*) ASC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7920260429382324,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the structure of the document with the least number of accesses?",
          "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id of the department with the least number of staff?",
          "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "What is the id of the project with least number of documents?",
          "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id of the document with the fewest paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY count(*) ASC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7344565391540527,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the id of the department with the fewest staff assignments.",
          "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "Return the id of the store with the most customers.",
          "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the id of the project that has the fewest corresponding documents.",
          "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id with 1 to 2 paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "generated_sql": "SELECT Document_ID \nFROM Paragraphs \nGROUP BY Document_ID \nHAVING COUNT(*) BETWEEN 1 AND 2;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7170860767364502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document status description of the document with id 1?",
          "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;"
        },
        {
          "question": "What is the team with at least 2 technicians?",
          "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What is the id of the product that is booked for 3 times?",
          "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Give the ids of documents that have between one and two paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 \nON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID) BETWEEN 1 AND 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9641423225402832,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
          "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"
        },
        {
          "question": "Give the classes that have more than two captains.",
          "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2"
        },
        {
          "question": "Show the types of schools that have two schools.",
          "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2"
        }
      ]
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
      "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
      "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "course_teach",
      "question": "How many teachers are there?",
      "gold_sql": "SELECT count(*) FROM teacher",
      "generated_sql": "SELECT COUNT(*) FROM teacher",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6349654197692871,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What is the total count of teachers?",
      "gold_sql": "SELECT count(*) FROM teacher",
      "generated_sql": "SELECT COUNT(*) FROM teacher",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6896936893463135,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total count of enzymes?",
          "query": "SELECT count(*) FROM enzyme"
        },
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the total number of companies?",
          "query": "SELECT count(*) FROM company"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "List the names of teachers in ascending order of age.",
      "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "generated_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.741262674331665,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of editors in ascending order of age.",
          "query": "SELECT Name FROM editor ORDER BY Age ASC"
        },
        {
          "question": "List the names of technicians in ascending order of age.",
          "query": "SELECT Name FROM technician ORDER BY Age ASC"
        },
        {
          "question": "List the names of players in ascending order of votes.",
          "query": "SELECT Player_name FROM player ORDER BY Votes ASC"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers ordered by ascending age?",
      "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "generated_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.764204740524292,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the technicians by ascending order of age?",
          "query": "SELECT Name FROM technician ORDER BY Age ASC"
        },
        {
          "question": "what are the names of the ships ordered by ascending tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage ASC"
        },
        {
          "question": "What are the names of the climbers, ordered by points descending?",
          "query": "SELECT Name FROM climber ORDER BY Points DESC"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the age and hometown of teachers?",
      "gold_sql": "SELECT Age ,  Hometown FROM teacher",
      "generated_sql": "SELECT Age, Hometown FROM teacher",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8306035995483398,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first name and last name of all the teachers?",
          "query": "SELECT DISTINCT firstname ,  lastname FROM teachers"
        },
        {
          "question": "What are the title and issues of the books?",
          "query": "SELECT Title ,  Issues FROM book"
        },
        {
          "question": "What are the characters and duration of actors?",
          "query": "SELECT Character ,  Duration FROM actor"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What is the age and hometown of every teacher?",
      "gold_sql": "SELECT Age ,  Hometown FROM teacher",
      "generated_sql": "SELECT Age, Hometown FROM teacher",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6402604579925537,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and age of every male? Order the results by age.",
          "query": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
        },
        {
          "question": "What is the age of the tallest person?",
          "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
        },
        {
          "question": "What is the average age of all gymnasts?",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
      "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
      "generated_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7809417247772217,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of actors whose age is not 20.",
          "query": "SELECT Name FROM actor WHERE Age != 20"
        },
        {
          "question": "List the name of technicians whose team is not \"NYY\".",
          "query": "SELECT Name FROM technician WHERE Team != \"NYY\""
        },
        {
          "question": "List the name of ships whose nationality is not \"United States\".",
          "query": "SELECT Name FROM ship WHERE Nationality != \"United States\""
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
      "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
      "generated_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9255156517028809,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
        },
        {
          "question": "What are the names of enzymes whose product is not 'Heme'?",
          "query": "SELECT name FROM enzyme WHERE product != 'Heme'"
        },
        {
          "question": "What are the names of representatives whose party is not \"Republican\"?",
          "query": "SELECT Name FROM Representative WHERE Party != \"Republican\""
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show the name of teachers aged either 32 or 33?",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "generated_sql": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7441375255584717,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of technicians aged either 36 or 37",
          "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
        },
        {
          "question": "Show the names of people aged either 35 or 36.",
          "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36"
        },
        {
          "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
          "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who are aged either 32 or 33?",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "generated_sql": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7766742706298828,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the technicians aged either 36 or 37?",
          "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
        },
        {
          "question": "What are the names of the ships  that are from either the US or the UK?",
          "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
        },
        {
          "question": "What are the names of instructors who didn't teach?",
          "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What is the hometown of the youngest teacher?",
      "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "generated_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9178760051727295,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the youngest editor?",
          "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
        },
        {
          "question": "What is the party of the youngest people?",
          "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
        },
        {
          "question": "What is the name of the youngest captain?",
          "query": "SELECT name FROM captain ORDER BY age LIMIT 1"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Where is the youngest teacher from?",
      "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "generated_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7072527408599854,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Where is the history department?",
          "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'"
        },
        {
          "question": "What is the name of the youngest editor?",
          "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
        },
        {
          "question": "What is the party of the youngest people?",
          "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show different hometown of teachers and the number of teachers from each hometown.",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9080910682678223,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show different teams in eliminations and the number of eliminations from each team.",
          "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
        },
        {
          "question": "Show the different nationalities and the number of journalists of each nationality.",
          "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"
        },
        {
          "question": "Show different types of ships and the number of ships of each type.",
          "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "For each hometown, how many teachers are there?",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT Hometown, COUNT(*) \nFROM teacher \nGROUP BY Hometown",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0168464183807373,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each team, how many technicians are there?",
          "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"
        },
        {
          "question": "For each type, how many ships are there?",
          "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE"
        },
        {
          "question": "For each nationality, how many different constructors are there?",
          "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "List the most common hometown of teachers.",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6886520385742188,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the most common result of the musicals.",
          "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "List the most common type of competition.",
          "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "List the most common type of artworks.",
          "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What is the most commmon hometowns for teachers?",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7414767742156982,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the most common role for the staff?",
          "query": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most used instrument?",
          "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common participant type?",
          "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show the hometowns shared by at least two teachers.",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8171472549438477,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the hometowns that are shared by at least two gymnasts?",
          "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the birth places that are shared by at least two people?",
          "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show the locations that have at least two performances.",
          "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the towns from which at least two teachers come from?",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8179237842559814,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the opening years in which at least two shops opened?",
          "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"
        },
        {
          "question": "What are the countries that have at least two perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the birth places that are shared by at least two people?",
          "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the courses they are arranged to teach.",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "generated_sql": "SELECT T2.Name, T1.Course \nFROM course AS T1 \nJOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID \nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8755459785461426,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show names of technicians and the number of machines they are assigned to repair.",
          "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
        },
        {
          "question": "Show the names of phones and the districts of markets they are on.",
          "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
        },
        {
          "question": "Show the names of products and the number of events they are in.",
          "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What is the name of each teacher and what course they teach?",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "generated_sql": "SELECT T2.Name, T1.Course \nFROM course AS T1 \nJOIN course_arrange AS T3 \nON T1.Course_ID = T3.Course_ID \nJOIN teacher AS T2 \nON T3.Teacher_ID = T2.Teacher_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8404173851013184,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of each course and the corresponding number of student enrollment?",
          "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
        },
        {
          "question": "What is the location and name of the winning aircraft?",
          "query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft"
        },
        {
          "question": "What is the name of the course with the most registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "generated_sql": "SELECT T2.Name, T1.Course \nFROM course AS T1 \nJOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID \nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID \nORDER BY T2.Name ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0162169933319092,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and location of the shops in ascending alphabetical order of name.",
          "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC"
        },
        {
          "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
          "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC"
        },
        {
          "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
          "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "generated_sql": "SELECT T2.Name, T1.Course \nFROM course AS T1 \nJOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID \nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID \nORDER BY T2.Name ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8633182048797607,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and location of the shops in ascending alphabetical order of name.",
          "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC"
        },
        {
          "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
          "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
        },
        {
          "question": "Show the names of journalists and the names of the events they reported in ascending order",
          "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show the name of the teacher for the math course.",
      "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "generated_sql": "SELECT T2.Name \nFROM course AS T1 \nJOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID \nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID \nWHERE T1.Course = \"Math\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8425228595733643,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name for regions not affected.",
          "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
        },
        {
          "question": "Show the location name for document \"Robin CV\".",
          "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""
        },
        {
          "question": "Show the names of employees with role name Editor.",
          "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the people who teach math courses?",
      "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "generated_sql": "SELECT DISTINCT T2.Name \nFROM course AS T1 \nJOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID \nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID \nWHERE T1.Course = 'Math'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8138659000396729,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of people who are not entrepreneurs?",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
        },
        {
          "question": "What are the names of students who have taken Statistics courses?",
          "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
        },
        {
          "question": "what are the last names of the teachers who teach grade 5?",
          "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the number of courses they teach.",
      "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "generated_sql": "SELECT T2.Name, COUNT(*) \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7584478855133057,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of pilots and the number of records they have.",
          "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
        },
        {
          "question": "Show the names of journalists and the number of events they reported.",
          "query": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"
        },
        {
          "question": "Show the names of companies and the number of employees they have",
          "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers and how many courses do they teach?",
      "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "generated_sql": "SELECT T2.Name, COUNT(*) \nFROM course_arrange AS T1 \nJOIN teacher AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8077969551086426,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
          "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
        },
        {
          "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
          "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
        },
        {
          "question": "What are the names of different tracks, and how many races has each had?",
          "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers that teach at least two courses.",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9523420333862305,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of counties that have at least two delegates.",
          "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show the names of products that are in at least two events.",
          "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show the names of editors that are on at least two journal committees.",
          "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who teach at least two courses?",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nJOIN course_arrange AS T2 \nON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Teacher_ID \nHAVING count(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7720293998718262,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what are the last names of the teachers who teach grade 5?",
          "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
        },
        {
          "question": "What are the names of parties with at least 2 events?",
          "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the ids and names of the architects who built at least 3 bridges ?",
          "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "List the names of teachers who have not been arranged to teach courses.",
      "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7612013816833496,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of technicians who have not been assigned to repair machines.",
          "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
        },
        {
          "question": "List the names of wrestlers that have not been eliminated.",
          "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
        },
        {
          "question": "List the names of journalists who have not reported any event.",
          "query": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)"
        }
      ]
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers whose courses have not been arranged?",
      "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.817164421081543,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of projects that have not been assigned?",
          "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
        },
        {
          "question": "What are the names of scientists who have not been assigned a project?",
          "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
        },
        {
          "question": "What are the names of the technicians that have not been assigned to repair machines?",
          "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "How many visitors below age 30 are there?",
      "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
      "generated_sql": "SELECT COUNT(*) FROM visitor WHERE Age < 30",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7456941604614258,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many churches opened before 1850 are there?",
          "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850"
        },
        {
          "question": "How many female people are older than 30 in our record?",
          "query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
      "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
      "generated_sql": "SELECT Name \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Level_of_membership DESC;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7585897445678711,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
          "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5"
        },
        {
          "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
          "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
        },
        {
          "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
          "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What is the average age of the visitors whose membership level is not higher than 4?",
      "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
      "generated_sql": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8683929443359375,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
          "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"
        },
        {
          "question": "Find the name of rooms whose price is higher than the average price.",
          "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
        },
        {
          "question": "What is the name and building of the departments whose budget is more than the average budget?",
          "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
      "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
      "generated_sql": "SELECT Name, Level_of_membership \nFROM visitor \nWHERE Level_of_membership > 4 \nORDER BY Age DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9064359664916992,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
          "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"
        },
        {
          "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
          "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
        },
        {
          "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
          "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "Find the id and name of the museum that has the most staff members?",
      "gold_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
      "generated_sql": "SELECT Museum_ID, Name \nFROM museum \nORDER BY Num_of_Staff DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8096601963043213,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the id and last name of the student that has the most behavior incidents?",
          "query": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the id and name of the most expensive base price room.",
          "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
        },
        {
          "question": "Find the branch name of the bank that has the most number of customers.",
          "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "Find the average number of staff working for the museums that were open before 2009.",
      "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
      "generated_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8167493343353271,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
          "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20"
        },
        {
          "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
          "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"
        },
        {
          "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
          "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What are the opening year and staff number of the museum named Plaza Museum?",
      "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
      "generated_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = \"Plaza Museum\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7402336597442627,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the average score and average staff number of all shops?",
          "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
        },
        {
          "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
          "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\""
        },
        {
          "question": "What are the staff roles of the staff who",
          "query": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
      "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
      "generated_sql": "SELECT Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.795051097869873,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of users who have more than one tweet.",
          "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of all players that got more than the average number of points?",
          "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"
        },
        {
          "question": "Find the number of people whose age is greater than all engineers.",
          "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "find the id, name and age for visitors who visited some museums more than once.",
      "gold_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.ID, T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 \nON T1.ID = T2.visitor_ID \nGROUP BY T1.ID \nHAVING count(T2.Museum_ID) > 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8704957962036133,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name and email for the users who have more than one follower.",
          "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"
        },
        {
          "question": "Find the name and partition id for users who tweeted less than twice.",
          "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
        },
        {
          "question": "Find the the customer details and id for the customers who had more than one policy.",
          "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
      "gold_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
      "generated_sql": "SELECT T1.ID, T1.Name, T1.Level_of_membership \nFROM visitor AS T1 \nJOIN visit AS T2 \nON T1.ID = T2.visitor_ID \nGROUP BY T1.ID \nORDER BY SUM(T2.Total_spent) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.098172903060913,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first and last name of the students who are not in the largest major?",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What are the student ID and login name of the student who are enrolled in the most courses?",
          "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
          "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What are the id and name of the museum visited most times?",
      "gold_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Museum_ID, T1.Name \nFROM museum AS T1 \nJOIN visit AS T2 \nON T1.Museum_ID = T2.Museum_ID \nGROUP BY T1.Museum_ID \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.765427827835083,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the id and name of the stadium where the most injury accidents happened?",
          "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What are the name and ID of the product bought the most.",
          "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"
        },
        {
          "question": "What are the name and id of the team with the most victories in 2008 postseason?",
          "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What is the name of the museum that had no visitor yet?",
      "gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
      "generated_sql": "SELECT Name \nFROM museum \nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7396032810211182,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the last name of the youngest student?",
          "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
        },
        {
          "question": "What is the name of the most recent movie?",
          "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "Find the name and age of the visitor who bought the most tickets at once.",
      "gold_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.Age \nFROM visitor AS T1 \nJOIN visit AS T2 \nON T1.ID = T2.visitor_ID \nORDER BY T2.Num_of_Ticket DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8188183307647705,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the customers who have at most two orders.",
          "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
        },
        {
          "question": "Find the name of the user who gives the most reviews.",
          "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name of the swimmer who has the most records.",
          "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What are the average and maximum number of tickets bought in all visits?",
      "gold_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
      "generated_sql": "SELECT avg(Num_of_Ticket) ,  max(Num_of_Ticket) FROM visit",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8885972499847412,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the maximum and minimum number of cities in all markets.",
          "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"
        },
        {
          "question": "what are the average and maximum attendances of all events?",
          "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event"
        },
        {
          "question": "What are the average score and average staff number of all shops?",
          "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What is the total ticket expense of the visitors whose membership level is 1?",
      "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
      "generated_sql": "SELECT SUM(T2.Total_spent) \nFROM visitor AS T1 \nJOIN visit AS T2 \nON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership = 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8103482723236084,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the total number of purchases for members with level 6?",
          "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
        },
        {
          "question": "What is the total amount of grant money for research?",
          "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
      "gold_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "museum_visit",
      "question": "Find the number of visitors who did not visit any museum opened after 2010.",
      "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
      "generated_sql": "SELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (\n  SELECT T2.visitor_ID \n  FROM museum AS T1 \n  JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID \n  WHERE T1.Open_Year > '2010'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9567291736602783,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of users who did not write any review.",
          "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
        },
        {
          "question": "Find the name of accounts whose checking balance is below the average checking balance.",
          "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
        },
        {
          "question": "Find the names of furnitures whose prices are lower than the highest price.",
          "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)"
        }
      ]
    },
    {
      "db_id": "museum_visit",
      "question": "How many museums were opened after 2013 or before 2008?",
      "gold_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
      "generated_sql": "SELECT COUNT(*) \nFROM museum \nWHERE Open_Year > 2013 OR Open_Year < 2008",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8184449672698975,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many movies were made before 2000?",
          "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000"
        },
        {
          "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
          "query": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'"
        },
        {
          "question": "How many churches opened before 1850 are there?",
          "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of players.",
      "gold_sql": "SELECT count(*) FROM players",
      "generated_sql": "SELECT COUNT(*) FROM players",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.917656421661377,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the total number of employees.",
          "query": "SELECT count(*) FROM employee"
        },
        {
          "question": "Find the total number of scientists.",
          "query": "SELECT count(*) FROM scientists"
        },
        {
          "question": "Find the total number of catalog contents.",
          "query": "SELECT count(*) FROM catalog_contents"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many players are there?",
      "gold_sql": "SELECT count(*) FROM players",
      "generated_sql": "SELECT COUNT(*) FROM players",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7112164497375488,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many players are there?",
          "query": "SELECT count(*) FROM player"
        },
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of matches.",
      "gold_sql": "SELECT count(*) FROM matches",
      "generated_sql": "SELECT COUNT(*) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7354867458343506,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the total number of employees.",
          "query": "SELECT count(*) FROM employee"
        },
        {
          "question": "Find the total number of scientists.",
          "query": "SELECT count(*) FROM scientists"
        },
        {
          "question": "Find the total number of catalog contents.",
          "query": "SELECT count(*) FROM catalog_contents"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Count the number of matches.",
      "gold_sql": "SELECT count(*) FROM matches",
      "generated_sql": "SELECT COUNT(*) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7875497341156006,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "List the first name and birth date of all players from the country with code USA.",
      "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "generated_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9208023548126221,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the first name and last name of all customers.",
          "query": "SELECT first_name ,  last_name FROM Customers;"
        },
        {
          "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
          "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob"
        },
        {
          "question": "Return the date of birth for all the guests with gender code \"Male\".",
          "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names and birth dates of players from the USA?",
      "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "generated_sql": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6911931037902832,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and players of all the clubs?",
          "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID"
        },
        {
          "question": "What are the names of artists who are Male and are from UK?",
          "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
        },
        {
          "question": "What are the names of players who train between 500 and 1500 hours?",
          "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the average age of losers and winners of all matches.",
      "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "generated_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age \nFROM matches",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9270987510681152,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average and maximum rating of all reviews.",
          "query": "SELECT avg(rating) ,  max(rating) FROM review"
        },
        {
          "question": "Find the maximum age of all the students.",
          "query": "SELECT max(Age) FROM STUDENT"
        },
        {
          "question": "Find the average age of female students.",
          "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\""
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the average ages of losers and winners across matches?",
      "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "generated_sql": "SELECT \n  'Losers' AS Category, \n  AVG(loser_age) AS Average_Age\nFROM \n  matches\nUNION ALL\nSELECT \n  'Winners' AS Category, \n  AVG(winner_age) AS Average_Age\nFROM \n  matches",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9805655479431152,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and ages of editors?",
          "query": "SELECT Name ,  Age FROM editor"
        },
        {
          "question": "What are the maximum and average height of the mountains?",
          "query": "SELECT max(height) ,  avg(height) FROM mountain"
        },
        {
          "question": "What are the statuses and average populations of each city?",
          "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the average rank of winners in all matches.",
      "gold_sql": "SELECT avg(winner_rank) FROM matches",
      "generated_sql": "SELECT AVG(winner_rank) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7277531623840332,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the highest rank of all reviews.",
          "query": "SELECT min(rank) FROM review"
        },
        {
          "question": "Find the average hours of all projects.",
          "query": "SELECT avg(hours) FROM projects"
        },
        {
          "question": "Find the average number of customers in all banks of Utah state.",
          "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the average rank for winners in all matches?",
      "gold_sql": "SELECT avg(winner_rank) FROM matches",
      "generated_sql": "SELECT AVG(winner_rank) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.746727705001831,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age for all people in the table?",
          "query": "SELECT avg(age) FROM Person"
        },
        {
          "question": "What is the average age for all person?",
          "query": "SELECT avg(age) FROM Person"
        },
        {
          "question": "What is the average age for all managers?",
          "query": "SELECT avg(Age) FROM manager"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the highest rank of losers in all matches.",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT MAX(loser_rank) FROM matches",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7222611904144287,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the highest rank of all reviews.",
          "query": "SELECT min(rank) FROM review"
        },
        {
          "question": "Find the number of tweets in record.",
          "query": "SELECT count(*) FROM tweets"
        },
        {
          "question": "Find the number of customers in total.",
          "query": "SELECT count(*) FROM customers"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the best rank of losers across all matches?",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT MIN(loser_rank) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7363438606262207,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum enrollment across all schools?",
          "query": "SELECT max(Enrollment) FROM university"
        },
        {
          "question": "What is the average weight of all players?",
          "query": "SELECT avg(weight) FROM Player"
        },
        {
          "question": "What is the average age of all gymnasts?",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "find the number of distinct country codes of all players.",
      "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
      "generated_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7012934684753418,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of distinct amenities.",
          "query": "SELECT count(*) FROM dorm_amenity"
        },
        {
          "question": "Find the number of distinct projects.",
          "query": "SELECT count(DISTINCT name) FROM projects"
        },
        {
          "question": "Find the distinct number of president votes.",
          "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many distinct countries do players come from?",
      "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
      "generated_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8845281600952148,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many distinct countries are the climbers from?",
          "query": "SELECT COUNT(DISTINCT Country) FROM climber"
        },
        {
          "question": "How many different cities do people originate from?",
          "query": "SELECT count(DISTINCT city) FROM Person"
        },
        {
          "question": "How many hours do the players train on average?",
          "query": "SELECT avg(HS) FROM Player"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of distinct name of losers.",
      "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
      "generated_sql": "SELECT COUNT(DISTINCT loser_name) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6663506031036377,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of distinct amenities.",
          "query": "SELECT count(*) FROM dorm_amenity"
        },
        {
          "question": "Find the number of distinct projects.",
          "query": "SELECT count(DISTINCT name) FROM projects"
        },
        {
          "question": "Find the distinct number of president votes.",
          "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many different loser names are there?",
      "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
      "generated_sql": "SELECT COUNT(DISTINCT loser_name) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7261307239532471,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different classes are there?",
          "query": "SELECT count(DISTINCT class_code) FROM CLASS"
        },
        {
          "question": "How many different departments are there?",
          "query": "SELECT count(DISTINCT dept_name) FROM department"
        },
        {
          "question": "how many different positions are there?",
          "query": "SELECT count(DISTINCT POSITION) FROM player"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the name of tourney that has more than 10 matches.",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "generated_sql": "SELECT tourney_name \nFROM matches \nGROUP BY tourney_name \nHAVING COUNT(*) > 10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8157494068145752,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the ships that have more than one captain.",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        },
        {
          "question": "List the name of the company that produced more than one phone model.",
          "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;"
        },
        {
          "question": "Find the title of the course that is offered by more than one department.",
          "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of tournaments that have more than 10 matches?",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "generated_sql": "SELECT tourney_name \nFROM matches \nGROUP BY tourney_name \nHAVING COUNT(tourney_name) > 10;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.796034574508667,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the albums that have more than 10 tracks?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
        },
        {
          "question": "What are the names of all colleges that have two or more players?",
          "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"
        },
        {
          "question": "What are the names of studios that have made two or more films?",
          "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "List the names of all winners who played in both 2013 and 2016.",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of players who won in both 2013 and 2016?",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "List the number of all matches who played in years of 2013 or 2016.",
      "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE year = 2013 OR year = 2016",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0110361576080322,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all headquarters and the number of companies in each headquarter.",
          "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"
        },
        {
          "question": "Count the number of patients who stayed in room 112.",
          "query": "SELECT count(patient) FROM stay WHERE room  =  112"
        },
        {
          "question": "Give the number of students living in either HKG or CHI.",
          "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many matches were played in 2013 or 2016?",
      "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE year = 2013 OR year = 2016;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0335724353790283,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many games were played in city Atlanta in 2000?",
          "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
        },
        {
          "question": "How many lessons were in cancelled state?",
          "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"
        },
        {
          "question": "How many students live in HKG or CHI?",
          "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the oldest player.",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "generated_sql": "SELECT first_name, country_code \nFROM players \nORDER BY birth_date \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8424112796783447,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first and last name of the oldest employee?",
          "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
        },
        {
          "question": "Find the name of the first 5 customers.",
          "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
        },
        {
          "question": "Show the name and the nationality of the oldest host.",
          "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name and country code of the oldest player?",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "generated_sql": "SELECT first_name, country_code \nFROM players \nORDER BY birth_date \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7971928119659424,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first and last name of the oldest employee?",
          "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
        },
        {
          "question": "What is the name of the oldest manager?",
          "query": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
        },
        {
          "question": "What is the name and category code of the product with the highest price?",
          "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.773052453994751,
      "error": null,
      "few_shot_examples": [
        {
          "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
          "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate"
        },
        {
          "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
          "query": "SELECT fname ,  lname FROM authors ORDER BY lname"
        },
        {
          "question": "List all the image name and URLs in the order of their names.",
          "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all players, sorted by birth date?",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.8481857776641846,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the full names of all students",
          "query": "SELECT Fname ,  Lname FROM Student"
        },
        {
          "question": "What are ids of the all distinct orders, sorted by placement date?",
          "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
        },
        {
          "question": "What are the names of captains, sorted by age descending?",
          "query": "SELECT name FROM captain ORDER BY age DESC"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name \nFROM players \nWHERE hand = 'L' \nORDER BY birth_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8389408588409424,
      "error": null,
      "few_shot_examples": [
        {
          "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
          "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate"
        },
        {
          "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
          "query": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"
        },
        {
          "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
          "query": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all left handed players, in order of birth date?",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8042731285095215,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the full names of all students",
          "query": "SELECT Fname ,  Lname FROM Student"
        },
        {
          "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
          "query": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"
        },
        {
          "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
          "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the player who did the most number of tours.",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code \nFROM players AS T1 \nJOIN rankings AS T2 \nON T1.player_id = T2.player_id \nGROUP BY T1.player_id \nORDER BY SUM(T2.tours) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.9398455619812012,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the id and first name of the student that has the most number of assessment notes?",
          "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the first name and last name of the student who have most number of sports?",
          "query": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the full name of employee who supported the most number of customers.",
          "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name and country code of the player with the most tours?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code \nFROM players AS T1 \nJOIN rankings AS T2 \nON T1.player_id = T2.player_id \nORDER BY T2.tours DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.4533905982971191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and country for the artist with most number of exhibitions?",
          "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the customer id, first and last name with most number of accounts.",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and address of the department with the most students?",
          "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the year that has the most number of matches.",
      "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7285010814666748,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the branch name of the bank that has the most number of customers.",
          "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
        },
        {
          "question": "Show the range that has the most number of mountains.",
          "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Find the state which has the most number of customers.",
          "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Which year had the most matches?",
      "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7931609153747559,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which year has the most degrees conferred?",
          "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
        },
        {
          "question": "Which year had the greatest number of courses?",
          "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which allergy is the most common?",
          "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank points of the winner who won the most times.",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.winner_rank_points \nFROM players AS T1 \nJOIN matches AS T2 ON T1.player_id = T2.winner_id \nGROUP BY T2.winner_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9181251525878906,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the user who gives the most reviews.",
          "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the count and code of the job has most employees.",
          "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
          "query": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name, COUNT(T2.winner_id) AS num_wins, T2.winner_rank_points \nFROM players AS T1 \nJOIN matches AS T2 ON T1.player_id = T2.winner_id \nGROUP BY T1.first_name, T1.last_name, T2.winner_rank_points \nORDER BY num_wins DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0448763370513916,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
          "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the customer id with most number of cards, and how many does he have?",
          "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common company type, and how many are there?",
          "query": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name \nFROM players AS T1 \nJOIN matches AS T2 \nON T1.player_id = T2.winner_id \nWHERE T2.tourney_name = 'Australian Open' \nORDER BY T2.winner_rank_points DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9897429943084717,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of customer who has the highest amount of loans.",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the student who has the highest total credits in the History department.",
          "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
        },
        {
          "question": "Find the name and age of all males in order of their age.",
          "query": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name \nFROM players AS T1 \nINNER JOIN matches AS T2 \nON T1.player_id = T2.winner_id \nWHERE T2.tourney_name = 'Australian Open' \nORDER BY T2.winner_rank_points DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9045968055725098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what is the name of the country that participated in the most tournament competitions?",
          "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id of the patient who stayed in room 111 most recently?",
          "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
        },
        {
          "question": "What is the name of the student who has the highest total credits in the History department.",
          "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
      "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "generated_sql": "SELECT T1.loser_name, T1.winner_name \nFROM matches AS T1 \nORDER BY T1.minutes DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.894341230392456,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.",
          "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
        },
        {
          "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
          "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Find the first names and last names of teachers in alphabetical order of last name.",
          "query": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of the winner and loser who played in the longest match?",
      "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "generated_sql": "SELECT T1.winner_name, T1.loser_name \nFROM matches AS T1 \nORDER BY T1.minutes DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8648552894592285,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and genders of staff who were assigned in 2016?",
          "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
        },
        {
          "question": "What are the names of the courses in alphabetical order?",
          "query": "SELECT course_name FROM courses ORDER BY course_name"
        },
        {
          "question": "What are the names of enzymes in descending order?",
          "query": "SELECT name FROM enzyme ORDER BY name DESC"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the average ranking for each player and their first name.",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT AVG(T2.ranking), T1.first_name \nFROM players AS T1 \nJOIN rankings AS T2 \nON T1.player_id = T2.player_id \nGROUP BY T1.first_name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.0389554500579834,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average and minimum weight for each gender.",
          "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
        },
        {
          "question": "Find the number of routes for each source airport and the airport name.",
          "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
        },
        {
          "question": "Find the total saving balance for each account name.",
          "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their average rankings?",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT T1.first_name, AVG(T2.ranking) \nFROM players AS T1 \nJOIN rankings AS T2 \nON T1.player_id = T2.player_id \nGROUP BY T1.first_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.1248655319213867,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names of all the candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        },
        {
          "question": "What are the first and last names of all customers with more than 2 payments?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
        },
        {
          "question": "What are the first and last names of all the employees and how many people report to them?",
          "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the total ranking points for each player and their first name.",
      "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT T1.first_name, SUM(T2.ranking_points) \nFROM players AS T1 \nJOIN rankings AS T2 \nON T1.player_id = T2.player_id \nGROUP BY T1.first_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.174095869064331,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the total saving balance for each account name.",
          "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
        },
        {
          "question": "Find the number of routes for each source airport and the airport name.",
          "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"
        },
        {
          "question": "Show all product names and the total quantity ordered for each product name.",
          "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their total ranking points?",
      "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT T1.first_name, SUM(T2.ranking_points) \nFROM players AS T1 \nJOIN rankings AS T2 \nON T1.player_id = T2.player_id \nGROUP BY T1.first_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.2831315994262695,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names of all the candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        },
        {
          "question": "What are the names of the different bank branches, and what are their total loan amounts?",
          "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
        },
        {
          "question": "What are the first and last names of all customers with more than 2 payments?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "find the number of players for each country.",
      "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "generated_sql": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7595725059509277,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of followers for each user.",
          "query": "SELECT count(*) FROM follows GROUP BY f1"
        },
        {
          "question": "Find the number of students for each department.",
          "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code"
        },
        {
          "question": "Find the number of phones for each accreditation type.",
          "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many players are from each country?",
      "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "generated_sql": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.868288516998291,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many players are from each country?",
          "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
        },
        {
          "question": "How many climbers are from each country?",
          "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
        },
        {
          "question": "how many airports are there in each country?",
          "query": "SELECT count(*) ,  country FROM airport GROUP BY country"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "find the code of the country where has the greatest number of players.",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT country_code \nFROM players \nGROUP BY country_code \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9485559463500977,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of albums.",
          "query": "SELECT count(*) FROM ALBUM"
        },
        {
          "question": "Find the state which has the most number of customers.",
          "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
        },
        {
          "question": "Find the code of the location with the largest number of documents.",
          "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the code of the country with the most players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.754887580871582,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the code of the city with the most students?",
          "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the location code with the most documents?",
          "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the card type code with most number of cards?",
          "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the codes of countries that have more than 50 players.",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "generated_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8040308952331543,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the ships that have more than one captain.",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        },
        {
          "question": "List the countries that have more than one mountain.",
          "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
        },
        {
          "question": "Give the codes of document types that have more than 2 corresponding documents.",
          "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the codes of countries with more than 50 players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "generated_sql": "SELECT country_code \nFROM players \nGROUP BY country_code \nHAVING COUNT(player_id) > 50",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.816277265548706,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the facility codes of the apartments with more than four bedrooms?",
          "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
        },
        {
          "question": "What are the attribute data types with more than 3 attribute definitions?",
          "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
        },
        {
          "question": "What are the codes of the locations with at least three documents?",
          "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of tours for each ranking date.",
      "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "generated_sql": "SELECT COUNT(*) ,  ranking_date \nFROM rankings \nGROUP BY ranking_date",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9824552536010742,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of followers for each user.",
          "query": "SELECT count(*) FROM follows GROUP BY f1"
        },
        {
          "question": "Find the number of students for each department.",
          "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code"
        },
        {
          "question": "Find the number of dorms and total capacity for each gender.",
          "query": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many total tours were there for each ranking date?",
      "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "generated_sql": "SELECT ranking_date, SUM(tours) \nFROM rankings \nGROUP BY ranking_date",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0275137424468994,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students are there for each major?",
          "query": "SELECT major ,  count(*) FROM Student GROUP BY major"
        },
        {
          "question": "How many songs were released for each format?",
          "query": "SELECT count(*) ,  formats FROM files GROUP BY formats"
        },
        {
          "question": "How many wines are there for each grape?",
          "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of matches happened in each year.",
      "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "generated_sql": "SELECT COUNT(*) , year FROM matches GROUP BY year",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7813193798065186,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of departments in each school.",
          "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
        },
        {
          "question": "Find the number of users in each role.",
          "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code"
        },
        {
          "question": "Find the number of students in each major.",
          "query": "SELECT count(*) ,  major FROM student GROUP BY major"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many matches were played in each year?",
      "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "generated_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8174855709075928,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many games were played in city Atlanta in 2000?",
          "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"
        },
        {
          "question": "How many players played each position?",
          "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"
        },
        {
          "question": "How many courses are provided in each semester and year?",
          "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank of the 3 youngest winners across all matches.",
      "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "generated_sql": "SELECT winner_name, winner_rank \nFROM matches \nORDER BY winner_age ASC \nLIMIT 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7314796447753906,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of all the cities and states.",
          "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
        },
        {
          "question": "Find the name of the youngest organization.",
          "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
        },
        {
          "question": "Find the name and id of the top 3 expensive rooms.",
          "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What are the names and ranks of the three youngest winners across all matches?",
      "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "generated_sql": "SELECT winner_name, winner_rank \nFROM matches \nORDER BY winner_age ASC \nLIMIT 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7157797813415527,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and locations of all tracks?",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
          "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"
        },
        {
          "question": "What are the names of all the customers in alphabetical order?",
          "query": "SELECT name FROM accounts ORDER BY name"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many different winners both participated in the WTA Championships and were left handed?",
      "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "generated_sql": "SELECT COUNT(DISTINCT m.winner_id) \nFROM matches m \nJOIN players p ON m.winner_id = p.player_id \nWHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9100830554962158,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different genders are there in the dorms?",
          "query": "SELECT count(DISTINCT gender) FROM dorm"
        },
        {
          "question": "How many females are in the network?",
          "query": "SELECT count(*) FROM Person WHERE gender  =  'female'"
        },
        {
          "question": "How many lessons were in cancelled state?",
          "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of left handed winners who participated in the WTA Championships.",
      "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7506937980651855,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of tweets in record.",
          "query": "SELECT count(*) FROM tweets"
        },
        {
          "question": "Find the number of students who have the word \"son\" in their personal names.",
          "query": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\""
        },
        {
          "question": "Count the number of patients who stayed in room 112.",
          "query": "SELECT count(patient) FROM stay WHERE room  =  112"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date \nFROM players AS T1 \nJOIN matches AS T2 \nON T1.player_id = T2.winner_id \nORDER BY T2.winner_rank_points DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1049399375915527,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name, city, and country of the airport that has the highest latitude.",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"
        },
        {
          "question": "Find the id and rank of the team that has the highest average attendance rate in 2014.",
          "query": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"
        },
        {
          "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.",
          "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date \nFROM players AS T1 \nJOIN matches AS T2 \nON T1.player_id = T2.winner_id \nGROUP BY T1.player_id \nORDER BY SUM(T2.winner_rank_points) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9156017303466797,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
          "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
          "query": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "What is the name and country for the artist with most number of exhibitions?",
          "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of players for each hand type.",
      "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "generated_sql": "SELECT hand, COUNT(*) FROM players GROUP BY hand",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7633521556854248,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of phones for each accreditation type.",
          "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
        },
        {
          "question": "Find the number of rooms for each bed type.",
          "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;"
        },
        {
          "question": "Find the number of followers for each user.",
          "query": "SELECT count(*) FROM follows GROUP BY f1"
        }
      ]
    },
    {
      "db_id": "wta_1",
      "question": "How many players are there for each hand type?",
      "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "generated_sql": "SELECT hand, COUNT(*) FROM players GROUP BY hand",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6760516166687012,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students are there for each major?",
          "query": "SELECT major ,  count(*) FROM Student GROUP BY major"
        },
        {
          "question": "How many documents are there of each type?",
          "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"
        },
        {
          "question": "How many wines are there for each grape?",
          "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "How many ships ended up being 'Captured'?",
      "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
      "generated_sql": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6889753341674805,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many ships are there?",
          "query": "SELECT count(*) FROM ship"
        },
        {
          "question": "How many architects are female?",
          "query": "SELECT count(*) FROM architect WHERE gender  =  'female'"
        },
        {
          "question": "How many allergies have type animal?",
          "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
      "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
      "generated_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6949601173400879,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of browsers in descending order by market share.",
          "query": "SELECT name FROM browser ORDER BY market_share DESC"
        },
        {
          "question": "List all the image name and URLs in the order of their names.",
          "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name"
        },
        {
          "question": "Show the name and service for all trains in order by time.",
          "query": "SELECT name ,  service FROM train ORDER BY TIME"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "List the name, date and result of each battle.",
      "gold_sql": "SELECT name ,  date FROM battle",
      "generated_sql": "SELECT name, date, result FROM battle",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6337144374847412,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name, origin and owner of each program.",
          "query": "SELECT name ,  origin ,  OWNER FROM program"
        },
        {
          "question": "What are the date and venue of each debate?",
          "query": "SELECT Date ,  Venue FROM debate"
        },
        {
          "question": "List the creation year, name and budget of each department.",
          "query": "SELECT creation ,  name ,  budget_in_billions FROM department"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What is maximum and minimum death toll caused each time?",
      "gold_sql": "SELECT max(killed) ,  min(killed) FROM death",
      "generated_sql": "SELECT max(killed) ,  min(killed) FROM death",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6472790241241455,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum and minimum height of all players?",
          "query": "SELECT max(weight) ,  min(weight) FROM Player"
        },
        {
          "question": "What is the maximum and minimum market value of companies?",
          "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company"
        },
        {
          "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
          "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What is the average number of injuries caused each time?",
      "gold_sql": "SELECT avg(injured) FROM death",
      "generated_sql": "SELECT AVG(injured) FROM death",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6378128528594971,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average number of bank customers?",
          "query": "SELECT avg(no_of_customers) FROM bank"
        },
        {
          "question": "What is the average number of bedrooms of all apartments?",
          "query": "SELECT avg(bedroom_count) FROM Apartments"
        },
        {
          "question": "What is the average number of attendees for performances?",
          "query": "SELECT avg(Attendance) FROM performance"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
      "gold_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
      "generated_sql": "SELECT T2.killed, T2.injured \nFROM ship AS T1 \nJOIN death AS T2 \nON T1.id = T2.caused_by_ship_id \nWHERE T1.tonnage = 't'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8078734874725342,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
          "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"
        },
        {
          "question": "What are all the instruments used by the musician with the last name \"Heilo\"?",
          "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
        },
        {
          "question": "What are the entry names of catalog with the attribute possessed by most entries.",
          "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
      "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
      "generated_sql": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8304986953735352,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first and last name of the students who are not in the largest major?",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What is the name of the technician whose team is not 'NYY'?",
          "query": "SELECT Name FROM technician WHERE Team != \"NYY\""
        },
        {
          "question": "What is the first and last name of all students who are younger than average?",
          "query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
      "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
      "generated_sql": "SELECT DISTINCT T1.id, T1.name \nFROM battle AS T1 \nJOIN ship AS T2 \nON T1.id = T2.lost_in_battle \nWHERE T2.ship_type = 'Brig'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7870852947235107,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and ids of documents that have the type code BK?",
          "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""
        },
        {
          "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
          "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
        },
        {
          "question": "What are the names of the storms that affected Denmark?",
          "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
      "gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
      "generated_sql": "SELECT T1.id, T1.name \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nJOIN death AS T3 ON T2.id = T3.caused_by_ship_id \nGROUP BY T1.id \nHAVING SUM(T3.killed) > 10",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8777608871459961,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and names of the companies that operated more than one flight?",
          "query": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
          "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
        },
        {
          "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
          "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What is the ship id and name that caused most total injuries?",
      "gold_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.id, T1.name \nFROM ship AS T1 \nJOIN death AS T2 \nON T1.id = T2.caused_by_ship_id \nGROUP BY T1.id \nORDER BY SUM(T2.injured) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8492832183837891,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
          "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the type and id of the organization that has the most research staff?",
          "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and city of the airport that the most routes end at?",
          "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
      "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
      "generated_sql": "SELECT DISTINCT name \nFROM battle \nWHERE bulgarian_commander = 'Kaloyan' \nAND latin_commander = 'Baldwin I'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7982170581817627,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
          "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"
        },
        {
          "question": "What are the names of races held between 2009 and 2011?",
          "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
        },
        {
          "question": "What are the names of all races held between 2009 and 2011?",
          "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "How many different results are there for the battles?",
      "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle",
      "generated_sql": "SELECT COUNT(DISTINCT result) FROM battle",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.673591136932373,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different professors are there for the different schools?",
          "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code"
        },
        {
          "question": "How many different software platforms are there for devices?",
          "query": "SELECT count(DISTINCT Software_Platform) FROM device"
        },
        {
          "question": "How many different genders are there in the dorms?",
          "query": "SELECT count(DISTINCT gender) FROM dorm"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "How many battles did not lose any ship with tonnage '225'?",
      "gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
      "generated_sql": "SELECT COUNT(*) \nFROM battle \nWHERE id NOT IN (\n  SELECT lost_in_battle \n  FROM ship \n  WHERE tonnage = '225'\n)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7157492637634277,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many events did not have any participants?",
          "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
        },
        {
          "question": "How many drivers did not race in 2009?",
          "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
        },
        {
          "question": "How many drivers did not participate in the races held in 2009?",
          "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
        }
      ]
    },
    {
      "db_id": "battle_death",
      "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
      "gold_sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "battle_death",
      "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
      "gold_sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "battle_death",
      "question": "What are the notes of the death events which has substring 'East'?",
      "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
      "generated_sql": "SELECT note FROM death WHERE note LIKE \"%East%\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7617948055267334,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each product which has problems, what are the number of problems and the product id?",
          "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
        },
        {
          "question": "What are the names of documents that contain the substring \"CV\"?",
          "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
        },
        {
          "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
          "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "what are all the addresses including line 1 and line 2?",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "generated_sql": "SELECT line_1, line_2 FROM Addresses",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8040108680725098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the line 1 and average monthly rentals of all student addresses?",
          "query": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id"
        },
        {
          "question": "What are all the location codes and location names?",
          "query": "SELECT location_code ,  location_name FROM Ref_locations"
        },
        {
          "question": "What are all the labels?",
          "query": "SELECT DISTINCT label FROM Albums"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first and second line for all addresses?",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "generated_sql": "SELECT line_1, line_2 FROM Addresses;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7383739948272705,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names for all customers?",
          "query": "SELECT first_name ,  last_name FROM Customers;"
        },
        {
          "question": "What is the minimum, maximum, and average seating for all tracks.",
          "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"
        },
        {
          "question": "What is the first and last name of all the German drivers?",
          "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many courses in total are listed?",
      "gold_sql": "SELECT count(*) FROM Courses",
      "generated_sql": "SELECT COUNT(*) FROM Courses",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6998932361602783,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many courses are there in total?",
          "query": "SELECT count(*) FROM COURSES"
        },
        {
          "question": "How many courses are there in total?",
          "query": "SELECT count(*) FROM COURSE"
        },
        {
          "question": "How many courses are offered?",
          "query": "SELECT count(DISTINCT crs_code) FROM CLASS"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many courses are there?",
      "gold_sql": "SELECT count(*) FROM Courses",
      "generated_sql": "SELECT COUNT(*) FROM Courses",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7016794681549072,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How is the math course described?",
      "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
      "generated_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7403433322906494,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How old is the doctor named Zach?",
          "query": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"
        },
        {
          "question": "How much is the track Fast As a Shark?",
          "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
        },
        {
          "question": "Where is the history department?",
          "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the descriptions for all the math courses?",
      "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
      "generated_sql": "SELECT course_description \nFROM Courses \nWHERE course_name = 'math'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7192947864532471,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the descriptions for the aircrafts?",
          "query": "SELECT Description FROM aircraft"
        },
        {
          "question": "What are the student ids for all male students?",
          "query": "SELECT StuID FROM Student WHERE Sex  =  'M'"
        },
        {
          "question": "What are all the different food allergies?",
          "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the zip code of the address in the city Port Chelsea?",
      "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
      "generated_sql": "SELECT zip_postcode \nFROM Addresses \nWHERE city = 'Port Chelsea';",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8231759071350098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the code of the city with the most students?",
          "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the address of the restaurant Subway?",
          "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";"
        },
        {
          "question": "what is the address of history department?",
          "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the zip code for Port Chelsea?",
      "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
      "generated_sql": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7235620021820068,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type code for document type \"Paper\"?",
          "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\""
        },
        {
          "question": "What is the location code for the country \"Canada\"?",
          "query": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\""
        },
        {
          "question": "What is the zip code the county named \"Howard\" is located in?",
          "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which department offers the most number of degrees? List department name and id.",
      "gold_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.department_name, T1.department_id \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 \nON T1.department_id = T2.department_id \nGROUP BY T1.department_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9963116645812988,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which project made the most number of outcomes? List the project details and the project id.",
          "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which city lives most of staffs? List the city name and number of staffs.",
          "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
          "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name and id of the department with the most number of degrees ?",
      "gold_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
      "generated_sql": "SELECT T1.department_name, T1.department_id \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 \nON T1.department_id = T2.department_id \nGROUP BY T1.department_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.896796464920044,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and address of the department with the most students?",
          "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of party with most number of members?",
          "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the document with the most number of sections?",
          "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many departments offer any degree?",
      "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT T1.department_id) \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 \nON T1.department_id = T2.department_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8593909740447998,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many departments offer courses?",
          "query": "SELECT count(DISTINCT dept_name) FROM course"
        },
        {
          "question": "How many different departments are there?",
          "query": "SELECT count(DISTINCT dept_name) FROM department"
        },
        {
          "question": "How many departments are in each school?",
          "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different departments offer degrees?",
      "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT T1.department_name) \nFROM Departments AS T1 \nINNER JOIN Degree_Programs AS T2 \nON T1.department_id = T2.department_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8242356777191162,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many departments offer courses?",
          "query": "SELECT count(DISTINCT dept_name) FROM course"
        },
        {
          "question": "How many different departments are there?",
          "query": "SELECT count(DISTINCT dept_name) FROM department"
        },
        {
          "question": "How many different allergy types exist?",
          "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different degree names are offered?",
      "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7419216632843018,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many courses are offered?",
          "query": "SELECT count(DISTINCT crs_code) FROM CLASS"
        },
        {
          "question": "How many different advisors are listed?",
          "query": "SELECT count(DISTINCT advisor) FROM Student"
        },
        {
          "question": "How many different classes are there?",
          "query": "SELECT count(DISTINCT class_code) FROM CLASS"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different degrees are offered?",
      "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0238940715789795,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many courses are offered?",
          "query": "SELECT count(DISTINCT crs_code) FROM CLASS"
        },
        {
          "question": "How many different advisors are listed?",
          "query": "SELECT count(DISTINCT advisor) FROM Student"
        },
        {
          "question": "How many different classes are there?",
          "query": "SELECT count(DISTINCT class_code) FROM CLASS"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many degrees does the engineering department offer?",
      "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
      "generated_sql": "SELECT COUNT(*) \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 \nON T1.department_id = T2.department_id \nWHERE T2.department_name = 'engineering'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8670475482940674,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many credits does the department offer?",
          "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
        },
        {
          "question": "How many courses does the department of Computer Information Systmes offer?",
          "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""
        },
        {
          "question": "How many department stores does the store chain South have?",
          "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many degrees does the engineering department have?",
      "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
      "generated_sql": "SELECT COUNT(T1.degree_program_id) \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 \nON T1.department_id = T2.department_id \nWHERE T2.department_name = 'engineering'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0238800048828125,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many credits does the department offer?",
          "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
        },
        {
          "question": "How many department stores does the store chain South have?",
          "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
        },
        {
          "question": "How many characteristics does the product named \"sesame\" have?",
          "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions of all the sections?",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "generated_sql": "SELECT section_name, section_description FROM Sections",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7600493431091309,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and locations of all tracks?",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "What are the names of all cities and states?",
          "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
        },
        {
          "question": "What are the names and scores of all wines?",
          "query": "SELECT Name ,  Score FROM WINE"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions for all the sections?",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "generated_sql": "SELECT section_name, section_description FROM Sections",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7706518173217773,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and distances for all airplanes?",
          "query": "SELECT name ,  distance FROM Aircraft"
        },
        {
          "question": "What are the first and last names for all customers?",
          "query": "SELECT first_name ,  last_name FROM Customers;"
        },
        {
          "question": "What are the account ids, customer ids, and account names for all the accounts?",
          "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and id of courses having at most 2 sections?",
      "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
      "generated_sql": "SELECT T1.course_id, T1.course_name \nFROM Courses AS T1 \nJOIN Sections AS T2 \nON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(*) <= 2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9213542938232422,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the id and name of the mountains that have at least 2 photos?",
          "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the names and ids of the tourist attractions that are visited at most once?",
          "query": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"
        },
        {
          "question": "What are the names of parties with at least 2 events?",
          "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and ids of every course with less than 2 sections?",
      "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
      "generated_sql": "SELECT T1.course_id, T1.course_name \nFROM Courses AS T1 \nJOIN Sections AS T2 \nON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(*) < 2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9103925228118896,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names of all customers with more than 2 payments?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
        },
        {
          "question": "What are the ids and names of accounts with 4 or more transactions?",
          "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
        },
        {
          "question": "What are the ids and names of the companies that operated more than one flight?",
          "query": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List the section_name in reversed lexicographical order.",
      "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "generated_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7170374393463135,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of enzymes in descending lexicographical order.",
          "query": "SELECT name FROM enzyme ORDER BY name DESC"
        },
        {
          "question": "List all the services in the alphabetical order.",
          "query": "SELECT service_name FROM services ORDER BY service_name"
        },
        {
          "question": "List the votes of elections in descending order.",
          "query": "SELECT Votes FROM election ORDER BY Votes DESC"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names of the sections in reverse alphabetical order?",
      "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "generated_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8073697090148926,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the courses in alphabetical order?",
          "query": "SELECT course_name FROM courses ORDER BY course_name"
        },
        {
          "question": "What are the names of the regions in alphabetical order?",
          "query": "SELECT region_name FROM region ORDER BY region_name"
        },
        {
          "question": "What are the names of the pilots in alphabetical order?",
          "query": "SELECT Name FROM pilot ORDER BY Name ASC"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the semester which most student registered in? Show both the name and the id.",
      "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.semester_name, T1.semester_id \nFROM Semesters AS T1 \nJOIN Student_Enrolment AS T2 \nON T1.semester_id = T2.semester_id \nGROUP BY T1.semester_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.916215181350708,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the year and semester with the most courses?",
          "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the first and last name of the student who played the most sports?",
          "query": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the first and last name of the student participating in the most activities?",
          "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "For each semester, what is the name and id of the one with the most students registered?",
      "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.semester_id, T2.semester_name \nFROM Student_Enrolment AS T1 \nJOIN Semesters AS T2 ON T1.semester_id = T2.semester_id \nGROUP BY T2.semester_id \nORDER BY COUNT(*) DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9115679264068604,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and country for the artist with most number of exhibitions?",
          "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
          "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and address of the department with the most students?",
          "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the description of the department whose name has the substring the computer?",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "generated_sql": "SELECT department_description FROM Departments WHERE department_name LIKE \"%the computer%\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8484129905700684,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
          "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
        },
        {
          "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
          "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
        },
        {
          "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
          "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the department description for the one whose name has the word computer?",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "generated_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8168892860412598,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
          "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
        },
        {
          "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
          "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
        },
        {
          "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
          "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
      "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nWHERE T2.semester_id IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n    GROUP BY semester_id\n    HAVING COUNT(DISTINCT degree_program_id) > 1\n)\nGROUP BY T1.student_id, T2.semester_id\nHAVING COUNT(DISTINCT T2.degree_program_id) = 2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1525402069091797,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first and last name of students who are not in the largest major.",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?",
          "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
        },
        {
          "question": "Find the name of physicians who are in charge of more than one patient.",
          "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
      "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nWHERE T2.semester_id IN (\n  SELECT T2.semester_id\n  FROM Student_Enrolment AS T2\n  GROUP BY T2.semester_id, T2.student_id\n  HAVING COUNT(DISTINCT T2.degree_program_id) = 2\n)\nGROUP BY T1.student_id\nHAVING COUNT(DISTINCT T2.degree_program_id) = 2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2042253017425537,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
          "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        },
        {
          "question": "What are the first and last names of all customers with more than 2 payments?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"
        },
        {
          "question": "What are the names and number of works for all artists who have sung at least one song in English?",
          "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelor';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0866093635559082,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Who is the youngest employee in the company? List employee's first and last name.",
          "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
        },
        {
          "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
          "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\""
        },
        {
          "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
          "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Bachelors';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0091466903686523,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first, middle, and last names of all staff?",
          "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;"
        },
        {
          "question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?",
          "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\""
        },
        {
          "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
          "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the kind of program which most number of students are enrolled in?",
      "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 \nON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_summary_name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1710951328277588,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the state which has the most number of customers.",
          "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
        },
        {
          "question": "Find the name of airline which runs the most number of routes.",
          "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the name of the department that has the biggest number of students minored in?",
          "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the degree summary name that has the most number of students enrolled?",
      "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 \nON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_summary_name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9234199523925781,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department that has the largest number of students enrolled?",
          "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the course that has the most student enrollment?",
          "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
      "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 \nON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9392280578613281,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which document has the most draft copies? List its document id and number of draft copies.",
          "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
        },
        {
          "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
          "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
          "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the program id and the summary of the degree that has the most students enrolled?",
      "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 \nON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9491722583770752,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the type and id of the organization that has the most research staff?",
          "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the customer id of the customer who has the most orders?",
          "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id of the order which has the most items?",
          "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY num_enrollments DESC\nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.009951114654541,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
          "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which part fault requires the most number of skills to fix? List part id and name.",
          "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the first name of students who are living in the dorm that has most number of amenities.",
          "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nGROUP BY T1.student_id \nORDER BY COUNT(T2.student_enrolment_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1667413711547852,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the customer last name, id and phone number with most number of orders?",
          "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which semesters do not have any student enrolled? List the semester name.",
      "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
      "generated_sql": "SELECT semester_name \nFROM Semesters \nWHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7777273654937744,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of mountains that do not have any climber.",
          "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
        },
        {
          "question": "List the names of pilots that do not have any record.",
          "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)"
        },
        {
          "question": "List the names of counties that do not have any cities.",
          "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name of the semester with no students enrolled?",
      "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
      "generated_sql": "SELECT T1.semester_name \nFROM Semesters AS T1 \nLEFT JOIN Student_Enrolment AS T2 \nON T1.semester_id = T2.semester_id \nWHERE T2.semester_id IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.87888503074646,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department with the most students enrolled?",
          "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the last name of the youngest student?",
          "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
        },
        {
          "question": "What is the name of the most recent movie?",
          "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are all the course names of the courses which ever have students enrolled in?",
      "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
      "generated_sql": "SELECT DISTINCT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 \nON T1.course_id = T2.course_id",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8462369441986084,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first names of all students in course ACCT-211?",
          "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'"
        },
        {
          "question": "What are the distinct last names of the students who have class president votes?",
          "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"
        },
        {
          "question": "What are the distinct first names of the students who have class president votes?",
          "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names of all courses that have some students enrolled?",
      "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
      "generated_sql": "SELECT DISTINCT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 \nON T1.course_id = T2.course_id",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.81093430519104,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the full names of all students",
          "query": "SELECT Fname ,  Lname FROM Student"
        },
        {
          "question": "What are the names of the different banks that have provided loans?",
          "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"
        },
        {
          "question": "What are the names of departments that have at least one employee.",
          "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What's the name of the course with most number of enrollments?",
      "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 \nON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9433698654174805,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of track with most number of races.",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the course with the most registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of party with most number of members?",
          "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name of the course with the most students enrolled?",
      "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 \nON T1.course_id = T2.course_id \nGROUP BY T1.course_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0295357704162598,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department with the most students enrolled?",
          "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the course with the most registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the activity with the most students?",
          "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date and id of the transcript with at least 2 course results.",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 \nON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nHAVING count(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.914839506149292,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the id and color description of the products with at least 2 characteristics.",
          "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2"
        },
        {
          "question": "Show the account id and name with at least 4 transactions.",
          "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
        },
        {
          "question": "Show first name and id for all customers with at least 2 accounts.",
          "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the date and id of the transcript with at least 2 courses listed?",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9492337703704834,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the team with at least 2 technicians?",
          "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
          "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What is the project id and detail for the project with at least two documents?",
          "query": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
      "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
      "generated_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8024134635925293,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first name, last name, and phone of the customer with account name 162?",
          "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""
        },
        {
          "question": "What is the first name of the author with last name \"Ueno\"?",
          "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
        },
        {
          "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
          "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the mobile phone number of the student named Timmothy Ward ?",
      "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
      "generated_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7720310688018799,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the the phone number of Nancy Edwards?",
          "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
        },
        {
          "question": "What is the phone number of the performer Ashley?",
          "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\""
        },
        {
          "question": "What is the email and phone number of Astrid Gruber the customer?",
          "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is the first student to register? List the first name, middle name and last name.",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
      "generated_sql": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.779881477355957,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
          "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""
        },
        {
          "question": "Who is the youngest employee in the company? List employee's first and last name.",
          "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
        },
        {
          "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
          "query": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name of the first student to register?",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
      "generated_sql": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY date_first_registered ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8429157733917236,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first and last name of the oldest employee?",
          "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
        },
        {
          "question": "What is the most popular first name of the actors?",
          "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name and price of the cheapest product?",
          "query": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Transcripts AS T3 ON T3.transcript_id IN (SELECT transcript_id FROM Transcript_Contents WHERE student_course_id IN (SELECT student_course_id FROM Student_Enrolment_Courses WHERE student_enrolment_id = T2.student_enrolment_id)) \nORDER BY T3.transcript_date ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.11037278175354,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first name and the last name of the customer who made the earliest rental?",
          "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
        },
        {
          "question": "Who is the youngest employee in the company? List employee's first and last name.",
          "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
        },
        {
          "question": "What is the first and last name of the oldest employee?",
          "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name of the earliest school graduate?",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Transcripts AS T3 ON T3.transcript_id = ( \n    SELECT T4.transcript_id \n    FROM Transcript_Contents AS T4 \n    WHERE T4.student_course_id IN ( \n        SELECT T5.student_course_id \n        FROM Student_Enrolment_Courses AS T5 \n        WHERE T5.student_enrolment_id = T2.student_enrolment_id \n    ) \n) \nORDER BY T3.transcript_date ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.4475862979888916,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the first name and the last name of the customer who made the earliest rental?",
          "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
        },
        {
          "question": "What is the first and last name of the oldest employee?",
          "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
        },
        {
          "question": "What is the name and price of the cheapest product?",
          "query": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Whose permanent address is different from his or her current address? List his or her first name.",
      "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.current_address_id != T1.permanent_address_id;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8173732757568359,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
          "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
        },
        {
          "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
          "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
        },
        {
          "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
          "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first name of the student whose permanent address is different from his or her current one?",
      "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
      "generated_sql": "SELECT first_name \nFROM Students \nWHERE current_address_id != permanent_address_id;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7913460731506348,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
          "query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""
        },
        {
          "question": "What is the name of the technician whose team is not 'NYY'?",
          "query": "SELECT Name FROM technician WHERE Team != \"NYY\""
        },
        {
          "question": "What is the name of the person whose age is below 30?",
          "query": "SELECT name FROM Person WHERE age  <  30"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which address holds the most number of students currently? List the address id and all lines.",
      "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9461369514465332,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which document has the most draft copies? List its document id and number of draft copies.",
          "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
        },
        {
          "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
          "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
          "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the id, line 1, and line 2 of the address with the most students?",
      "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.address_id, T1.line_1, T1.line_2 \nFROM Addresses AS T1 \nJOIN Students AS T2 \nON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9210820198059082,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and address of the department with the most students?",
          "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the activity with the most students?",
          "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the course with the most registered students?",
          "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "On average, when were the transcripts printed?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(strftime('%J', transcript_date)) \nFROM Transcripts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7440433502197266,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the dates on which more than one revisions were made.",
          "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
        },
        {
          "question": "How many medicines were not approved by the FDA?",
          "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
        },
        {
          "question": "Return the average, minimum, maximum, and total transaction amounts.",
          "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the average transcript date?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(transcript_date) FROM Transcripts",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7215464115142822,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average enrollment number?",
          "query": "SELECT avg(enr) FROM College"
        },
        {
          "question": "What is the average price for products?",
          "query": "SELECT avg(Product_Price) FROM Products"
        },
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "When is the first transcript released? List the date and details.",
      "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
      "generated_sql": "SELECT transcript_date, other_details \nFROM Transcripts \nORDER BY transcript_date ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9324839115142822,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Who is the youngest employee in the company? List employee's first and last name.",
          "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
        },
        {
          "question": "Tell me the the date when the first claim was made.",
          "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"
        },
        {
          "question": "What is the name and date of the most recent race?",
          "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the earliest date of a transcript release, and what details can you tell me?",
      "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
      "generated_sql": "SELECT transcript_date, other_details \nFROM Transcripts \nORDER BY transcript_date ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7699337005615234,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum and mininum number of stars a rating can receive?",
          "query": "SELECT max(stars) ,  min(stars) FROM Rating"
        },
        {
          "question": "What is the name and date of the most recent race?",
          "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
        },
        {
          "question": "What was the date of the earliest payment?",
          "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many transcripts are released?",
      "gold_sql": "SELECT count(*) FROM Transcripts",
      "generated_sql": "SELECT COUNT(*) \nFROM Transcripts \nWHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7803475856781006,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many transcripts are listed?",
      "gold_sql": "SELECT count(*) FROM Transcripts",
      "generated_sql": "SELECT COUNT(*) FROM Transcripts",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7942676544189453,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different advisors are listed?",
          "query": "SELECT count(DISTINCT advisor) FROM Student"
        },
        {
          "question": "How many Bangladeshi artists are listed?",
          "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""
        },
        {
          "question": "How many different jobs are listed?",
          "query": "SELECT count(DISTINCT job) FROM Person"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the last transcript release date?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7353849411010742,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the last name of the youngest student?",
          "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
        },
        {
          "question": "What is the largest major?",
          "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the last date of the staff leaving the projects?",
          "query": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "When was the last transcript released?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT transcript_date \nFROM Transcripts \nORDER BY transcript_date DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7548127174377441,
      "error": null,
      "few_shot_examples": [
        {
          "question": "When was the first asset acquired?",
          "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1"
        },
        {
          "question": "When was the school with the largest enrollment founded?",
          "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
        },
        {
          "question": "Tell me the the date when the first claim was made.",
          "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
      "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT student_course_id, COUNT(*) \nFROM Transcript_Contents \nGROUP BY student_course_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7616574764251709,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many instructors teach a course in the Spring of 2010?",
          "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
        },
        {
          "question": "How many customers are there in the customer type with the most customers?",
          "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "How many documents can one grant have at most? List the grant id and number.",
          "query": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
      "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT COUNT(TC.transcript_id) AS max_count, SEC.student_course_id\nFROM Transcript_Contents TC\nJOIN Student_Enrolment_Courses SEC ON TC.student_course_id = SEC.student_course_id\nGROUP BY SEC.student_course_id\nORDER BY max_count DESC\nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.155562162399292,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
          "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"
        },
        {
          "question": "What is the investor that has invested in the most number of entrepreneurs?",
          "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the party that has the largest number of representatives?",
          "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date of the transcript which shows the least number of results, also list the id.",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 \nON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nORDER BY COUNT(*) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9310226440429688,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which staff handled least number of payments? List the full name and the id.",
          "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "Which kind of part has the least number of faults? List the part name.",
          "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "Which project made the most number of outcomes? List the project details and the project id.",
          "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the date and id of the transcript with the least number of results?",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 \nON T1.transcript_id = T2.transcript_id \nGROUP BY T1.transcript_id \nORDER BY COUNT(*) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.070387363433838,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the id of the department with the least number of staff?",
          "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "What is the customer first, last name and id with least number of accounts.",
          "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
          "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
      "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
      "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different addresses do the students currently live?",
      "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
      "generated_sql": "SELECT COUNT(DISTINCT T1.current_address_id) \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 \nON T1.current_address_id = T2.address_id;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8471329212188721,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different colleges do attend the tryout test?",
          "query": "SELECT count(DISTINCT cName) FROM tryout"
        },
        {
          "question": "How many different students play games?",
          "query": "SELECT count(DISTINCT StuID) FROM Plays_games"
        },
        {
          "question": "How many different statuses do cities have?",
          "query": "SELECT count(DISTINCT Status) FROM city"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the different addresses that have students living there?",
      "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
      "generated_sql": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country \nFROM Addresses AS T1 \nJOIN Students AS T2 \nON T1.address_id = T2.current_address_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0096442699432373,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different states that have students trying out?",
          "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName"
        },
        {
          "question": "What are the countries that have at least two perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the nations that have more than two ships?",
          "query": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List all the student details in reversed lexicographical order.",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "generated_sql": "SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0790176391601562,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all the services in the alphabetical order.",
          "query": "SELECT service_name FROM services ORDER BY service_name"
        },
        {
          "question": "List all customers\u2019 names in the alphabetical order.",
          "query": "SELECT name FROM accounts ORDER BY name"
        },
        {
          "question": "List all program origins in the alphabetical order.",
          "query": "SELECT origin FROM program ORDER BY origin"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What other details can you tell me about students in reverse alphabetical order?",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "generated_sql": "SELECT first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details \nFROM Students \nORDER BY last_name DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0348551273345947,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different names of all the races in reverse alphabetical order?",
          "query": "SELECT DISTINCT name FROM races ORDER BY name DESC"
        },
        {
          "question": "What are the names of the courses in alphabetical order?",
          "query": "SELECT course_name FROM courses ORDER BY course_name"
        },
        {
          "question": "What are all the album titles, in alphabetical order?",
          "query": "SELECT Title FROM ALBUM ORDER BY Title"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Describe the section h.",
      "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
      "generated_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0654947757720947,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the section titles of the document with the name \"David CV\".",
          "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\""
        },
        {
          "question": "Where is the history department?",
          "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'"
        },
        {
          "question": "Who is the oldest person?",
          "query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)"
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the description for the section named h?",
      "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
      "generated_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.941638708114624,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type description for document type named Film?",
          "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""
        },
        {
          "question": "What is the description of the product named \"Chocolate\"?",
          "query": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\""
        },
        {
          "question": "What is the description of the role named \"Proof Reader\"?",
          "query": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
      "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.permanent_address_id IN (\n    SELECT T2.address_id \n    FROM Addresses AS T2 \n    WHERE T2.country = 'Haiti'\n) \nOR T1.cell_mobile_number = '09700166582'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9388279914855957,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first name of students who are living in the Smith Hall.",
          "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"
        },
        {
          "question": "Find the last and first name of students who are playing Football or Lacrosse.",
          "query": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""
        },
        {
          "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
          "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
        }
      ]
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
      "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
      "generated_sql": "SELECT first_name \nFROM Students \nWHERE permanent_address_id IN (\n    SELECT address_id \n    FROM Addresses \n    WHERE country = 'Haiti'\n) \nOR cell_mobile_number = '09700166582'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8882875442504883,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first names of all students who live in the dorm with the most amenities?",
          "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What are the names of the students who took classes in 2009 or 2010?",
          "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
        },
        {
          "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
          "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all cartoons in alphabetical order.",
      "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
      "generated_sql": "SELECT Title FROM Cartoon ORDER BY Title",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6670694351196289,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of all the customers in alphabetical order.",
          "query": "SELECT customer_details FROM customers ORDER BY customer_details"
        },
        {
          "question": "List all the services in the alphabetical order.",
          "query": "SELECT service_name FROM services ORDER BY service_name"
        },
        {
          "question": "List the names of all scientists sorted in alphabetical order.",
          "query": "SELECT name FROM scientists ORDER BY name"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the titles of the cartoons sorted alphabetically?",
      "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
      "generated_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6846699714660645,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the titles of all the albums?",
          "query": "SELECT title FROM albums;"
        },
        {
          "question": "What are the names and urls of images, sorted alphabetically?",
          "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name"
        },
        {
          "question": "What are the names of actors, ordered alphabetically?",
          "query": "SELECT Name FROM actor ORDER BY Name ASC"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List all cartoon directed by \"Ben Jones\".",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
      "generated_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7168319225311279,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List all tracks bought by customer Daan Peeters.",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
        },
        {
          "question": "Find the titles of all movies directed by steven spielberg.",
          "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
        },
        {
          "question": "What are the names of all movies directed by Steven Spielberg?",
          "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the names of all cartoons directed by Ben Jones?",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
      "generated_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7239236831665039,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all movies directed by Steven Spielberg?",
          "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
        },
        {
          "question": "What are the names of all songs in English?",
          "query": "SELECT song_name FROM song WHERE languages  =  \"english\""
        },
        {
          "question": "What are the names of all male British artists?",
          "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons were written by \"Joseph Kuhr\"?",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "generated_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8078877925872803,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many documents were shipped by USPS?",
          "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
        },
        {
          "question": "How many companies were created by Andy?",
          "query": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'"
        },
        {
          "question": "How many medicines were not approved by the FDA?",
          "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the number of cartoones written by Joseph Kuhr?",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "generated_sql": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6955652236938477,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the number of departments in Division \"AS\"?",
          "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\""
        },
        {
          "question": "What is the number of airlines based in Russia?",
          "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "list all cartoon titles and their directors ordered by their air date",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6544294357299805,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of all courses ordered by their titles and credits.",
          "query": "SELECT title FROM course ORDER BY title ,  credits"
        },
        {
          "question": "List all manufacturer names and ids ordered by their opening year.",
          "query": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year"
        },
        {
          "question": "List all department names ordered by their starting date.",
          "query": "SELECT dname FROM department ORDER BY mgr_start_date"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the name and directors of all the cartoons that are ordered by air date?",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6581103801727295,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
          "query": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million"
        },
        {
          "question": "What are the names of all songs that are ordered by their resolution numbers?",
          "query": "SELECT song_name FROM song ORDER BY resolution"
        },
        {
          "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
          "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
      "generated_sql": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6615588665008545,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of all the channels owned by either CCTV or HBS",
          "query": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'"
        },
        {
          "question": "Find the titles of all movies directed by steven spielberg.",
          "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
        },
        {
          "question": "What are the names of all movies directed by Steven Spielberg?",
          "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
      "generated_sql": "SELECT Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7286081314086914,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the titles of all the albums?",
          "query": "SELECT title FROM albums;"
        },
        {
          "question": "What are the names of all movies directed by Steven Spielberg?",
          "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
        },
        {
          "question": "What are the titles of all movies that James Cameron directed after 2000?",
          "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
      "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT Country, COUNT(id) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7310585975646973,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which Advisor has most of students? List advisor and the number of students.",
          "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"
        },
        {
          "question": "Which document has the most draft copies? List its document id and number of draft copies.",
          "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
        },
        {
          "question": "Which major has least number of students? List the major and the number of students.",
          "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the country with the most number of TV Channels and how many does it have?",
      "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT Country, COUNT(*) \nFROM TV_Channel \nGROUP BY Country \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.828397274017334,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the customer id with most number of cards, and how many does he have?",
          "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
          "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the country with the most number of home airlines?",
          "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the number of different series names and contents in the TV Channel table.",
      "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
      "generated_sql": "SELECT series_name, Content, COUNT(*) \nFROM TV_Channel \nGROUP BY series_name, Content",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8694362640380859,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the state names and the number of customers living in each state.",
          "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
        },
        {
          "question": "List all headquarters and the number of companies in each headquarter.",
          "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"
        },
        {
          "question": "Show different teams of technicians and the number of technicians in each team.",
          "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "How many different series and contents are listed in the TV Channel table?",
      "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
      "generated_sql": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) \nFROM TV_Channel",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7501933574676514,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many locations are listed in the database?",
          "query": "SELECT count(*) FROM Ref_locations"
        },
        {
          "question": "How many different genders are there in the dorms?",
          "query": "SELECT count(DISTINCT gender) FROM dorm"
        },
        {
          "question": "How many females are in the network?",
          "query": "SELECT count(*) FROM Person WHERE gender  =  'female'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8277215957641602,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department with the most credits?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
        },
        {
          "question": "What is the attribute data type of the attribute with name \"Green\"?",
          "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
        },
        {
          "question": "What is the first name of the author with last name \"Ueno\"?",
          "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of the series Sky Radio?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.669823169708252,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the type of allergy Cat?",
          "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
        },
        {
          "question": "What is the title of the newest movie?",
          "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
      "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6741528511047363,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department with the most credits?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
        },
        {
          "question": "What is the attribute data type of the attribute with name \"Green\"?",
          "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
        },
        {
          "question": "What is the first name of the author with last name \"Ueno\"?",
          "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
      "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7828693389892578,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of gymnasts?",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "What are the names of companies whose headquarters are not \"USA\"?",
          "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'"
        },
        {
          "question": "What are the names of enzymes whose product is not 'Heme'?",
          "query": "SELECT name FROM enzyme WHERE product != 'Heme'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "How many TV Channel using language English?",
      "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
      "generated_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = \"English\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6619877815246582,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students attend course English?",
          "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
        },
        {
          "question": "How many architects are female?",
          "query": "SELECT count(*) FROM architect WHERE gender  =  'female'"
        },
        {
          "question": "How many allergies have type animal?",
          "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "How many TV Channels use the English language?",
      "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
      "generated_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6174178123474121,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many students are attending English courses?",
          "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
        },
        {
          "question": "How many females are in the network?",
          "query": "SELECT count(*) FROM Person WHERE gender  =  'female'"
        },
        {
          "question": "How many members have the black membership card?",
          "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
      "generated_sql": "SELECT Language, COUNT(*) \nFROM TV_Channel \nGROUP BY Language \nORDER BY COUNT(*) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7812094688415527,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which major has least number of students? List the major and the number of students.",
          "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
        },
        {
          "question": "Which Advisor has most of students? List advisor and the number of students.",
          "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"
        },
        {
          "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
          "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
      "generated_sql": "SELECT Language, COUNT(*) \nFROM TV_Channel \nGROUP BY Language \nORDER BY COUNT(*) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7557146549224854,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the top 5 countries by number of invoices and how many do they have?",
          "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
        },
        {
          "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
          "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "How many airports are there per country? Order the countries by decreasing number of airports.",
          "query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List each language and the number of TV Channels using it.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
      "generated_sql": "SELECT Language, COUNT(*) \nFROM TV_Channel \nGROUP BY Language",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6452820301055908,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each classroom, report the classroom number and the number of grades using it.",
          "query": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom"
        },
        {
          "question": "List the types of competition and the number of competitions of each type.",
          "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type"
        },
        {
          "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
          "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "For each language, list the number of TV Channels that use it.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
      "generated_sql": "SELECT Language, COUNT(*) \nFROM TV_Channel \nGROUP BY Language",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6710391044616699,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name and the number of enrolled student for each course.",
          "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
        },
        {
          "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
          "query": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom"
        },
        {
          "question": "Find the number of followers for each user.",
          "query": "SELECT count(*) FROM follows GROUP BY f1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
      "generated_sql": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Title = 'The Rise of the Blue Beetle!';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8622891902923584,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the owner of the channel that has the highest rating ratio?",
          "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1"
        },
        {
          "question": "What is the count of customers that Steve Johnson supports?",
          "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
        },
        {
          "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
          "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
      "generated_sql": "SELECT T2.series_name \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T1.Title = 'The Rise of the Blue Beetle'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7958192825317383,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the race that occurred most recently?",
          "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
        },
        {
          "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
          "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"
        },
        {
          "question": "What is the name of the aircraft that was on flight number 99?",
          "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
      "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T2.series_name = \"Sky Radio\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7950224876403809,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of all playlist.",
          "query": "SELECT name FROM playlists;"
        },
        {
          "question": "List the all the distinct names of the products with the characteristic name 'warm'.",
          "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
        },
        {
          "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
          "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
      "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 \nON T1.Channel = T2.id \nWHERE T2.series_name = \"Sky Radio\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7738022804260254,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all instructors with names that include \"dar\"?",
          "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
        },
        {
          "question": "What is the name of the aircraft that was on flight number 99?",
          "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"
        },
        {
          "question": "What are the names of all tracks that are on playlists titled Movies?",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the Episode of all TV series sorted by rating.",
      "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
      "generated_sql": "SELECT Episode FROM TV_series ORDER BY Rating;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8623359203338623,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of all rooms sorted by their prices.",
          "query": "SELECT roomName FROM Rooms ORDER BY basePrice;"
        },
        {
          "question": "List the course name of courses sorted by credits.",
          "query": "SELECT CName FROM COURSE ORDER BY Credits"
        },
        {
          "question": "List all the model names sorted by their launch year.",
          "query": "SELECT model_name FROM chip_model ORDER BY launch_year"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are all of the episodes ordered by ratings?",
      "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
      "generated_sql": "SELECT Episode FROM TV_series ORDER BY Rating",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6545944213867188,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all customers, ordered by account balance?",
          "query": "SELECT cust_name FROM customer ORDER BY acc_bal"
        },
        {
          "question": "What are the locations of all the gas stations ordered by opening year?",
          "query": "SELECT LOCATION FROM gas_station ORDER BY open_year"
        },
        {
          "question": "What are the names of all people, ordered by their date of birth?",
          "query": "SELECT name FROM people ORDER BY date_of_birth"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
      "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
      "generated_sql": "SELECT Episode, Rating \nFROM TV_series \nORDER BY Rating DESC \nLIMIT 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6846961975097656,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and years of the movies that has the top 3 highest rating star?",
          "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"
        },
        {
          "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
          "query": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;"
        },
        {
          "question": "what are the top 3 highest support rates?",
          "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
      "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
      "generated_sql": "SELECT Episode, Rating \nFROM TV_series \nORDER BY Rating DESC \nLIMIT 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7340092658996582,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
          "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
        },
        {
          "question": "What are the names of the 3 departments with the most courses?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
        },
        {
          "question": "What are the languages that are used most often in songs?",
          "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is minimum and maximum share of TV series?",
      "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
      "generated_sql": "SELECT min(Share), max(Share) FROM TV_series",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6921696662902832,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum and minimum height of all players?",
          "query": "SELECT max(weight) ,  min(weight) FROM Player"
        },
        {
          "question": "What is the maximum and minimum market value of companies?",
          "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company"
        },
        {
          "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
          "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the maximum and minimum share for the TV series?",
      "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
      "generated_sql": "SELECT max(Share), min(Share) FROM TV_series",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7120070457458496,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum and minimum height of all players?",
          "query": "SELECT max(weight) ,  min(weight) FROM Player"
        },
        {
          "question": "What is the maximum and minimum market value of companies?",
          "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company"
        },
        {
          "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
          "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6616933345794678,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the date of the performance with the highest number of attendees?",
          "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
        },
        {
          "question": "What is the receipt date of the document with id 3?",
          "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;"
        },
        {
          "question": "What is the mail date of the document with id 7?",
          "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "When did the episode \"A Love of a Lifetime\" air?",
      "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7108612060546875,
      "error": null,
      "few_shot_examples": [
        {
          "question": "When did the first payment happen?",
          "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
        },
        {
          "question": "When did Carole Bernhard first become a customer?",
          "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
        },
        {
          "question": "Find the number of rooms with a king bed.",
          "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.683800220489502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of professors with a Ph.D. ?",
          "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
        },
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        },
        {
          "question": "What is allergy type of a cat allergy?",
          "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6360797882080078,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average number of gold medals for a club?",
          "query": "SELECT avg(Gold) FROM club_rank"
        },
        {
          "question": "What is the average fee for a CSU campus in the year of 1996?",
          "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
        },
        {
          "question": "What is the average fee for a CSU campus in the year of 2005?",
          "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T1.series_name, T1.id \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = 'A Love of a Lifetime'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8072810173034668,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of professors with a Ph.D. ?",
          "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"
        },
        {
          "question": "What is the title of the course with Differential Geometry as a prerequisite?",
          "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"
        },
        {
          "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T1.series_name \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T2.Episode = \"A Love of a Lifetime\";",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8508095741271973,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the movie that has been reviewed the most?",
          "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
          "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
        },
        {
          "question": "What is the name of the album that has the track Ball to the Wall?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
      "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = \"Sky Radio\";",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8566100597381592,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of all playlist.",
          "query": "SELECT name FROM playlists;"
        },
        {
          "question": "List the all the distinct names of the products with the characteristic name 'warm'.",
          "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""
        },
        {
          "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
          "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the episode for the TV series named \"Sky Radio\"?",
      "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 \nON T1.id = T2.Channel \nWHERE T1.series_name = \"Sky Radio\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9511222839355469,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the document type description for document type named Film?",
          "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""
        },
        {
          "question": "What is the role of the employee named Koby?",
          "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
        },
        {
          "question": "What is the date of enrollment of the course named \"Spanish\"?",
          "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "Find the number of cartoons directed by each of the listed directors.",
      "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
      "generated_sql": "SELECT Directed_by, COUNT(*) \nFROM Cartoon \nGROUP BY Directed_by",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8046746253967285,
      "error": null,
      "few_shot_examples": [
        {
          "question": "find the number of medicines offered by each trade.",
          "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"
        },
        {
          "question": "Find the number of followers for each user.",
          "query": "SELECT count(*) FROM follows GROUP BY f1"
        },
        {
          "question": "Find the number of departments in each school.",
          "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons did each director create?",
      "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
      "generated_sql": "SELECT Directed_by, COUNT(*) \nFROM Cartoon \nGROUP BY Directed_by",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6669642925262451,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many eliminations did each team have?",
          "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
        },
        {
          "question": "How many players played each position?",
          "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"
        },
        {
          "question": "How many students play each sport?",
          "query": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "Find the production code and channel of the most recently aired cartoon .",
      "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
      "generated_sql": "SELECT Production_code, Channel \nFROM Cartoon \nORDER BY Original_air_date DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6879911422729492,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the count and code of the job has most employees.",
          "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the type code of the most frequently used policy.",
          "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the code of the role that have the most employees.",
          "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the produdction code and channel of the most recent cartoon ?",
      "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
      "generated_sql": "SELECT Production_code, Channel \nFROM Cartoon \nORDER BY Original_air_date DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6967542171478271,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name and date of the most recent race?",
          "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
        },
        {
          "question": "What is the count and code of the job with the most employee?",
          "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id of the most recent order?",
          "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "Find the package choice and series name of the TV channel that has high definition TV.",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "generated_sql": "SELECT Package_Option, series_name \nFROM TV_Channel \nWHERE Hight_definition_TV = 'yes'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7343401908874512,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the first name and last name of the instructor of course that has course name",
          "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\""
        },
        {
          "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
          "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\""
        },
        {
          "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
          "query": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "generated_sql": "SELECT Package_Option, series_name \nFROM TV_Channel \nWHERE Hight_definition_TV = 'yes'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1125245094299316,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the id and name of the photos for mountains?",
          "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000"
        },
        {
          "question": "What is the name and distance for the aircraft that has an id of 12?",
          "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
        },
        {
          "question": "What are the name and description for location code x?",
          "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
      "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SELECT DISTINCT t1.Country \nFROM TV_Channel AS t1 \nJOIN Cartoon AS t2 \nON t1.id = t2.Channel \nWHERE t2.Written_by = 'Todd Casey'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8173234462738037,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which students are unaffected by allergies?",
          "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
        },
        {
          "question": "Which papers were written by authors from the institution \"Google\"?",
          "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""
        },
        {
          "question": "Which channels are broadcast in the morning? Give me the channel names.",
          "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
      "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SELECT DISTINCT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Written_by = 'Todd Casey'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7757344245910645,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the countries that have at least two perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are all the company names that have a book published by Alyson?",
          "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"
        },
        {
          "question": "What are the names of departments that have primarily affiliated physicians.",
          "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
      "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "What are the countries that are not playing cartoons written by Todd Casey?",
      "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "generated_sql": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7579615116119385,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of dorms that do not have amenity TV Lounge.",
          "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"
        },
        {
          "question": "Find the names of channels that are not owned by CCTV.",
          "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'"
        },
        {
          "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
          "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "generated_sql": "SELECT Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7538189888000488,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
          "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"
        },
        {
          "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
          "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
        },
        {
          "question": "What is the origin and destination for all flights whose price is higher than 300?",
          "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "find id of the tv channels that from the countries where have more than two tv channels.",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "generated_sql": "SELECT id \nFROM TV_Channel \nWHERE Country IN (\n    SELECT Country \n    FROM TV_Channel \n    GROUP BY Country \n    HAVING COUNT(*) > 2\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.794731855392456,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of the ships that have more than one captain.",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        },
        {
          "question": "List the countries that have more than one mountain.",
          "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
        },
        {
          "question": "List the nations that have more than two ships.",
          "query": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of all tv channels that have more than 2 TV channels?",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "generated_sql": "SELECT T1.id \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 \nON T1.id = T2.Channel \nGROUP BY T1.id \nHAVING count(T2.Channel) > 2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8943023681640625,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all playlists that have more than 100 tracks?",
          "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
        },
        {
          "question": "What are the cities that have more than 2 airports sorted by number of airports?",
          "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
        },
        {
          "question": "What are the students ids of students who have more than one allergy?",
          "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
      "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
      "generated_sql": "SELECT Package_Option \nFROM TV_Channel \nEXCEPT \nSELECT T1.Package_Option \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 \nON T1.id = T2.Channel \nWHERE T2.Directed_by = 'Ben Jones'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9313187599182129,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of artists that do not have any albums.",
          "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"
        },
        {
          "question": "What is the total number of enrollment of schools that do not have any goalie player?",
          "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
        },
        {
          "question": "Find the name of companies that do not make DVD drive.",
          "query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"
        }
      ]
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
      "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
      "generated_sql": "SELECT Package_Option \nFROM TV_Channel \nWHERE id NOT IN (\n    SELECT Channel \n    FROM Cartoon \n    WHERE Directed_by = 'Ben Jones'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7757308483123779,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all clubs that do not have any players?",
          "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
        },
        {
          "question": "What are the ids of the movies that are not reviewed by Brittany Harris.",
          "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""
        },
        {
          "question": "What are the first names of all professors not teaching any classes?",
          "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "How many poker players are there?",
      "gold_sql": "SELECT count(*) FROM poker_player",
      "generated_sql": "SELECT COUNT(*) FROM poker_player",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6322236061096191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many players are there?",
          "query": "SELECT count(*) FROM player"
        },
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Count the number of poker players.",
      "gold_sql": "SELECT count(*) FROM poker_player",
      "generated_sql": "SELECT COUNT(*) FROM poker_player",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7371859550476074,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "List the earnings of poker players in descending order.",
      "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "generated_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6355645656585693,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the votes of elections in descending order.",
          "query": "SELECT Votes FROM election ORDER BY Votes DESC"
        },
        {
          "question": "List the name of enzymes in descending lexicographical order.",
          "query": "SELECT name FROM enzyme ORDER BY name DESC"
        },
        {
          "question": "List the total points of gymnasts in descending order.",
          "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the earnings of poker players, ordered descending by value?",
      "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "generated_sql": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6510491371154785,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and headquarters of all companies ordered by descending market value?",
          "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC"
        },
        {
          "question": "What are the official names of cities, ordered descending by population?",
          "query": "SELECT Official_Name FROM city ORDER BY Population DESC"
        },
        {
          "question": "What are the names of the wrestlers, ordered descending by days held?",
          "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "List the final tables made and the best finishes of poker players.",
      "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
      "generated_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6551470756530762,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the companies and the investors of entrepreneurs.",
          "query": "SELECT Company ,  Investor FROM entrepreneur"
        },
        {
          "question": "List the wheels and locations of the railways.",
          "query": "SELECT Wheels ,  LOCATION FROM railway"
        },
        {
          "question": "List the dates and vote percents of elections.",
          "query": "SELECT Date ,  Vote_Percent FROM election"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the final tables made and best finishes for all poker players?",
      "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
      "generated_sql": "SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7179386615753174,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and distances for all airplanes?",
          "query": "SELECT name ,  distance FROM Aircraft"
        },
        {
          "question": "What are the areas and counties for all appelations?",
          "query": "SELECT Area ,  County FROM APPELLATIONS"
        },
        {
          "question": "What are the names, classes, and dates for all races?",
          "query": "SELECT name ,  CLASS ,  date FROM race"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players?",
      "gold_sql": "SELECT avg(Earnings) FROM poker_player",
      "generated_sql": "SELECT AVG(Earnings) FROM poker_player",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8134238719940186,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average weight of all players?",
          "query": "SELECT avg(weight) FROM Player"
        },
        {
          "question": "What is the average training hours of all players?",
          "query": "SELECT avg(HS) FROM Player"
        },
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the average earnings across all poker players.",
      "gold_sql": "SELECT avg(Earnings) FROM poker_player",
      "generated_sql": "SELECT avg(T1.Earnings) FROM poker_player AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6344709396362305,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the average age across all gymnasts.",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Return the average age across all artists.",
          "query": "SELECT avg(Age) FROM artist"
        },
        {
          "question": "Return the average money requested across all entrepreneurs.",
          "query": "SELECT avg(Money_Requested) FROM entrepreneur"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the money rank of the poker player with the highest earnings?",
      "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
      "generated_sql": "SELECT Money_Rank \nFROM poker_player \nORDER BY Earnings DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6942400932312012,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the deparment with the highest enrollment?",
          "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the product with the highest price?",
          "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1"
        },
        {
          "question": "What is the author of the submission with the highest score?",
          "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the money rank of the player with the greatest earnings.",
      "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
      "generated_sql": "SELECT T1.Money_Rank \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8188440799713135,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the duration of the actor with the greatest age.",
          "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
        },
        {
          "question": "Return the name of the mountain with the greatest height.",
          "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
        },
        {
          "question": "Return the age of the person with the greatest height.",
          "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
      "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
      "generated_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.687997579574585,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of players who have points less than 30 for each position?",
          "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION"
        },
        {
          "question": "What is the number of colleges with a student population greater than 15000?",
          "query": "SELECT count(*) FROM College WHERE enr  >  15000"
        },
        {
          "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
          "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
      "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
      "generated_sql": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8443970680236816,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the maximum enrollment across all schools.",
          "query": "SELECT max(Enrollment) FROM university"
        },
        {
          "question": "What are the names of all directors who have made one movie except for the director named NULL?",
          "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
        },
        {
          "question": "What are the names of all employees who have a salary higher than average?",
          "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7876067161560059,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of gymnasts?",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "What are the names of entrepreneurs?",
          "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
        },
        {
          "question": "What are the names of perpetrators?",
          "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the names of all the poker players.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8195135593414307,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of the gymnasts.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Return the names of entrepreneurs.",
          "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
        },
        {
          "question": "What are the names of all the physicians who took appointments.",
          "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players whose earnings is higher than 300000?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8465092182159424,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of body builders whose total score is higher than 300?",
          "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300"
        },
        {
          "question": "What are the names of perpetrators whose country is not \"China\"?",
          "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\""
        },
        {
          "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Give the names of poker players who have earnings above 300000.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7855920791625977,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of players who have the best dribbling?",
          "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)"
        },
        {
          "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
        },
        {
          "question": "List the names of all left-footed players who have overall rating between 85 and 90.",
          "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "List the names of poker players ordered by the final tables made in ascending order.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.731919527053833,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of players in ascending order of votes.",
          "query": "SELECT Player_name FROM player ORDER BY Votes ASC"
        },
        {
          "question": "List the names of gymnasts in ascending order by their heights.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
        },
        {
          "question": "List the names and birthdays of the top five players in terms of potential.",
          "query": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7827324867248535,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what are the names of the ships ordered by ascending tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage ASC"
        },
        {
          "question": "What are the names of gymnasts, ordered by their heights ascending?",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
        },
        {
          "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
          "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the birth date of the poker player with the lowest earnings?",
      "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
      "generated_sql": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8699829578399658,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the date of the performance with the highest number of attendees?",
          "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
        },
        {
          "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
          "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the department name of the students with lowest gpa belongs to?",
          "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the birth date of the poker player with the lowest earnings.",
      "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
      "generated_sql": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8160555362701416,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the date of birth for all the guests with gender code \"Male\".",
          "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
        },
        {
          "question": "Return the total points of the gymnast with the lowest age.",
          "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
        },
        {
          "question": "Return the primary conference of the school with the lowest acc percentage score.",
          "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the money rank of the tallest poker player?",
      "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "generated_sql": "SELECT T1.Money_Rank \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Height DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8721837997436523,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the age of the tallest person?",
          "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
        },
        {
          "question": "What is the most common hometown of gymnasts?",
          "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the least popular kind of decor?",
          "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the money rank of the poker player with the greatest height.",
      "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "generated_sql": "SELECT T1.Money_Rank \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Height DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9030845165252686,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the name of the mountain with the greatest height.",
          "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
        },
        {
          "question": "Return the name of the party with the most members.",
          "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the total points of the gymnast with the lowest age.",
          "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players with height higher than 200?",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "generated_sql": "SELECT avg(T1.Earnings) \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T2.Height > 200",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.883228063583374,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average total score of body builders with height bigger than 200?",
          "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200"
        },
        {
          "question": "What is the total kills of the perpetrators with height more than 1.84.",
          "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84"
        },
        {
          "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
          "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Give average earnings of poker players who are taller than 200.",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "generated_sql": "SELECT AVG(T1.Earnings) \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T2.Height > 200",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8172469139099121,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what are the name of players who get more than the average points.",
          "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"
        },
        {
          "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
          "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85"
        },
        {
          "question": "What are the different names of friends who are younger than the average age for a friend?",
          "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players in descending order of earnings?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7546460628509521,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of representatives in descending order of votes?",
          "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"
        },
        {
          "question": "What are the names of body builders in descending order of total scores?",
          "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC"
        },
        {
          "question": "What are the lifespans of representatives in descending order of vote percent?",
          "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the names of poker players sorted by their earnings descending.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7784793376922607,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of players and names of their coaches.",
          "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
        },
        {
          "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
          "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
        },
        {
          "question": "List the names of gymnasts in ascending order by their heights.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are different nationalities of people and the corresponding number of people from each nation?",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "generated_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7361774444580078,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
          "query": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality"
        },
        {
          "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
          "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor"
        },
        {
          "question": "Show the different nationalities and the number of journalists of each nationality.",
          "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "How many people are there of each nationality?",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "generated_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8112821578979492,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many customers are there of each gender?",
          "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
        },
        {
          "question": "How many documents are there of each type?",
          "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"
        },
        {
          "question": "How many students are there for each major?",
          "query": "SELECT major ,  count(*) FROM Student GROUP BY major"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What is the most common nationality of people?",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7000389099121094,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the most common birth place of people?",
          "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common type of ships?",
          "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common result of the music festival?",
          "query": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Give the nationality that is most common across all people.",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8161759376525879,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the color description that is most common across all products.",
          "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common status across all cities?",
          "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Return the flag that is most common among all ships.",
          "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the nationalities that are shared by at least two people?",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6795053482055664,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the birth places that are shared by at least two people?",
          "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the countries that have at least two perpetrators?",
          "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"
        },
        {
          "question": "What are the investors that have invested in at least two entrepreneurs?",
          "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Return the nationalities for which there are two or more people.",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(People_ID) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6736459732055664,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the rank for which there are the fewest captains.",
          "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What are the codes of types of documents of which there are for or more?",
          "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4"
        },
        {
          "question": "Give the districts which have two or more addresses.",
          "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "List the names and birth dates of people in ascending alphabetical order of name.",
      "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
      "generated_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6860165596008301,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the personal names and family names of all the students in alphabetical order of family name.",
          "query": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name"
        },
        {
          "question": "What are the names and location of the shops in ascending alphabetical order of name.",
          "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC"
        },
        {
          "question": "Find the first names and last names of teachers in alphabetical order of last name.",
          "query": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
      "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
      "generated_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6487619876861572,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all the video games and their types in alphabetical order?",
          "query": "SELECT gname ,  gtype FROM Video_games ORDER BY gname"
        },
        {
          "question": "What are the names of the courses in alphabetical order?",
          "query": "SELECT course_name FROM courses ORDER BY course_name"
        },
        {
          "question": "What are the names of all people, ordered by their date of birth?",
          "query": "SELECT name FROM people ORDER BY date_of_birth"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Show names of people whose nationality is not \"Russia\".",
      "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "generated_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6738059520721436,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of climbers whose country is not Switzerland.",
          "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
        },
        {
          "question": "List the names of countries whose language is not \"German\".",
          "query": "SELECT Name FROM country WHERE Languages != \"German\""
        },
        {
          "question": "What are the names of enzymes whose product is not 'Heme'?",
          "query": "SELECT name FROM enzyme WHERE product != 'Heme'"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of people who are not from Russia?",
      "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "generated_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7269444465637207,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of people who are not entrepreneurs?",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
        },
        {
          "question": "What are the names of climbers who are not from the country of Switzerland?",
          "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
        },
        {
          "question": "What are the names of people who are shorter than average?",
          "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "List the names of people that are not poker players.",
      "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "generated_sql": "SELECT Name \nFROM people \nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8014142513275146,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of people that are not entrepreneurs.",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
        },
        {
          "question": "List the names of people that are not perpetrators.",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"
        },
        {
          "question": "List the names of people that are not employed by any company",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of people who do not play poker?",
      "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "generated_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6610307693481445,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of people who are not entrepreneurs?",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
        },
        {
          "question": "What are the names of customers who do not have saving accounts?",
          "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"
        },
        {
          "question": "what are the names of people who did not participate in the candidate election.",
          "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "How many distinct nationalities are there?",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
      "generated_sql": "SELECT COUNT(DISTINCT Nationality) FROM people",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6840460300445557,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many distinct allergies are there?",
          "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
        },
        {
          "question": "How many distinct companies are there?",
          "query": "SELECT count(DISTINCT Company) FROM entrepreneur"
        },
        {
          "question": "How many distinct governors are there?",
          "query": "SELECT count(DISTINCT Governor) FROM party"
        }
      ]
    },
    {
      "db_id": "poker_player",
      "question": "Count the number of different nationalities.",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
      "generated_sql": "SELECT COUNT(DISTINCT p.Nationality) \nFROM people p \nJOIN poker_player pp \nON p.People_ID = pp.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6939342021942139,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of different statuses.",
          "query": "SELECT count(DISTINCT Status) FROM city"
        },
        {
          "question": "Count the number of different parties.",
          "query": "SELECT count(DISTINCT party_name) FROM party"
        },
        {
          "question": "Count the number of different companies.",
          "query": "SELECT count(DISTINCT Company) FROM entrepreneur"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "How many states are there?",
      "gold_sql": "SELECT count(*) FROM area_code_state",
      "generated_sql": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6494729518890381,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "List the contestant numbers and names, ordered by contestant name descending.",
      "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
      "generated_sql": "SELECT contestant_number, contestant_name \nFROM CONTESTANTS \nORDER BY contestant_name DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6587703227996826,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the id, genre and artist name of English songs ordered by rating.",
          "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"
        },
        {
          "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
          "query": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name"
        },
        {
          "question": "List the names of all courses ordered by their titles and credits.",
          "query": "SELECT title FROM course ORDER BY title ,  credits"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "List the vote ids, phone numbers and states of all votes.",
      "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
      "generated_sql": "SELECT vote_id, phone_number, state FROM VOTES",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6733071804046631,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the phone numbers of all employees.",
          "query": "SELECT Phone FROM EMPLOYEE"
        },
        {
          "question": "List the ids, names and market shares of all browsers.",
          "query": "SELECT id ,  name ,  market_share FROM browser"
        },
        {
          "question": "What are the phone numbers of all customers and suppliers.",
          "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What are the maximum and minimum values of area codes?",
      "gold_sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
      "generated_sql": "SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.868736743927002,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the maximum and minimum budget of the departments?",
          "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"
        },
        {
          "question": "What are the maximum and minimum population of the counties?",
          "query": "SELECT max(Population) ,  min(Population) FROM county"
        },
        {
          "question": "What are the minimum and maximum vote percents of elections?",
          "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What is last date created of votes from the state 'CA'?",
      "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
      "generated_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6536026000976562,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the last date of the staff leaving the projects?",
          "query": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"
        },
        {
          "question": "What is the last name of the youngest student?",
          "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
        },
        {
          "question": "What is average enrollment of colleges in the state FL?",
          "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
      "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
      "generated_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.614992618560791,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of companies whose headquarters are not \"USA\"?",
          "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'"
        },
        {
          "question": "What are the names of enzymes whose product is not 'Heme'?",
          "query": "SELECT name FROM enzyme WHERE product != 'Heme'"
        },
        {
          "question": "What are the names of representatives whose party is not \"Republican\"?",
          "query": "SELECT Name FROM Representative WHERE Party != \"Republican\""
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What are the distinct states and create time of all votes?",
      "gold_sql": "SELECT DISTINCT state ,  created FROM votes",
      "generated_sql": "SELECT DISTINCT state, created FROM VOTES",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.775648832321167,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are all the distinct details of the customers?",
          "query": "SELECT DISTINCT customer_details FROM Customers"
        },
        {
          "question": "What are the names and locations of all tracks?",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "What are the distinct unit prices of all tracks?",
          "query": "SELECT distinct(UnitPrice) FROM TRACK"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
      "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.contestant_number, T1.contestant_name \nFROM CONTESTANTS AS T1 \nJOIN VOTES AS T2 \nON T1.contestant_number = T2.contestant_number \nGROUP BY T1.contestant_number \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8540911674499512,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and names of the architects who built at least 3 bridges ?",
          "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"
        },
        {
          "question": "What are the id and details of the customers who have at least 3 events?",
          "query": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"
        },
        {
          "question": "What are the names of parties with at least 2 events?",
          "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
      "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.contestant_number, T1.contestant_name \nFROM CONTESTANTS AS T1 \nJOIN VOTES AS T2 \nON T1.contestant_number = T2.contestant_number \nGROUP BY T1.contestant_number \nORDER BY COUNT(*) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9238786697387695,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the player with the largest number of votes?",
          "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
        },
        {
          "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
          "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the customer first, last name and id with least number of accounts.",
          "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What are the number of votes from state 'NY' or 'CA'?",
      "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
      "generated_sql": "SELECT COUNT(vote_id) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7382290363311768,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the life spans of representatives from New York state or Indiana state?",
          "query": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""
        },
        {
          "question": "What is the average number of customers across banks in the state of Utah?",
          "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'"
        },
        {
          "question": "What are the total number of domestic passengers at all London airports?",
          "query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "How many contestants did not get voted?",
      "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
      "generated_sql": "SELECT count(*) \nFROM CONTESTANTS \nWHERE contestant_number NOT IN ( \n  SELECT contestant_number \n  FROM VOTES \n)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9172821044921875,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many events did not have any participants?",
          "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
        },
        {
          "question": "How many customers did not have any event?",
          "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )"
        },
        {
          "question": "How many tourists did not make any visit?",
          "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What is the area code in which the most voters voted?",
      "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.area_code \nFROM AREA_CODE_STATE AS T1 \nJOIN VOTES AS T2 \nON T1.state = T2.state \nGROUP BY T1.area_code \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7868340015411377,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the year in which most ships were built?",
          "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common amenity in the dorms?",
          "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the area for the appelation which produced the most wines prior to 2010?",
          "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
      "gold_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
      "generated_sql": "SELECT T1.created, T1.state, T1.phone_number \nFROM VOTES AS T1 \nJOIN CONTESTANTS AS T2 \nON T1.contestant_number = T2.contestant_number \nWHERE T2.contestant_name = 'Tabatha Gehling'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8460907936096191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the phone numbers of all customers and suppliers.",
          "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"
        },
        {
          "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
          "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
        },
        {
          "question": "What are the names and cities of bank branches that offer loans for business?",
          "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
        }
      ]
    },
    {
      "db_id": "voter_1",
      "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
      "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "voter_1",
      "question": "Return the names of the contestants whose names contain the substring 'Al' .",
      "gold_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
      "generated_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE \"%Al%\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.687554121017456,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of the gymnasts.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Find the name of organizations whose names contain \"Party\".",
          "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\""
        },
        {
          "question": "What are the names of documents that contain the substring \"CV\"?",
          "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the names of all the countries that became independent after 1950?",
      "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
      "generated_sql": "SELECT Name FROM country WHERE IndepYear > 1950;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7184479236602783,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all the playlists?",
          "query": "SELECT name FROM playlists;"
        },
        {
          "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
          "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
        },
        {
          "question": "What are the titles of all movies that James Cameron directed after 2000?",
          "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the names of the nations that were founded after 1950.",
      "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
      "generated_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6683371067047119,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of regions that were not affected?",
          "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
        },
        {
          "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
          "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'"
        },
        {
          "question": "Find the schools that were either founded after 1850 or public.",
          "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many countries have a republic as their form of government?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7217893600463867,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many employees have a first name of Ludie?",
          "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";"
        },
        {
          "question": "How many rooms have a king bed?",
          "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"
        },
        {
          "question": "How many rooms in each building have a capacity of over 50?",
          "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many countries have governments that are republics?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7911069393157959,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many countries are there in total?",
          "query": "SELECT count(*) FROM country"
        },
        {
          "question": "How many customers have email that contains \"gmail.com\"?",
          "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
        },
        {
          "question": "How many courses that do not have prerequisite?",
          "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total surface area of the countries in the Caribbean region?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
      "generated_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.718320369720459,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the number of departments in Division \"AS\"?",
          "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\""
        },
        {
          "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
          "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How much surface area do the countires in the Carribean cover together?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
      "generated_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7010407447814941,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many schools do not participate in the basketball match?",
          "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
        },
        {
          "question": "How many females are in the network?",
          "query": "SELECT count(*) FROM Person WHERE gender  =  'female'"
        },
        {
          "question": "How many different cities do have some airport in the country of Greenland?",
          "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which continent is Anguilla in?",
      "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
      "generated_sql": "SELECT T2.Continent \nFROM city AS T1 \nINNER JOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T1.Name = 'Anguilla'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7671346664428711,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which city is post code 255 located in?",
          "query": "SELECT city FROM addresses WHERE zip_postcode  =  255"
        },
        {
          "question": "Which city does the student whose last name is \"Kim\" live in?",
          "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""
        },
        {
          "question": "Which grade is studying in classroom 103?",
          "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  103"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the continent name which Anguilla belongs to?",
      "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
      "generated_sql": "SELECT Continent \nFROM country \nWHERE Name = \"Anguilla\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6808409690856934,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
          "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
        },
        {
          "question": "What is the code of the category that the product with the name 'flax' belongs to?",
          "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\""
        },
        {
          "question": "What is the code of the school where the accounting department belongs to?",
          "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which region is the city Kabul located in?",
      "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
      "generated_sql": "SELECT T2.Region \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T1.Name = \"Kabul\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7751545906066895,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which city is post code 255 located in?",
          "query": "SELECT city FROM addresses WHERE zip_postcode  =  255"
        },
        {
          "question": "Which city is the address of the store named \"FJA Filming\" located in?",
          "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""
        },
        {
          "question": "Which city is the headquarter of the store named \"Blackville\" in?",
          "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What region is Kabul in?",
      "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
      "generated_sql": "SELECT T1.Region \nFROM country AS T1 \nJOIN city AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Name = \"Kabul\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7466623783111572,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the description of the marketing region China?",
          "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\""
        },
        {
          "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
          "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"
        },
        {
          "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
          "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which language is the most popular in Aruba?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
      "generated_sql": "SELECT Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW' \nORDER BY Percentage DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8650879859924316,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which position is most popular among players in the tryout?",
          "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which campus has the most faculties in year 2003?",
          "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
        },
        {
          "question": "Which park did the most people attend in 2008?",
          "query": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What language is predominantly spoken in Aruba?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
      "generated_sql": "SELECT Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW' \nORDER BY Percentage DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7581048011779785,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the language used most often in the songs?",
          "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
          "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"
        },
        {
          "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
          "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the population and life expectancies in Brazil?",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "generated_sql": "SELECT Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7308261394500732,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name and population of each county?",
          "query": "SELECT County_name ,  Population FROM county"
        },
        {
          "question": "What are the average rating and resolution of songs that are in Bangla?",
          "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
        },
        {
          "question": "What are the public schools and what are their locations?",
          "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give me Brazil\u2019s population and life expectancies.",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "generated_sql": "SELECT Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7152040004730225,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give me the theme and location of each party.",
          "query": "SELECT Party_Theme ,  LOCATION FROM party"
        },
        {
          "question": "Give me the name and description of the document type code RV.",
          "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
        },
        {
          "question": "Give me the name and description of the location with code x.",
          "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the region and population of Angola?",
      "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
      "generated_sql": "SELECT Region, Population \nFROM country \nWHERE Name = 'Angola'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6942305564880371,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name and population of each county?",
          "query": "SELECT County_name ,  Population FROM county"
        },
        {
          "question": "What are the first name and last name of all the instructors?",
          "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""
        },
        {
          "question": "What are the staff roles of the staff who",
          "query": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What region does Angola belong to and what is its population?",
      "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
      "generated_sql": "SELECT Region, Population \nFROM country \nWHERE Name = 'Angola'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6851930618286133,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total amount of grant money given to each organization and what is its id?",
          "query": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id"
        },
        {
          "question": "How many credits does course CIS-220 have, and what its description?",
          "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'"
        },
        {
          "question": "What is the description for the CIS-220 and how many credits does it have?",
          "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
      "generated_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8342413902282715,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average number of attendees for performances?",
          "query": "SELECT avg(Attendance) FROM performance"
        },
        {
          "question": "What is the average fee for a CSU campus in the year of 1996?",
          "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
        },
        {
          "question": "What is the average fee for a CSU campus in the year of 2005?",
          "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How long is the people\u2019s average life expectancy in Central Africa?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
      "generated_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7111649513244629,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average balance in checking accounts?",
          "query": "SELECT avg(balance) FROM checking"
        },
        {
          "question": "What is the average age and how many male students are there in each city?",
          "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
        },
        {
          "question": "What is the average latitude and longitude in San Jose?",
          "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the name of country that has the shortest life expectancy in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY LifeExpectancy ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7206366062164307,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what is the name of the country that participated in the most tournament competitions?",
          "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
          "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"
        },
        {
          "question": "What is the name of the student who has the highest total credits in the History department.",
          "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the name of the country in Asia with the lowest life expectancy.",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY LifeExpectancy \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7604317665100098,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the name of the department with the lowest budget.",
          "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
        },
        {
          "question": "Give the name of the lowest earning instructor in the Statistics department.",
          "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"
        },
        {
          "question": "Give the name of the student in the History department with the most credits.",
          "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total population and maximum GNP in Asia?",
      "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
      "generated_sql": "SELECT sum(Population), max(GNP) \nFROM country \nWHERE Continent = 'Asia'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7112648487091064,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average and total transaction amount?",
          "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
        },
        {
          "question": "What is the total and maximum duration of trips with bike id 636?",
          "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
        },
        {
          "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
          "query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Asia, and what is the largest GNP among them?",
      "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
      "generated_sql": "SELECT \n    SUM(T1.Population) AS total_population, \n    MAX(T2.GNP) AS largest_GNP\nFROM \n    city AS T1\nJOIN \n    country AS T2\nON \n    T1.CountryCode = T2.Code\nWHERE \n    T2.Continent = 'Asia'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8498644828796387,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the department names and how many employees work in each of them?",
          "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
        },
        {
          "question": "What is the average age and how many male students are there in each city?",
          "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"
        },
        {
          "question": "How many customers live in the city of Prague?",
          "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the average life expectancy in African countries that are republics?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.823394775390625,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
          "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
        },
        {
          "question": "What are the average rating and resolution of songs that are in Bangla?",
          "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
        },
        {
          "question": "What is the average capacity of the stadiums that were opened in year 2005?",
          "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the average life expectancy for countries in Africa which are republics?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7207291126251221,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which channels are broadcast in the morning? Give me the channel names.",
          "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"
        },
        {
          "question": "What are the average prominence of the mountains in country 'Morocco'?",
          "query": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'"
        },
        {
          "question": "What is the average age for a male in each job?",
          "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total surface area of the continents Asia and Europe?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "generated_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent IN ('Asia', 'Europe');",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7331902980804443,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total and minimum enrollment of all schools?",
          "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university"
        },
        {
          "question": "What is the total and maximum duration of trips with bike id 636?",
          "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"
        },
        {
          "question": "What is the number of invoices and total money billed in them from CA?",
          "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the total surface area covered by countries in Asia or Europe.",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "generated_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Asia' OR Continent = 'Europe'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7127742767333984,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the number of students living in either HKG or CHI.",
          "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
        },
        {
          "question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.",
          "query": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'"
        },
        {
          "question": "Find the total budgets of the Marketing or Finance department.",
          "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Gelderland district?",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "generated_sql": "SELECT COUNT(*) \nFROM city \nWHERE District = \"Gelderland\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7068741321563721,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many employees live in Canada?",
          "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
        },
        {
          "question": "How many employees live in Georgia?",
          "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";"
        },
        {
          "question": "How many customers live in Prague city?",
          "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total population of Gelderland district?",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "generated_sql": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7263922691345215,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the title of the newest movie?",
          "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
        },
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the average GNP and total population in all nations whose government is US territory?",
      "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
      "generated_sql": "SELECT avg(GNP), sum(Population) \nFROM country \nWHERE GovernmentForm = 'US territory'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8523633480072021,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average and total transaction amount?",
          "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
        },
        {
          "question": "What is the average latitude and longitude in San Jose?",
          "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""
        },
        {
          "question": "What is the average and total capacity for all dorms who are of gender X?",
          "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the mean GNP and total population of nations which are considered US territory.",
      "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
      "generated_sql": "SELECT AVG(T1.GNP), SUM(T1.Population) \nFROM country AS T1 \nWHERE T1.Code IN (\n    SELECT T2.CountryCode \n    FROM city AS T2 \n    WHERE T2.CountryCode IN (\n        SELECT T3.Code \n        FROM country AS T3 \n        WHERE T3.Region = 'North America' \n        AND T3.Continent = 'North America'\n    )\n);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9634449481964111,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
          "query": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID"
        },
        {
          "question": "What is the average and total capacity for all dorms who are of gender X?",
          "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'"
        },
        {
          "question": "List the number of invoices and the invoice total from California.",
          "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many unique languages are spoken in the world?",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "generated_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7433528900146484,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many languages are in these films?",
          "query": "SELECT count(DISTINCT language_id) FROM film"
        },
        {
          "question": "How many females are in the network?",
          "query": "SELECT count(*) FROM Person WHERE gender  =  'female'"
        },
        {
          "question": "How many dorms are in the database?",
          "query": "SELECT count(*) FROM dorm"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct languages used around the world?",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "generated_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9540853500366211,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of distinct publication dates?",
          "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
        },
        {
          "question": "What is the number of employees?",
          "query": "SELECT count(*) FROM Employee"
        },
        {
          "question": "What is the number of flights?",
          "query": "SELECT count(*) FROM Flight"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many type of governments are in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8991093635559082,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many addresses are in the district of California?",
          "query": "SELECT count(*) FROM address WHERE district  =  'California'"
        },
        {
          "question": "How many campuses exist are in the county of LA?",
          "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\""
        },
        {
          "question": "How many parks are there in the state of NY?",
          "query": "SELECT count(*) FROM park WHERE state  =  'NY';"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many different forms of governments are there in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7606403827667236,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different genders are there in the dorms?",
          "query": "SELECT count(DISTINCT gender) FROM dorm"
        },
        {
          "question": "How many parks are there in the state of NY?",
          "query": "SELECT count(*) FROM park WHERE state  =  'NY';"
        },
        {
          "question": "In how many cities are there airports in the country of Greenland?",
          "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of languages used in Aruba?",
      "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
      "generated_sql": "SELECT COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7049760818481445,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What are the total number of students enrolled in ACCT-211?",
          "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"
        },
        {
          "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
          "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many languages are spoken in Aruba?",
      "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.Name = 'Aruba'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9944713115692139,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many languages are in these films?",
          "query": "SELECT count(DISTINCT language_id) FROM film"
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "How many leagues are there in England?",
          "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many official languages does Afghanistan have?",
      "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(T1.Language) \nFROM countrylanguage AS T1 \nWHERE T1.CountryCode = 'AFG' AND T1.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8390359878540039,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many friends does Dan have?",
          "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
        },
        {
          "question": "How many cards does customer Art Turcotte have?",
          "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
        },
        {
          "question": "How many credit cards does customer Blanche Huels have?",
          "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many official languages are spoken in Afghanistan?",
      "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE CountryCode = 'AFG' AND IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8657429218292236,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many languages are in these films?",
          "query": "SELECT count(DISTINCT language_id) FROM film"
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        },
        {
          "question": "How many leagues are there in England?",
          "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is name of the country that speaks the largest number of languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nGROUP BY T1.Code \nORDER BY COUNT(T2.Language) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8107254505157471,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department that has the largest number of students enrolled?",
          "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the customer who has the largest number of orders?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the name of the nation that uses the greatest amount of languages.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nGROUP BY T1.Code \nORDER BY COUNT(T2.Language) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7910070419311523,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name of bank branch that provided the greatest total amount of loans.",
          "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the bank branch that has lent the greatest amount?",
          "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which continent has the most diverse languages?",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Continent \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nGROUP BY T1.Continent \nORDER BY COUNT(DISTINCT T2.Language) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.814525842666626,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which artist has the most albums?",
          "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which song has the most vocals?",
          "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which city has hosted the most events?",
          "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which continent speaks the most languages?",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Continent \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nGROUP BY T1.Continent \nORDER BY COUNT(DISTINCT T2.Language) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8228573799133301,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which allergy is the most common?",
          "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which artist has the most albums?",
          "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which song has the most vocals?",
          "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many countries speak both English and Dutch?",
      "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What is the number of nations that use English and Dutch?",
      "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What are the names of nations speak both English and French?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of nations that speak both English and French.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What are the names of nations where both English and French are official languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries with English and French as official languages.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct continents where Chinese is spoken?",
      "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Continent) \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language = 'Chinese'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9519908428192139,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the number of distinct publication dates?",
          "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
        },
        {
          "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the average number of votes of representatives from party \"Republican\"?",
          "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many continents speak Chinese?",
      "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Continent) \nFROM countrylanguage AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T1.Language = 'Chinese'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8347928524017334,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many reviewers listed?",
          "query": "SELECT count(*) FROM Reviewer"
        },
        {
          "question": "How many students attend course English?",
          "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
        },
        {
          "question": "How many cities are in Australia?",
          "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the regions that use English or Dutch?",
      "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.815955638885498,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of regions that were not affected?",
          "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
        },
        {
          "question": "What are the names of the tracks that are Rock or Jazz songs?",
          "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
        },
        {
          "question": "What are the names of the storms that affected Denmark?",
          "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which regions speak Dutch or English?",
      "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
      "generated_sql": "SELECT DISTINCT T1.Region \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language = 'Dutch' OR T2.Language = 'English'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8027479648590088,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which party has two or more records?",
          "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Which clubs have one or more members whose advisor is \"1121\"?",
          "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121"
        },
        {
          "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
          "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the countries where either English or Dutch is the official language ?",
      "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9205350875854492,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the official languages of the countries of players from Maryland or Duke college?",
          "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""
        },
        {
          "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
          "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
        },
        {
          "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which countries have either English or Dutch as an official language?",
      "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language = 'English' AND T2.IsOfficial = 'T' \nUNION \nSELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language = 'Dutch' AND T2.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0748400688171387,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which papers have \"Stephanie Weirich\" as an author?",
          "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""
        },
        {
          "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
          "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"
        },
        {
          "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
          "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which language is the most popular on the Asian continent?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.Continent = 'Asia' \nGROUP BY T2.Language \nORDER BY SUM(T2.Percentage) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1740877628326416,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which allergy is the most common?",
          "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which department has the most professors with a Ph.D.?",
          "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the emails of parties with the most popular party form.",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the language that is used by the largest number of Asian nations?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Language \nFROM countrylanguage AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T2.Continent = 'Asia' \nGROUP BY T1.Language \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9843673706054688,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the party that has the largest number of representatives?",
          "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
          "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
        },
        {
          "question": "What is the name of the airport with the most number of routes that start in China?",
          "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which languages are spoken by only one country in republic governments?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.GovernmentForm = 'Republic' \nGROUP BY T2.Language \nHAVING COUNT(DISTINCT T1.Code) = 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9581000804901123,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the year in which there are more than one festivals.",
          "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1"
        },
        {
          "question": "What are the names and number of works for all artists who have sung at least one song in English?",
          "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
        },
        {
          "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
          "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What languages are only used by a single country with a republic government?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
      "generated_sql": "SELECT T1.Language \nFROM countrylanguage AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T2.GovernmentForm = 'Republic' \nGROUP BY T1.Language \nHAVING COUNT(DISTINCT T1.CountryCode) = 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9214880466461182,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are all the instruments used by the musician with the last name \"Heilo\"?",
          "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""
        },
        {
          "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
          "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"
        },
        {
          "question": "What are the names and number of works for all artists who have sung at least one song in English?",
          "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Find the city with the largest population that uses English.",
      "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN countrylanguage AS T2 \nON T1.CountryCode = T2.CountryCode \nWHERE T2.Language = 'English' \nORDER BY T1.Population DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8244693279266357,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the GDP of the city with the largest regional population.",
          "query": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
        },
        {
          "question": "Find the entry names of the catalog with the attribute that have the most entries.",
          "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "Find the name of the tryout players who are from the college with largest size.",
          "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the most populace city that speaks English?",
      "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nJOIN countrylanguage AS T3 \nON T2.Code = T3.CountryCode \nWHERE T3.Language = 'English' \nORDER BY T1.Population DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.915912389755249,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the city with the most customers?",
          "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "What is the county that produces the most wines scoring higher than 90?",
          "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What are the party emails associated with parties that used the party form that is the most common?",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Find the name, population and expected life length of asian country with the largest area?",
      "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT Name, Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia' \nAND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia');",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9066779613494873,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name and population of district with population between 200000 and 2000000",
          "query": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"
        },
        {
          "question": "Find the name of the tryout players who are from the college with largest size.",
          "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
        },
        {
          "question": "Find the first and last name of students who are not in the largest major.",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
      "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT Name, Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9378457069396973,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name, origin and owner of each program?",
          "query": "SELECT name ,  origin ,  OWNER FROM program"
        },
        {
          "question": "What are the names of all the stores in the largest district by population?",
          "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
        },
        {
          "question": "What is the first and last name of the students who are not in the largest major?",
          "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is average life expectancy in the countries where English is not the official language?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
      "generated_sql": "SELECT AVG(T1.LifeExpectancy) \nFROM country AS T1 \nWHERE T1.Code NOT IN (\n  SELECT T2.CountryCode \n  FROM countrylanguage AS T2 \n  WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9583814144134521,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average bike availablility for stations not in Palo Alto?",
          "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
        },
        {
          "question": "What is the average price for wines not produced in Sonoma county?",
          "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
        },
        {
          "question": "What is the average age of students who are living in the dorm with the largest capacity?",
          "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the mean life expectancy of countries in which English is not the official language.",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
      "generated_sql": "SELECT AVG(T1.LifeExpectancy) \nFROM country AS T1 \nWHERE T1.Code NOT IN (\n    SELECT T2.CountryCode \n    FROM countrylanguage AS T2 \n    WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8491230010986328,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
          "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
        },
        {
          "question": "What is the average price for wines not produced in Sonoma county?",
          "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"
        },
        {
          "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
          "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of people living in the nations that do not use English?",
      "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Name) \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T2.Code NOT IN (SELECT CountryCode \n                       FROM countrylanguage \n                       WHERE Language = 'English')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9041333198547363,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of people who have no friends living in Austin?",
          "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"
        },
        {
          "question": "What is the average age of students who are living in the dorm with the largest capacity?",
          "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
        },
        {
          "question": "What is the name of the customer that made the order with the largest quantity?",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many people live in countries that do not speak English?",
      "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
      "generated_sql": "SELECT COUNT(*) \nFROM city \nWHERE CountryCode NOT IN (\n  SELECT CountryCode \n  FROM countrylanguage \n  WHERE Language = 'English'\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7411975860595703,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many courses that do not have prerequisite?",
          "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        },
        {
          "question": "How many products are not made by Sony?",
          "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"
        },
        {
          "question": "How many patients are not using Procrastin-X as medication?",
          "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the official language spoken in the country whose head of state is Beatrix?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.814171552658081,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is average enrollment of colleges in the state FL?",
          "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'"
        },
        {
          "question": "What are the names of perpetrators whose country is not \"China\"?",
          "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\""
        },
        {
          "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
          "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8194565773010254,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what is the name of the country that participated in the most tournament competitions?",
          "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of tracks whose genre is Rock?",
          "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
        },
        {
          "question": "What is the name of all tracks in the Rock genre?",
          "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
      "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8481607437133789,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
          "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""
        },
        {
          "question": "What is the total amount of products purchased before 2018-03-17 07:13:53?",
          "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
        },
        {
          "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
          "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
      "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0580508708953857,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of points for all players?",
          "query": "SELECT sum(Points) FROM player"
        },
        {
          "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
          "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
        },
        {
          "question": "What is the total amount of products purchased before 2018-03-17 07:13:53?",
          "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the countries that have greater surface area than any country in Europe?",
      "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.784069299697876,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the countries that have never participated in any friendly-type competitions?",
          "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
        },
        {
          "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
          "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
        },
        {
          "question": "What are the states with colleges that have enrollments less than the some other college?",
          "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which countries have greater area than that of any country in Europe?",
      "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.875579833984375,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which countries have more than one mountain?",
          "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the number of cities in counties that have a population more than 20000.",
          "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
        },
        {
          "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
          "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the African countries that have a  population less than any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Africa' \nAND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.775646448135376,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the countries that have never participated in any friendly-type competitions?",
          "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"
        },
        {
          "question": "What are the different names for all songs that have a higher resolution than English songs?",
          "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
        },
        {
          "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
          "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which African countries have a smaller population than that of any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Africa' \nAND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7708740234375,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the number of cities in counties that have a population more than 20000.",
          "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
        },
        {
          "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
          "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
        },
        {
          "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?",
          "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which Asian countries have a population that is larger than any country in Africa?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nAND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7680699825286865,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the countries of the mountains that have a height larger than 5000.",
          "query": "SELECT Country FROM mountain WHERE Height  >  5000"
        },
        {
          "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
          "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)"
        },
        {
          "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
          "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nAND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8720099925994873,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the countries of the mountains that have a height larger than 5000.",
          "query": "SELECT Country FROM mountain WHERE Height  >  5000"
        },
        {
          "question": "What are the names of the colleges that are larger than at least one college in Florida?",
          "query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"
        },
        {
          "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
          "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes for countries that do not speak English?",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Return the country codes for countries that do not speak English.",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes of countries where people use languages other than English?",
      "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
      "generated_sql": "SELECT T1.Code \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language != 'English'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.763267993927002,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of people who are shorter than average?",
          "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
        },
        {
          "question": "What are the countries of mountains with height bigger than 5000?",
          "query": "SELECT Country FROM mountain WHERE Height  >  5000"
        },
        {
          "question": "What are the names of climbers who are not from the country of Switzerland?",
          "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the country codes for countries in which people speak langauges that are not English.",
      "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
      "generated_sql": "SELECT DISTINCT T1.Code \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nWHERE T2.Language != 'English'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7339205741882324,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the airports which are not in the country 'Iceland'?",
          "query": "SELECT name FROM airport WHERE country != 'Iceland'"
        },
        {
          "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
          "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
        },
        {
          "question": "Count the number of rooms that are not in the Lamberton building.",
          "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
      "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
      "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Which cities are in European countries where English is not the official language?",
      "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T2.Continent = 'Europe' \nEXCEPT \nSELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nJOIN countrylanguage AS T3 \nON T2.Code = T3.CountryCode \nWHERE T2.Continent = 'Europe' AND T3.Language = 'English' AND T3.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0619611740112305,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
          "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\""
        },
        {
          "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
        },
        {
          "question": "Find the names of customers who are not living in the state of California.",
          "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the names of cities in Europe for which English is not the official language?",
      "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T2.Continent = 'Europe' \nEXCEPT \nSELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nJOIN countrylanguage AS T3 \nON T2.Code = T3.CountryCode \nWHERE T2.Continent = 'Europe' AND T3.Language = 'English' AND T3.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.001722812652588,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the airports which are not in the country 'Iceland'?",
          "query": "SELECT name FROM airport WHERE country != 'Iceland'"
        },
        {
          "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
          "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'"
        },
        {
          "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
      "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nJOIN countrylanguage AS T3 \nON T2.Code = T3.CountryCode \nWHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9381437301635742,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
          "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\""
        },
        {
          "question": "Find the name of tracks which are in both Movies and music playlists.",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
        },
        {
          "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
      "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM city AS T1 \nJOIN country AS T2 \nON T1.CountryCode = T2.Code \nJOIN countrylanguage AS T3 \nON T2.Code = T3.CountryCode \nWHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9487192630767822,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and cities of bank branches that offer loans for business?",
          "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"
        },
        {
          "question": "what are the names of the channels that broadcast in both morning and night?",
          "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'"
        },
        {
          "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
          "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the name, independence year, and surface area of the country with the smallest population?",
      "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
      "generated_sql": "SELECT Name, IndepYear, SurfaceArea \nFROM country \nORDER BY Population \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7782435417175293,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name, latitude, and city of the station with the lowest latitude?",
          "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
        },
        {
          "question": "What is the name, city, and country of the airport with the lowest altitude?",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
        },
        {
          "question": "What is the name, city, and country of the airport with the highest elevation?",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
      "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
      "generated_sql": "SELECT Name, IndepYear, SurfaceArea \nFROM country \nORDER BY Population \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8274786472320557,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name, city, and country of the airport that has the lowest altitude.",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
        },
        {
          "question": "Find the name, city, and country of the airport that has the highest latitude.",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"
        },
        {
          "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
          "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the population, name and leader of the country with the largest area?",
      "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT Population, Name, HeadOfState \nFROM country \nORDER BY SurfaceArea DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.71441650390625,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name and location of the cinema with the largest capacity?",
          "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
        },
        {
          "question": "What are the room name and base price of the room with the lowest base price?",
          "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
        },
        {
          "question": "What is the name of the ship with the largest tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the name, population, and head of state for the country that has the largest area.",
      "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT Name, Population, HeadOfState \nFROM country \nORDER BY SurfaceArea DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7385408878326416,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name, city, and country of the airport that has the lowest altitude.",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"
        },
        {
          "question": "Find the name, city, and country of the airport that has the highest latitude.",
          "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"
        },
        {
          "question": "Give the state that has the most customers.",
          "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
      "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
      "generated_sql": "SELECT T1.Name, COUNT(T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nGROUP BY T1.Code \nHAVING COUNT(T2.Language) >= 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8473865985870361,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each party, return the name of the party and the number of delegates from that party.",
          "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"
        },
        {
          "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
          "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
          "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
      "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
      "generated_sql": "SELECT T1.Name, COUNT(T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 \nON T1.Code = T2.CountryCode \nGROUP BY T1.Name \nHAVING COUNT(T2.Language) > 2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8409037590026855,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
          "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"
        },
        {
          "question": "What are the names of the albums that have more than 10 tracks?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
        },
        {
          "question": "What are the names of ships that have more than one captain?",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
      "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
      "generated_sql": "SELECT \n    District, \n    COUNT(*) \nFROM \n    city \nWHERE \n    Population > (SELECT AVG(Population) FROM city) \nGROUP BY \n    District",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7675750255584717,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of different departments in each school whose number of different departments is less than 5.",
          "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
        },
        {
          "question": "Find the number of students whose age is older than the average age for each gender.",
          "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
        },
        {
          "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
          "query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "How many cities in each district have a population that is above the average population across all cities?",
      "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
      "generated_sql": "SELECT District, COUNT(*) \nFROM city \nWHERE Population > (SELECT AVG(Population) FROM city) \nGROUP BY District",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7240285873413086,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many accounts have a savings balance above the average savings balance?",
          "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
        },
        {
          "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
          "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
        },
        {
          "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
          "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
      "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
      "generated_sql": "SELECT GovernmentForm, SUM(Population) \nFROM country \nGROUP BY GovernmentForm \nHAVING AVG(LifeExpectancy) > 72;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9895505905151367,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of students whose age is older than the average age for each gender.",
          "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
        },
        {
          "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
          "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
        },
        {
          "question": "Find the product type whose average price is higher than the average price of all products.",
          "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
      "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
      "generated_sql": "SELECT GovernmentForm, SUM(Population) \nFROM country \nWHERE LifeExpectancy > 72 \nGROUP BY GovernmentForm",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7413945198059082,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
          "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
        },
        {
          "question": "For each movie that received more than 3 reviews, what is the average rating?",
          "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
        },
        {
          "question": "What are total salaries and department id for each department that has more than 2 employees?",
          "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
      "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
      "generated_sql": "SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY Continent\nHAVING AVG(LifeExpectancy) < 72",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8006289005279541,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the total population of the districts where the area is bigger than the average city area.",
          "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"
        },
        {
          "question": "For each movie that received more than 3 reviews, what is the average rating?",
          "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
        },
        {
          "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
          "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
      "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
      "generated_sql": "SELECT \n  Continent, \n  SUM(Population) AS TotalPopulation, \n  AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM \n  country\nGROUP BY \n  Continent\nHAVING \n  AVG(LifeExpectancy) < 72;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8412079811096191,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
          "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
        },
        {
          "question": "What are the codes corresponding to document types for which there are less than 3 documents?",
          "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3"
        },
        {
          "question": "What are total salaries and department id for each department that has more than 2 employees?",
          "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the names and areas of countries with the top 5 largest area?",
      "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "generated_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6849684715270996,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and countries of members?",
          "query": "SELECT Name ,  Country FROM member"
        },
        {
          "question": "What are the names of schools with the top 3 largest size?",
          "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
        },
        {
          "question": "What are the names of the schools with the top 3 largest class sizes?",
          "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the names and surface areas of the 5 largest countries.",
      "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "generated_sql": "SELECT Name, SurfaceArea \nFROM country \nORDER BY SurfaceArea DESC \nLIMIT 5;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6783418655395508,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of the gymnasts.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Return the amount of the largest payment.",
          "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
        },
        {
          "question": "Return the names of people, ordered alphabetically.",
          "query": "SELECT Name FROM People ORDER BY Name ASC"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are names of countries with the top 3 largest population?",
      "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
      "generated_sql": "SELECT Name \nFROM country \nORDER BY Population DESC \nLIMIT 3;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6690230369567871,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of schools with the top 3 largest size?",
          "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
        },
        {
          "question": "What are the names of the schools with the top 3 largest class sizes?",
          "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
        },
        {
          "question": "What are the names of the dorm with the largest capacity?",
          "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the names of the 3 most populated countries.",
      "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
      "generated_sql": "SELECT Name \nFROM country \nORDER BY Population DESC \nLIMIT 3",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7845571041107178,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of the gymnasts.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "What are the names of the 3 departments with the most courses?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
        },
        {
          "question": "Return the names of people, ordered alphabetically.",
          "query": "SELECT Name FROM People ORDER BY Name ASC"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the nations with the 3 lowest populations?",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "generated_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6765573024749756,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the 3 departments with the most courses?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
        },
        {
          "question": "What are the names of schools with the top 3 largest size?",
          "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
        },
        {
          "question": "What are the names of the schools with the top 3 largest class sizes?",
          "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the names of the 3 countries with the fewest people.",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "generated_sql": "SELECT Name \nFROM country \nORDER BY Population ASC \nLIMIT 3",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6893417835235596,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of the gymnasts.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Return the id of the department with the fewest staff assignments.",
          "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
        },
        {
          "question": "What are the names of the 3 departments with the most courses?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "how many countries are in Asia?",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nWHERE Continent = \"Asia\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7476198673248291,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many countries are there in total?",
          "query": "SELECT count(*) FROM country"
        },
        {
          "question": "How many stations are in Mountain View?",
          "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
        },
        {
          "question": "How many employees are living in Canada?",
          "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries in Asia.",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nWHERE Continent = 'Asia'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6999976634979248,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of courses in the Physics department.",
          "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
        },
        {
          "question": "Count the number of addressed in the California district.",
          "query": "SELECT count(*) FROM address WHERE district  =  'California'"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
      "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
      "generated_sql": "SELECT Name \nFROM country \nWHERE Continent = 'Europe' AND Population = 80000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7108347415924072,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and types of the companies that have ever operated a flight?",
          "query": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id"
        },
        {
          "question": "What are the names of cities that are in counties that have a crime rate below 100?",
          "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)"
        },
        {
          "question": "What are the names of parties that do not have delegates in election?",
          "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
      "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
      "generated_sql": "SELECT c.Name \nFROM country AS c \nWHERE c.Continent = 'Europe' AND c.Population = 80000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7728266716003418,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the names of tracks that do not have a race in the class 'GT'.",
          "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
        },
        {
          "question": "What are the names of cities that are in counties that have a crime rate below 100?",
          "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)"
        },
        {
          "question": "What are the names of parties that do not have delegates in election?",
          "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
      "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
      "generated_sql": "SELECT SUM(c.Population), AVG(co.SurfaceArea) \nFROM city c \nJOIN country co ON c.CountryCode = co.Code \nWHERE co.Continent = 'North America' AND co.SurfaceArea > 3000;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.965264081954956,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the total population of the districts where the area is bigger than the average city area.",
          "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"
        },
        {
          "question": "What is the name and building of the departments whose budget is more than the average budget?",
          "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
        },
        {
          "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
          "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
      "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
      "generated_sql": "SELECT SUM(Population), AVG(SurfaceArea) \nFROM country \nWHERE Continent = 'North America' AND SurfaceArea > 3000;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8676204681396484,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the number of cities in counties that have a population more than 20000.",
          "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"
        },
        {
          "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.",
          "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
        },
        {
          "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
          "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the cities whose population is between 160000 and 900000?",
      "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
      "generated_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7021918296813965,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of players whose training hours is between 500 and 1500?",
          "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
        },
        {
          "question": "What are the names of all airports whose elevation is between -50 and 50?",
          "query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"
        },
        {
          "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
          "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the names of cities that have a population between 160000 and 900000 .",
      "gold_sql": "select name from city where population between 160000 and 900000",
      "generated_sql": "SELECT Name \nFROM city \nWHERE Population BETWEEN 160000 AND 900000;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6847851276397705,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names and classes of ships that do not have a captain?",
          "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
        },
        {
          "question": "What are the official names of cities that have not hosted a farm competition?",
          "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
        },
        {
          "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
          "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Which language is spoken by the largest number of countries?",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT Language \nFROM countrylanguage \nGROUP BY Language \nORDER BY count(*) DESC \nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7003867626190186,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the major that is studied by the largest number of students.",
          "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which department has the largest number of employees?",
          "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
        },
        {
          "question": "Find the year which offers the largest number of courses.",
          "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Give the language that is spoken in the most countries.",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT Language \nFROM countrylanguage \nGROUP BY Language \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.659921407699585,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the class of races that is most common.",
          "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the language used most often in the songs?",
          "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Give the state that has the most customers.",
          "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the language spoken by the largest percentage of people in each country?",
      "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
      "generated_sql": "SELECT CountryCode, Language\nFROM countrylanguage\nWHERE (CountryCode, Percentage) IN (\n  SELECT CountryCode, MAX(Percentage)\n  FROM countrylanguage\n  GROUP BY CountryCode\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7449579238891602,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average number of people injured by all perpetrators?",
          "query": "SELECT avg(Injured) FROM perpetrator"
        },
        {
          "question": "What is the code of each role and the number of employees in each role?",
          "query": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code"
        },
        {
          "question": "What is the minimum salary in each department?",
          "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
      "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
      "generated_sql": "SELECT \n  c.Code, \n  cl.Language\nFROM \n  country c\nJOIN \n  countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n  (c.Code, cl.Percentage) IN (\n    SELECT \n      CountryCode, \n      MAX(Percentage) \n    FROM \n      countrylanguage \n    GROUP BY \n      CountryCode\n  )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.912182092666626,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the different role codes for users, and how many users have each?",
          "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code"
        },
        {
          "question": "What are the different statement ids on accounts, and the number of accounts for each?",
          "query": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID"
        },
        {
          "question": "What are the average and minimum weights for people of each sex?",
          "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7095072269439697,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of students?",
          "query": "SELECT count(*) FROM Student"
        },
        {
          "question": "What is the number of players who have points less than 30 for each position?",
          "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION"
        },
        {
          "question": "What is the average salary of employees who have a commission percentage that is not null?",
          "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE Language = 'Spanish' AND Percentage = ( \n    SELECT MAX(Percentage) \n    FROM countrylanguage \n    WHERE CountryCode = countrylanguage.CountryCode \n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.820347785949707,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
          "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""
        },
        {
          "question": "Find the number of people who is under 40 for each gender.",
          "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"
        },
        {
          "question": "For each grade 0 classroom, return the classroom number and the count of students.",
          "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT CountryCode \nFROM countrylanguage \nWHERE Language = 'Spanish' \nORDER BY Percentage DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7338838577270508,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the party of the youngest people?",
          "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
        },
        {
          "question": "What is the average salary of employees who have a commission percentage that is not null?",
          "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
        },
        {
          "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
          "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
        }
      ]
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT CountryCode \nFROM countrylanguage \nWHERE Language = 'Spanish' AND Percentage = ( \n    SELECT MAX(Percentage) \n    FROM countrylanguage cl2 \n    WHERE cl2.CountryCode = countrylanguage.CountryCode \n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8096754550933838,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the hosts of competitions for which the theme is not Aliens?",
          "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"
        },
        {
          "question": "For each zip code, return the average mean temperature of August there.",
          "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
        },
        {
          "question": "Find the number of people who is under 40 for each gender.",
          "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "How many conductors are there?",
      "gold_sql": "SELECT count(*) FROM conductor",
      "generated_sql": "SELECT COUNT(*) FROM conductor",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.695836067199707,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of conductors.",
      "gold_sql": "SELECT count(*) FROM conductor",
      "generated_sql": "SELECT COUNT(*) FROM conductor",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7097868919372559,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "List the names of conductors in ascending order of age.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "generated_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6569347381591797,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of editors in ascending order of age.",
          "query": "SELECT Name FROM editor ORDER BY Age ASC"
        },
        {
          "question": "List the names of technicians in ascending order of age.",
          "query": "SELECT Name FROM technician ORDER BY Age ASC"
        },
        {
          "question": "List the names of players in ascending order of votes.",
          "query": "SELECT Player_name FROM player ORDER BY Votes ASC"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors, ordered by age?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "generated_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7086868286132812,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the climbers, ordered by points descending?",
          "query": "SELECT Name FROM climber ORDER BY Points DESC"
        },
        {
          "question": "What are the names of the technicians by ascending order of age?",
          "query": "SELECT Name FROM technician ORDER BY Age ASC"
        },
        {
          "question": "what are the names of the ships ordered by ascending tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage ASC"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors whose nationalities are not \"USA\"?",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "generated_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7099719047546387,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of companies whose headquarters are not \"USA\"?",
          "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'"
        },
        {
          "question": "What are the names of enzymes whose product is not 'Heme'?",
          "query": "SELECT name FROM enzyme WHERE product != 'Heme'"
        },
        {
          "question": "What are the names of representatives whose party is not \"Republican\"?",
          "query": "SELECT Name FROM Representative WHERE Party != \"Republican\""
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Return the names of conductors that do not have the nationality \"USA\".",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "generated_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6506607532501221,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of players that do not have coaches.",
          "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)"
        },
        {
          "question": "What are the census rankings of cities that do not have the status \"Village\"?",
          "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
        },
        {
          "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
          "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "generated_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6928079128265381,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
          "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC"
        },
        {
          "question": "What are the dates of publications in descending order of price?",
          "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC"
        },
        {
          "question": "What are the characters of actors in descending order of age?",
          "query": "SELECT Character FROM actor ORDER BY age DESC"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "generated_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.697554349899292,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
          "query": "SELECT County_name FROM county ORDER BY County_name DESC"
        },
        {
          "question": "Return the names of all counties sorted by population in ascending order.",
          "query": "SELECT County_name FROM county ORDER BY Population ASC"
        },
        {
          "question": "What are the names of everybody sorted by age in descending order?",
          "query": "SELECT name FROM Person ORDER BY age DESC"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What is the average attendance of shows?",
      "gold_sql": "SELECT avg(Attendance) FROM SHOW",
      "generated_sql": "SELECT AVG(Attendance) FROM show",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7941689491271973,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average price of clothes?",
          "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
        },
        {
          "question": "What is the average enrollment of schools?",
          "query": "SELECT avg(Enrollment) FROM school"
        },
        {
          "question": "What is the average quantity of stocks?",
          "query": "SELECT avg(Quantity) FROM stock"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Return the average attendance across all shows.",
      "gold_sql": "SELECT avg(Attendance) FROM SHOW",
      "generated_sql": "SELECT AVG(Attendance) FROM show",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6225526332855225,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the average age across all gymnasts.",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Return the average age across all artists.",
          "query": "SELECT avg(Age) FROM artist"
        },
        {
          "question": "Return the average money requested across all entrepreneurs.",
          "query": "SELECT avg(Money_Requested) FROM entrepreneur"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
      "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "generated_sql": "SELECT max(Share), min(Share) \nFROM performance \nWHERE Type != \"Live final\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.692629337310791,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
          "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
        },
        {
          "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
          "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""
        },
        {
          "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
          "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
      "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "generated_sql": "SELECT MAX(Official_ratings_(millions)), MIN(Official_ratings_(millions)) \nFROM performance \nWHERE Type != \"Live final\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.7489628791809082,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names and classes of ships that do not have a captain?",
          "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
        },
        {
          "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
          "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
        },
        {
          "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
          "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "How many different nationalities do conductors have?",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
      "generated_sql": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7047703266143799,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many different statuses do cities have?",
          "query": "SELECT count(DISTINCT Status) FROM city"
        },
        {
          "question": "How many different levels do members have?",
          "query": "SELECT count(DISTINCT LEVEL) FROM member"
        },
        {
          "question": "How many aircrafts do we have?",
          "query": "SELECT count(*) FROM Aircraft"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of different nationalities of conductors.",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
      "generated_sql": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6428771018981934,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of different statuses.",
          "query": "SELECT count(DISTINCT Status) FROM city"
        },
        {
          "question": "Count the number of different parties.",
          "query": "SELECT count(DISTINCT party_name) FROM party"
        },
        {
          "question": "Count the number of different companies.",
          "query": "SELECT count(DISTINCT Company) FROM entrepreneur"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "List names of conductors in descending order of years of work.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "generated_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5844588279724121,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List official names of cities in descending order of population.",
          "query": "SELECT Official_Name FROM city ORDER BY Population DESC"
        },
        {
          "question": "List the names of climbers in descending order of points.",
          "query": "SELECT Name FROM climber ORDER BY Points DESC"
        },
        {
          "question": "List the names of counties in descending order of population.",
          "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "generated_sql": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7884259223937988,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of everybody sorted by age in descending order?",
          "query": "SELECT name FROM Person ORDER BY age DESC"
        },
        {
          "question": "What are the names of captains, sorted by age descending?",
          "query": "SELECT name FROM captain ORDER BY age DESC"
        },
        {
          "question": "What are the names of wines, sorted by price ascending?",
          "query": "SELECT DISTINCT Name FROM WINE ORDER BY price"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "List the name of the conductor with the most years of work.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "generated_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6471631526947021,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of the school with the smallest enrollment.",
          "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
        },
        {
          "question": "List the name of the county with the largest population.",
          "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
        },
        {
          "question": "What is the name of the department with the most credits?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has worked the greatest number of years?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "generated_sql": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6823465824127197,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the customer who has the largest number of orders?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the bank branch with the greatest number of customers?",
          "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
        },
        {
          "question": "What is the name of the artist who joined latest?",
          "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Show the names of conductors and the orchestras they have conducted.",
      "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "generated_sql": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7439553737640381,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of companies and the number of employees they have",
          "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"
        },
        {
          "question": "Show the names of pilots and models of aircrafts they have flied with.",
          "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID"
        },
        {
          "question": "Show names of shops and the carriers of devices they have in stock.",
          "query": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
      "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "generated_sql": "SELECT T1.Name, T2.Orchestra \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8178515434265137,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of cities, as well as the names of the counties they correspond to?",
          "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"
        },
        {
          "question": "What are the names of actors and the musicals that they are in?",
          "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"
        },
        {
          "question": "What are the names of products that have never been ordered?",
          "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Show the names of conductors that have conducted more than one orchestras.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8172757625579834,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of journalists that have reported more than one event.",
          "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the names of the buildings that have more than one company offices.",
          "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the names of countries that have more than one roller coaster.",
          "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors who have conducted at more than one orchestra?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Conductor_ID \nHAVING COUNT(*) > 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8215000629425049,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of students who have more than one advisor?",
          "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of customers who have taken out more than one loan?",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of instructors who advise more than one student?",
          "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Show the name of the conductor that has conducted the most number of orchestras.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Conductor_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8708696365356445,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the game name that has most number of hours played.",
          "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
        },
        {
          "question": "Show the name of the party that has the most delegates.",
          "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Show the name of the shop that has the most kind of devices in stock.",
          "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has conducted the most orchestras?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nGROUP BY T1.Conductor_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9641571044921875,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the customer who has the most orders?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the full name of the employee who has the most customers?",
          "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the customer who has the most policies listed?",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.022994041442871,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of the party that has the most delegates.",
          "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
          "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2"
        },
        {
          "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
          "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 \nON T1.Conductor_ID = T2.Conductor_ID \nWHERE T2.Year_of_Founded > 2008",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9202697277069092,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of musicals who have no actors?",
          "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
        },
        {
          "question": "What are the names of candidates who have a lower support rate than oppose rate?",
          "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
        },
        {
          "question": "What are the names of customers who have a loan of more than 3000 in amount?",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Please show the different record companies and the corresponding number of orchestras.",
      "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
      "generated_sql": "SELECT Record_Company, COUNT(*) \nFROM orchestra \nGROUP BY Record_Company",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6960887908935547,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Please show different denominations and the corresponding number of schools.",
          "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination"
        },
        {
          "question": "Please show each industry and the corresponding number of companies in that industry.",
          "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry"
        },
        {
          "question": "Please show different denominations and the corresponding number of schools in descending order.",
          "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "How many orchestras does each record company manage?",
      "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
      "generated_sql": "SELECT Record_Company, COUNT(*) \nFROM orchestra \nGROUP BY Record_Company",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6845929622650146,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many followers does each user have?",
          "query": "SELECT count(*) FROM follows"
        },
        {
          "question": "How many students does each advisor have?",
          "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
        },
        {
          "question": "How many sections does each course has?",
          "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Please show the record formats of orchestras in ascending order of count.",
      "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "generated_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7176041603088379,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Please show the software platforms of devices in descending order of the count.",
          "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC"
        },
        {
          "question": "Please show the industries of companies in descending order of the number of companies.",
          "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"
        },
        {
          "question": "Please show the most common age of editors.",
          "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the major record formats of orchestras, sorted by their frequency?",
      "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "generated_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7026832103729248,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of captains, sorted by age descending?",
          "query": "SELECT name FROM captain ORDER BY age DESC"
        },
        {
          "question": "What are the cities that have more than 2 airports sorted by number of airports?",
          "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"
        },
        {
          "question": "What are the names of the countries and average invoice size of the top countries by size?",
          "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "List the record company shared by the most number of orchestras.",
      "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8616960048675537,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the software platform shared by the greatest number of devices.",
          "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "List the industry shared by the most companies.",
          "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which Advisor has most of students? List advisor and the number of students.",
          "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What is the record company used by the greatest number of orchestras?",
      "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.731830358505249,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the characteristic name used by most number of the products?",
          "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the publisher with most number of books?",
          "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the race class with most number of races.",
          "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "List the names of orchestras that have no performance.",
      "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "generated_sql": "SELECT Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6951720714569092,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of buildings that have no company office.",
          "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)"
        },
        {
          "question": "List the names of shops that have no devices in stock.",
          "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
        },
        {
          "question": "List the names of players that do not have coaches.",
          "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are the orchestras that do not have any performances?",
      "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "generated_sql": "SELECT Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6913909912109375,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of documents that do not have any sections?",
          "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"
        },
        {
          "question": "What are the names of all clubs that do not have any players?",
          "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
        },
        {
          "question": "What are the names of shops that do not have any devices in stock?",
          "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
      "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "orchestra",
      "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
      "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "orchestra",
      "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8647162914276123,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
          "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\""
        },
        {
          "question": "Find the number of people whose age is greater than all engineers.",
          "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
        },
        {
          "question": "Find the number of employees whose title is IT Staff from each city?",
          "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of orchestras that have CD or DVD as their record format.",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format LIKE '%CD%' OR Major_Record_Format LIKE '%DVD%';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1151535511016846,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of captains that have each rank.",
          "query": "SELECT count(*) ,  rank FROM captain GROUP BY rank"
        },
        {
          "question": "Count the number of documents that do not have expenses.",
          "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
        },
        {
          "question": "Count the number of customers that have an email containing \"gmail.com\".",
          "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "Show the years in which orchestras that have given more than one performance are founded.",
      "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Year_of_Founded \nHAVING COUNT(T2.Orchestra_ID) > 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1250333786010742,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the locations that have more than one railways.",
          "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the names of journalists that have reported more than one event.",
          "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the names of the buildings that have more than one company offices.",
          "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
        }
      ]
    },
    {
      "db_id": "orchestra",
      "question": "What are years of founding for orchestras that have had more than a single performance?",
      "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 \nON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Orchestra_ID \nHAVING COUNT(*) > 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3383021354675293,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of shops that have more than a single kind of device in stock?",
          "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1"
        },
        {
          "question": "What are the carriers of devices that are in stock in more than a single shop?",
          "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1"
        },
        {
          "question": "What are the names of the albums that have more than 10 tracks?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are there?",
      "gold_sql": "SELECT count(*) FROM Highschooler",
      "generated_sql": "SELECT COUNT(*) FROM Highschooler",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9404613971710205,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Count the number of high schoolers.",
      "gold_sql": "SELECT count(*) FROM Highschooler",
      "generated_sql": "SELECT COUNT(*) FROM Highschooler",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2838828563690186,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        },
        {
          "question": "Count the number of accounts.",
          "query": "SELECT count(*) FROM Accounts"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names and grades of each high schooler.",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT name, grade FROM Highschooler",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.022214651107788,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of companies and of employees.",
          "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID"
        },
        {
          "question": "Show the leader names and locations of colleges.",
          "query": "SELECT Leader_Name ,  College_Location FROM college"
        },
        {
          "question": "Show the ids and names of all documents.",
          "query": "SELECT document_id ,  document_name FROM Documents"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names and grades for each high schooler?",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT name, grade FROM Highschooler",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.199000597000122,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and names for each of the documents?",
          "query": "SELECT document_id ,  document_name FROM Documents"
        },
        {
          "question": "What are the names and distances for all airplanes?",
          "query": "SELECT name ,  distance FROM Aircraft"
        },
        {
          "question": "What are the names and capitals of each country?",
          "query": "SELECT Country_name ,  Capital FROM country"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show all the grades of the high schoolers.",
      "gold_sql": "SELECT grade FROM Highschooler",
      "generated_sql": "SELECT grade FROM Highschooler",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9398682117462158,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the average population of all counties.",
          "query": "SELECT avg(Population) FROM county"
        },
        {
          "question": "Show all the Store_Name of drama workshop groups.",
          "query": "SELECT Store_Name FROM Drama_Workshop_Groups"
        },
        {
          "question": "Show the ids and names of all documents.",
          "query": "SELECT document_id ,  document_name FROM Documents"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What is the grade of each high schooler?",
      "gold_sql": "SELECT grade FROM Highschooler",
      "generated_sql": "SELECT grade FROM Highschooler",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1090214252471924,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the detail of each visitor?",
          "query": "SELECT Tourist_Details FROM VISITORS"
        },
        {
          "question": "What is the average high temperature for each day of week?",
          "query": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week"
        },
        {
          "question": "What is the order date of each booking?",
          "query": "SELECT Order_Date FROM BOOKINGS"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What grade is Kyle in?",
      "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1252222061157227,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the largest major?",
          "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is Nancy Edwards's address?",
          "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
        },
        {
          "question": "What is the zip code the county named \"Howard\" is located in?",
          "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Return the grade for the high schooler named Kyle.",
      "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.38157320022583,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the description for the courses named \"database\".",
          "query": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\""
        },
        {
          "question": "For each grade 0 classroom, return the classroom number and the count of students.",
          "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"
        },
        {
          "question": "Find the attribute data type for the attribute named \"Green\".",
          "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of all high schoolers in grade 10.",
      "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
      "generated_sql": "SELECT name FROM Highschooler WHERE grade = 10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.073305368423462,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Select the names of all the products in the store.",
          "query": "SELECT Name FROM Products"
        },
        {
          "question": "Find the names of all races held in 2017.",
          "query": "SELECT name FROM races WHERE YEAR = 2017"
        },
        {
          "question": "What are the names of all songs in English?",
          "query": "SELECT song_name FROM song WHERE languages  =  \"english\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names of all high schoolers in grade 10?",
      "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
      "generated_sql": "SELECT name FROM Highschooler WHERE grade = 10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0748398303985596,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of all songs in English?",
          "query": "SELECT song_name FROM song WHERE languages  =  \"english\""
        },
        {
          "question": "What are the names of all wines produced in 2008?",
          "query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\""
        },
        {
          "question": "What are the names of all instructors in the Comp. Sci. department?",
          "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the ID of the high schooler named Kyle.",
      "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0161762237548828,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the id of the employee named Ebba.",
          "query": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\""
        },
        {
          "question": "Show the student id of the oldest student.",
          "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"
        },
        {
          "question": "Show the id and salary of Mark Young.",
          "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What is Kyle's id?",
      "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0513954162597656,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the largest major?",
          "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is Nancy Edwards's address?",
          "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
        },
        {
          "question": "What is the type of allergy Cat?",
          "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are there in grade 9 or 10?",
      "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9 OR grade = 10;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1446020603179932,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many exhibition are there in year 2005 or after?",
          "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
        },
        {
          "question": "How many weddings are there in year 2016?",
          "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016"
        },
        {
          "question": "How many parks are there in Atlanta city?",
          "query": "SELECT count(*) FROM park WHERE city = 'Atlanta';"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Count the number of high schoolers in grades 9 or 10.",
      "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9 OR grade = 10;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.305940866470337,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of classrooms in Lamberton.",
          "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
        },
        {
          "question": "Count the number of exhibitions that happened in or after 2005.",
          "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"
        },
        {
          "question": "Count the number of courses in the Physics department.",
          "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the number of high schoolers for each grade.",
      "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
      "generated_sql": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9921104907989502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the number of customers for each gender.",
          "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
        },
        {
          "question": "Show the account id and the number of transactions for each account",
          "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id"
        },
        {
          "question": "Show the invoice number and the number of transactions for each invoice.",
          "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are in each grade?",
      "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
      "generated_sql": "SELECT COUNT(*) , grade FROM Highschooler GROUP BY grade;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9899992942810059,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many tracks are in each genre?",
          "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
        },
        {
          "question": "How many students are in each department?",
          "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
        },
        {
          "question": "How many departments are in each school?",
          "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Which grade has the most high schoolers?",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.047502040863037,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which artist has the most albums?",
          "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which nationality has the most hosts?",
          "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which store has most the customers?",
          "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Return the grade that has the greatest number of high schoolers.",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.911290168762207,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the party email that has used party services the greatest number of times.",
          "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Show the range that has the most number of mountains.",
          "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Return the code of the city that has the most students.",
          "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show me all grades that have at least 4 students.",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
      "generated_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9701833724975586,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all advisors who have at least two students.",
          "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"
        },
        {
          "question": "Show all the buildings that have at least 10 professors.",
          "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"
        },
        {
          "question": "Show the locations that have at least two performances.",
          "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Which grades have 4 or more high schoolers?",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
      "generated_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8967328071594238,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the districts which have two or more addresses.",
          "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
        },
        {
          "question": "Which locations have 2 or more cinemas with capacity over 300?",
          "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"
        },
        {
          "question": "Which countries have more than one mountain?",
          "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the student IDs and numbers of friends corresponding to each.",
      "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
      "generated_sql": "SELECT student_id, COUNT(friend_id) \nFROM Friend \nGROUP BY student_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2397644519805908,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show all student ids and the number of hours played.",
          "query": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid"
        },
        {
          "question": "Show the position of players and the corresponding number of players.",
          "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"
        },
        {
          "question": "Please show different software platforms and the corresponding number of devices using each.",
          "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many friends does each student have?",
      "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
      "generated_sql": "SELECT T1.name, COUNT(T2.friend_id) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0218987464904785,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many friends does Dan have?",
          "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
        },
        {
          "question": "How many students does each advisor have?",
          "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"
        },
        {
          "question": "How many sections does each course have?",
          "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high school students and their corresponding number of friends.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name, COUNT(T2.friend_id) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1035795211791992,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the country names and the corresponding number of players.",
          "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
        },
        {
          "question": "Show the names of pilots and the number of records they have.",
          "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"
        },
        {
          "question": "Show the names of journalists and the number of events they reported.",
          "query": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names of the high schoolers and how many friends does each have?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name, COUNT(T2.friend_id) \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1181330680847168,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many tracks does each genre have and what are the names of the top 5?",
          "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
        },
        {
          "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
        },
        {
          "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
          "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What is the name of the high schooler who has the greatest number of friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0779531002044678,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the customer who has the largest number of orders?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the customer who has greatest total loan amount?",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Return the name of the high school student with the most friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.ID \nORDER BY COUNT(T2.friend_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1792333126068115,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the name of the party with the most members.",
          "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Return the id and full name of the customer with the most accounts.",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the student ID and login name of the student with the most course enrollments",
          "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high schoolers who have at least 3 friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T2.friend_id) >= 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1347839832305908,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of counties that have at least two delegates.",
          "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show the ids of the investors who have at least two transactions.",
          "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show the names of people who have been on the negative side of debates at least twice.",
          "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have 3 or more friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.ID \nHAVING COUNT(T2.friend_id) >= 3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1114468574523926,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of musicals who have at 3 or more actors?",
          "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What are the names of all reviewers that have rated 3 or more movies?",
          "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What are the names of students who have more than one advisor?",
          "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of all of the high schooler Kyle's friends.",
      "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.name \nFROM Highschooler AS T1 \nJOIN Friend AS T3 ON T1.ID = T3.student_id \nJOIN Highschooler AS T2 ON T3.friend_id = T2.ID \nWHERE T1.name = 'Kyle'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.635685920715332,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the ids and names of all documents.",
          "query": "SELECT document_id ,  document_name FROM Documents"
        },
        {
          "question": "Show the names of all the activities Mark Giuliano participates in.",
          "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""
        },
        {
          "question": "What are the names of all of Bob's friends?",
          "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Return the names of friends of the high school student Kyle.",
      "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 \nON T1.friend_id = T2.ID \nJOIN Highschooler AS T3 \nON T1.student_id = T3.ID \nWHERE T3.name = 'Kyle'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2363789081573486,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the names of the gymnasts.",
          "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "Return the characteristic names of the 'sesame' product.",
          "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""
        },
        {
          "question": "Find the names of females who are friends with Zach",
          "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many friends does the high school student Kyle have?",
      "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(T2.friend_id) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nWHERE T1.name = 'Kyle' AND T1.grade > 9 AND T1.grade < 13",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.180314302444458,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many friends does Dan have?",
          "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
        },
        {
          "question": "How many teachers does the student named CHRISSY NABOZNY have?",
          "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""
        },
        {
          "question": "How many teachers does the student named MADLOCK RAY have?",
          "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Count the number of friends Kyle has.",
      "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\") \nOR friend_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1583480834960938,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of stores the chain South has.",
          "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""
        },
        {
          "question": "Count the number of characteristics the product 'sesame' has.",
          "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show ids of all students who do not have any friends.",
      "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the ids of high school students who do not have friends?",
      "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Show names of all high school students who do not have any friends.",
      "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have no friends?",
      "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
      "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the ids of students who both have friends and are liked?",
      "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Show name of all students who have some friends and also are liked by someone else.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who both have friends and are liked?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Count the number of likes for each student id.",
      "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
      "generated_sql": "SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2005600929260254,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each competition, count the number of matches.",
          "query": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition"
        },
        {
          "question": "For each zip code, return the average mean temperature of August there.",
          "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
        },
        {
          "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
          "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many likes correspond to each student id?",
      "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
      "generated_sql": "SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1229703426361084,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many invoices correspond to each order id?",
          "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id"
        },
        {
          "question": "For each zip code, return the average mean temperature of August there.",
          "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
        },
        {
          "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
          "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name, COUNT(T2.liked_id) \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2874469757080078,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of customers who have the most mailshots.",
          "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
          "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"
        },
        {
          "question": "Show the names of companies and the number of employees they have",
          "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name, COUNT(T2.liked_id) \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.student_id \nWHERE T1.grade = 9 \nGROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0892424583435059,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many tracks does each genre have and what are the names of the top 5?",
          "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
        },
        {
          "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
        },
        {
          "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
          "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What is the name of the high schooler who has the greatest number of likes?",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.liked_id \nGROUP BY T1.name \nORDER BY count(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9176914691925049,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the customer who has the largest number of orders?",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the track that has had the greatest number of races?",
          "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the customer who has greatest total loan amount?",
          "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Give the name of the student with the most likes.",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.name \nFROM Likes AS T1 \nJOIN Highschooler AS T2 \nON T1.liked_id = T2.ID \nGROUP BY T2.name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.917973518371582,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give the name of the student in the History department with the most credits.",
          "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
        },
        {
          "question": "Return the name of the party with the most members.",
          "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Find the student ID and login name of the student with the most course enrollments",
          "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of students who have at least 2 likes.",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.ID \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8985109329223633,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
          "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "Show the names of counties that have at least two delegates.",
          "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show the ids of the investors who have at least two transactions.",
          "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have 2 or more likes?",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.student_id \nGROUP BY T1.ID \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3025622367858887,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of students who have more than one advisor?",
          "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
        },
        {
          "question": "What are the names of musicals who have at 3 or more actors?",
          "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "What are the names of the customers who have made two or less orders?",
          "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nWHERE T1.grade > 5 \nGROUP BY T1.ID \nHAVING count(T2.friend_id) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.4258158206939697,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
          "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
        },
        {
          "question": "Find the names and number of works of all artists who have at least one English songs.",
          "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 \nON T1.ID = T2.student_id \nWHERE T1.grade > 5 \nGROUP BY T1.ID \nHAVING COUNT(T2.friend_id) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2316570281982422,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of musicals who have at 3 or more actors?",
          "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
          "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"
        },
        {
          "question": "What are the names and number of works for all artists who have sung at least one song in English?",
          "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "How many likes does Kyle have?",
      "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(T2.liked_id) \nFROM Highschooler AS T1 \nJOIN Likes AS T2 \nON T1.ID = T2.student_id \nWHERE T1.name = 'Kyle'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0484812259674072,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many friends does Dan have?",
          "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"
        },
        {
          "question": "How many events had participants whose details had the substring 'Dr.'",
          "query": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
        },
        {
          "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
          "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Return the number of likes that the high schooler named Kyle has.",
      "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(liked_id) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.03696870803833,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of characteristics that the product \"flax\" has.",
          "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""
        },
        {
          "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
          "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""
        },
        {
          "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
          "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Find the average grade of all students who have some friends.",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT AVG(T1.grade) \nFROM Highschooler AS T1 \nWHERE T1.ID IN (SELECT student_id FROM Friend) \nOR T1.ID IN (SELECT friend_id FROM Friend)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.4726250171661377,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average credit score of the customers who have some loan.",
          "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
        },
        {
          "question": "Find the number of male (sex is 'M') students who have some food type allery.",
          "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
        },
        {
          "question": "Find the average age of students who are living in the dorm with the largest capacity.",
          "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What is the average grade of students who have friends?",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT AVG(T1.grade) \nFROM Highschooler AS T1 \nWHERE T1.ID IN (SELECT student_id FROM Friend) \nOR T1.ID IN (SELECT friend_id FROM Friend)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0881388187408447,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average GPA of students taking ACCT-211?",
          "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"
        },
        {
          "question": "What is the average age of students who are living in the dorm with the largest capacity?",
          "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
        },
        {
          "question": "What are the names of players who have the best dribbling?",
          "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "Find the minimum grade of students who have no friends.",
      "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1023900508880615,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of the swimmers who have no record.",
          "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
        },
        {
          "question": "Find the number of male (sex is 'M') students who have some food type allery.",
          "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
        },
        {
          "question": "Find the average age of students who are living in the dorm with the largest capacity.",
          "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"
        }
      ]
    },
    {
      "db_id": "network_1",
      "question": "What is the lowest grade of students who do not have any friends?",
      "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT MIN(grade) FROM Highschooler \nWHERE ID NOT IN (SELECT student_id FROM Friend) \nAND ID NOT IN (SELECT friend_id FROM Friend)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1685121059417725,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of customers who do not have any policies?",
          "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
        },
        {
          "question": "What are the names of players who have the best dribbling?",
          "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)"
        },
        {
          "question": "Find the number of male (sex is 'M') students who have some food type allery.",
          "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which states have both owners and professionals living there?",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the states where both owners and professionals live.",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of the dogs who have gone through any treatments?",
      "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT AVG(T1.age) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 \nON T1.dog_id = T2.dog_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3880181312561035,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age of all gymnasts?",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "What is the number of branches that have more than the average number of memberships?",
          "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"
        },
        {
          "question": "What is the name of the person who is the oldest?",
          "query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the average age of the dogs who went through treatments.",
      "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2137103080749512,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average age of female students.",
          "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\""
        },
        {
          "question": "Find the average credit score of the customers who have some loan.",
          "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
        },
        {
          "question": "Find the average number of followers for the users who had some tweets.",
          "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
      "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
      "generated_sql": "SELECT T1.professional_id, T1.last_name, T1.cell_number \nFROM Professionals AS T1 \nWHERE T1.state = 'Indiana' \nUNION \nSELECT T2.professional_id, T2.last_name, T2.cell_number \nFROM Professionals AS T2 \nJOIN Treatments AS T3 ON T2.professional_id = T3.professional_id \nGROUP BY T2.professional_id \nHAVING COUNT(*) > 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3858776092529297,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
          "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
        },
        {
          "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
          "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
        },
        {
          "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
          "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
      "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
      "generated_sql": "SELECT T1.professional_id, T1.last_name, T1.cell_number \nFROM Professionals AS T1 \nWHERE T1.state = 'Indiana' \nUNION \nSELECT T1.professional_id, T1.last_name, T1.cell_number \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(*) > 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.538022756576538,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the name and email of the users who have more than 1000 followers.",
          "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
        },
        {
          "question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.",
          "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"
        },
        {
          "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
          "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
      "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
      "generated_sql": "SELECT T1.name \nFROM Dogs AS T1 \nWHERE T1.dog_id NOT IN (\n    SELECT T2.dog_id \n    FROM Treatments AS T2 \n    GROUP BY T2.dog_id \n    HAVING SUM(T2.cost_of_treatment) > 1000\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0701038837432861,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
          "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""
        },
        {
          "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
          "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
        },
        {
          "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
          "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
      "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
      "generated_sql": "SELECT D.name \nFROM Dogs D \nWHERE D.owner_id NOT IN (\n    SELECT T.dog_id \n    FROM Treatments T \n    GROUP BY T.dog_id \n    HAVING SUM(T.cost_of_treatment) > 1000\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1899936199188232,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the airports which are not in the country 'Iceland'?",
          "query": "SELECT name FROM airport WHERE country != 'Iceland'"
        },
        {
          "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
          "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
        },
        {
          "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
          "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which first names are used for professionals or owners but are not used as dog names?",
      "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
      "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nGROUP BY T1.owner_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2854666709899902,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
          "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which student visited restaurant most often? List student's first name and last name.",
          "query": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;"
        },
        {
          "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
          "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nGROUP BY T1.owner_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2854197025299072,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first and last name of the faculty who has the most students?",
          "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Tell me the first and last name of the student who has the most activities.",
          "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the first and last name of the student who played the most sports?",
          "query": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
      "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 \nON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.36366868019104,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
          "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
          "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Show id, first and last names for all customers with at least two cards.",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
      "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T2.professional_id, T2.role_code, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 \nON T1.professional_id = T2.professional_id \nGROUP BY T2.professional_id \nHAVING COUNT(*) >= 2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.4030683040618896,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first names and ids for customers who have two or more accounts?",
          "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the ids and full names of customers who hold two or more cards?",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the names of musicals who have at 3 or more actors?",
          "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the name of the breed with the most dogs?",
      "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 \nON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3606867790222168,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the department with the most credits?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the activity with the most students?",
          "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the name of the airline with the most routes?",
          "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which breed do the most dogs have? Give me the breed name.",
      "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 \nON T1.breed_code = T2.breed_code \nGROUP BY T1.breed_name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.421710729598999,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which customer uses the most policies? Give me the customer name.",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which program is broadcast most frequently? Give me the program name.",
          "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which course is enrolled in by the most students? Give me the course name.",
          "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
      "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id, T1.last_name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.5192739963531494,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which author has written the most papers? Find his or her last name.",
          "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which part fault requires the most number of skills to fix? List part id and name.",
          "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which service id and type has the least number of participants?",
          "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 \nON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.228050947189331,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Tell me the first and last name of the student who has the most activities.",
          "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the description of the treatment type that costs the least money in total?",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "generated_sql": "SELECT T1.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 \nON T1.treatment_type_code = T2.treatment_type_code \nGROUP BY T1.treatment_type_code \nORDER BY SUM(T2.cost_of_treatment) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.423079252243042,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the description of document type 'Paper'?",
          "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";"
        },
        {
          "question": "What is the name of the media type that is least common across all tracks?",
          "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
        },
        {
          "question": "What is the description and code of the type of service that is performed the most often?",
          "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Give me the description of the treatment type whose total cost is the lowest.",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "generated_sql": "SELECT T1.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 \nON T1.treatment_type_code = T2.treatment_type_code \nGROUP BY T1.treatment_type_code \nORDER BY SUM(T2.cost_of_treatment) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3706238269805908,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Give me the name and description of the document type code RV.",
          "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
        },
        {
          "question": "What is the description and code of the type of service that is performed the most often?",
          "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Find the description and code of the service type that is performed the most times.",
          "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.zip_code \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 \nON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3980512619018555,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the id and details of the investor that has the largest number of transactions.",
          "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Which service id and type has the least number of participants?",
          "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "Find the club which has the largest number of members majoring in \"600\".",
          "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.zip_code \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nJOIN Treatments AS T3 \nON T2.dog_id = T3.dog_id \nGROUP BY T1.owner_id \nORDER BY SUM(T3.cost_of_treatment) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.7823092937469482,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the id and surname of the driver who participated the most number of races?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the id and last name of the driver who participated in the most races after 2010?",
          "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id, T1.cell_number \nFROM Professionals AS T1 \nJOIN Treatments AS T2 \nON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2379422187805176,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the names of studios that have at least two films.",
          "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Find the student ID and personal name of the student with at least two enrollments.",
          "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
        },
        {
          "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
          "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id, T1.cell_number \nFROM Professionals AS T1 \nJOIN Treatments AS T2 \nON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2961931228637695,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids and full names of customers who hold two or more cards?",
          "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
        },
        {
          "question": "Find the names of all reviewers who have contributed three or more ratings.",
          "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"
        },
        {
          "question": "Find the student ID and personal name of the student with at least two enrollments.",
          "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "generated_sql": "SELECT T1.first_name, T1.last_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 \nON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.599581241607666,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the first name and last name of the players who have weight above 220 or height below 75?",
          "query": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75"
        },
        {
          "question": "What are the names of teams from universities that have a below average enrollment?",
          "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
        },
        {
          "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
          "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "generated_sql": "SELECT T1.first_name, T1.last_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 \nON T1.professional_id = T2.professional_id \nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.624567985534668,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
          "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
        },
        {
          "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
          "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"
        },
        {
          "question": "What are the names of teams from universities that have a below average enrollment?",
          "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the date of each treatment, together with the first name of the professional who operated it.",
      "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SELECT T1.date_of_treatment, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 \nON T1.professional_id = T2.professional_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2958862781524658,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
          "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob"
        },
        {
          "question": "Find the full names of employees who help customers with the first name Leonie.",
          "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""
        },
        {
          "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
          "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the date and the operating professional's first name of each treatment?",
      "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SELECT T1.date_of_treatment, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 \nON T1.professional_id = T2.professional_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3487522602081299,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the date and venue of each debate?",
          "query": "SELECT Date ,  Venue FROM debate"
        },
        {
          "question": "what are the first name and last name of all candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        },
        {
          "question": "What are the first name and department name of all employees?",
          "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the cost of each treatment and the corresponding treatment type description.",
      "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
      "generated_sql": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 \nON T1.treatment_type_code = T2.treatment_type_code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.4244914054870605,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List document type codes and the number of documents in each code.",
          "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"
        },
        {
          "question": "List the id and type of each thing, and the details of the organization that owns it.",
          "query": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id"
        },
        {
          "question": "List the name and the number of enrolled student for each course.",
          "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the cost and treatment type description of each treatment?",
      "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
      "generated_sql": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 \nON T1.treatment_type_code = T2.treatment_type_code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9174942970275879,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the log id and entry description of each problem?",
          "query": "SELECT problem_log_id ,  log_entry_description FROM problem_log"
        },
        {
          "question": "What are the code and description of the least frequent detention type ?",
          "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
        },
        {
          "question": "What are the location and nickname of each school?",
          "query": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List each owner's first name, last name, and the size of his for her dog.",
      "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.size_description \nFROM Owners AS T1 \nJOIN Dogs AS T3 ON T1.owner_id = T3.owner_id \nJOIN Sizes AS T2 ON T3.size_code = T2.size_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9753561019897461,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name, origin and owner of each program.",
          "query": "SELECT name ,  origin ,  OWNER FROM program"
        },
        {
          "question": "display the first and last name, department, city, and state province for each employee.",
          "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"
        },
        {
          "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
          "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each owner's first name, last name, and the size of their dog?",
      "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.size_code \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8619673252105713,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the rank, first name, and last name of the faculty members?",
          "query": "SELECT rank ,  Fname ,  Lname FROM Faculty"
        },
        {
          "question": "what are the first name and last name of all candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        },
        {
          "question": "What are the first and last names of all the candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List pairs of the owner's first name and the dogs's name.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8864991664886475,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the first name and last name of all customers.",
          "query": "SELECT first_name ,  last_name FROM Customers;"
        },
        {
          "question": "List the customers first and last name of 10 least expensive invoices.",
          "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"
        },
        {
          "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
          "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each owner's first name and their dogs's name?",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8280565738677979,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name and population of each county?",
          "query": "SELECT County_name ,  Population FROM county"
        },
        {
          "question": "what are the first name and last name of all candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        },
        {
          "question": "What are the first name and department name of all employees?",
          "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "generated_sql": "SELECT T1.name, T2.date_of_treatment \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nWHERE T1.breed_code IN (\n    SELECT breed_code \n    FROM Dogs \n    GROUP BY breed_code \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9770979881286621,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the dates and vote percents of elections.",
          "query": "SELECT Date ,  Vote_Percent FROM election"
        },
        {
          "question": "What are the first names of all students who live in the dorm with the most amenities?",
          "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "List all the policy types used by the customer enrolled in the most policies.",
          "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "generated_sql": "SELECT T1.name, T3.date_of_treatment \nFROM Dogs AS T1 \nJOIN Treatments AS T3 ON T1.dog_id = T3.dog_id \nWHERE T1.breed_code IN (\n    SELECT breed_code \n    FROM Dogs \n    GROUP BY breed_code \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0460708141326904,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of players and names of their coaches.",
          "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
        },
        {
          "question": "What are the first names of all students who live in the dorm with the most amenities?",
          "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
        },
        {
          "question": "What are all the policy types of the customer that has the most policies listed?",
          "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
      "generated_sql": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nWHERE T1.state = 'Virginia';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8081231117248535,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Who is the youngest employee in the company? List employee's first and last name.",
          "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
        },
        {
          "question": "List the first and last name for players who participated in all star game in 1998.",
          "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998"
        },
        {
          "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
          "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
      "generated_sql": "SELECT T1.first_name, T2.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nWHERE T1.state = 'Virginia'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8729429244995117,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the names and phone numbers of customers living in California state.",
          "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
        },
        {
          "question": "Find the first names of all customers that live in Brazil and have an invoice.",
          "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""
        },
        {
          "question": "What are the first names and birthdates of the professors in charge of ACCT-211?",
          "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
      "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "generated_sql": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs AS T1 \nWHERE T1.dog_id IN (SELECT T2.dog_id FROM Treatments AS T2)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8506667613983154,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the email addresses and date of births for all customers who have a first name of Carole?",
          "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\""
        },
        {
          "question": "What are the different names and credit scores of customers who have taken a loan?",
          "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"
        },
        {
          "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
          "query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
      "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "generated_sql": "SELECT T1.date_arrived, T1.date_departed \nFROM Dogs AS T1 \nWHERE T1.dog_id IN (\n    SELECT T2.dog_id \n    FROM Treatments AS T2\n)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8894679546356201,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
          "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"
        },
        {
          "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
          "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""
        },
        {
          "question": "Find the name and active date of the customer that use email as the contact channel.",
          "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the last name of the owner owning the youngest dog.",
      "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
      "generated_sql": "SELECT T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nWHERE T2.age = (SELECT MIN(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8658292293548584,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Provide the last name of the youngest student.",
          "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
        },
        {
          "question": "Find the name of the customer who made the order of the largest amount of goods.",
          "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"
        },
        {
          "question": "Find the name of accounts whose checking balance is below the average checking balance.",
          "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Who owns the youngest dog? Give me his or her last name.",
      "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
      "generated_sql": "SELECT T1.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 \nON T1.owner_id = T2.owner_id \nORDER BY T2.age \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8495709896087646,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
          "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""
        },
        {
          "question": "Which paper has the most authors? Give me the paper title.",
          "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
        },
        {
          "question": "Find the customer who started a policy most recently.",
          "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
      "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "generated_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9398987293243408,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids of all students who live in CHI?",
          "query": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\""
        },
        {
          "question": "List the names and emails of customers who payed by Visa card.",
          "query": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'"
        },
        {
          "question": "List the names of members who did not participate in any round.",
          "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
      "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "generated_sql": "SELECT email_address \nFROM Professionals \nWHERE state = 'Hawaii' OR state = 'Wisconsin'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7922024726867676,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the birth dates of employees living in Edmonton?",
          "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\""
        },
        {
          "question": "What are the names of banks in the state of New York?",
          "query": "SELECT bname FROM bank WHERE state  =  'New York'"
        },
        {
          "question": "Give the number of students living in either HKG or CHI.",
          "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the arriving date and the departing date of all the dogs?",
      "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
      "generated_sql": "SELECT date_arrived, date_departed FROM Dogs",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7860865592956543,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and locations of all tracks?",
          "query": "SELECT name ,  LOCATION FROM track"
        },
        {
          "question": "What are the date and venue of each debate?",
          "query": "SELECT Date ,  Venue FROM debate"
        },
        {
          "question": "What are the headquarters and industries of all companies?",
          "query": "SELECT Headquarters ,  Industry FROM company"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the arrival date and the departure date for all the dogs.",
      "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
      "generated_sql": "SELECT date_arrived, date_departed FROM Dogs",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7399718761444092,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
          "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
        },
        {
          "question": "List the id, color scheme, and name for all the photos.",
          "query": "SELECT id ,  color ,  name FROM photos"
        },
        {
          "question": "List ids and details for all projects.",
          "query": "SELECT project_id ,  project_details FROM Projects"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs went through any treatments?",
      "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id IN (SELECT dog_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7624328136444092,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many artists do not have any album?",
          "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
        },
        {
          "question": "How many enzymes do not have any interactions?",
          "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
        },
        {
          "question": "How many apartments do not have any facility?",
          "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Count the number of dogs that went through a treatment.",
      "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT D.dog_id) \nFROM Dogs D \nJOIN Treatments T ON D.dog_id = T.dog_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9077949523925781,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of markets that have a number of cities lower than 300.",
          "query": "SELECT count(*) FROM market WHERE Number_cities  <  300"
        },
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Count the number of actors.",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How many professionals have performed any treatment to dogs?",
      "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT T.professional_id) \nFROM Treatments T \nJOIN Dogs D ON T.dog_id = D.dog_id;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8152835369110107,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many scientists do not have any projects assigned to them?",
          "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
        },
        {
          "question": "How many artists do not have any album?",
          "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
        },
        {
          "question": "How many enzymes do not have any interactions?",
          "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of professionals who have ever treated dogs.",
      "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT T.professional_id) \nFROM Treatments T \nJOIN Dogs D ON T.dog_id = D.dog_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8027794361114502,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of students who have advisors.",
          "query": "SELECT count(DISTINCT s_id) FROM advisor"
        },
        {
          "question": "Find the number of albums.",
          "query": "SELECT count(*) FROM ALBUM"
        },
        {
          "question": "Find the number of reviews.",
          "query": "SELECT count(*) FROM review"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
      "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "generated_sql": "SELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9351253509521484,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
          "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"
        },
        {
          "question": "Which head's name has the substring 'Ha'? List the id and name.",
          "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
        },
        {
          "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
          "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
      "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "generated_sql": "SELECT role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8044068813323975,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the full names of employees living in the city of Calgary.",
          "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\""
        },
        {
          "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
          "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
        },
        {
          "question": "Find the names of all artists that have \"a\" in their names.",
          "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
      "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
      "generated_sql": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7772467136383057,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
          "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "Which head's name has the substring 'Ha'? List the id and name.",
          "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
        },
        {
          "question": "Which stadium name contains the substring \"Bank\"?",
          "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
      "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
      "generated_sql": "SELECT first_name, last_name, email_address \nFROM Owners \nWHERE state LIKE '%North%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7728896141052246,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
          "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
        },
        {
          "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
          "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"
        },
        {
          "question": "Find the last name of the staff whose email address contains \"wrau\".",
          "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs have an age below the average?",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7492654323577881,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many customers have an account?",
          "query": "SELECT count(DISTINCT customer_id) FROM Accounts"
        },
        {
          "question": "How many products have a price higher than the average?",
          "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
        },
        {
          "question": "How many universities have a campus fee greater than the average?",
          "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Count the number of dogs of an age below the average.",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.75528883934021,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Count the number of farms.",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "Find the number of people whose age is greater than all engineers.",
          "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"
        },
        {
          "question": "find the name of people whose height is lower than the average.",
          "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does the most recent treatment cost?",
      "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "generated_sql": "SELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9450860023498535,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How much amount in total were claimed in the most recently created document?",
          "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
        },
        {
          "question": "Which patient is undergoing the most recent treatment?",
          "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
        },
        {
          "question": "Show the names of the three most recent festivals.",
          "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Show me the cost of the most recently performed treatment.",
      "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "generated_sql": "SELECT cost_of_treatment \nFROM Treatments \nORDER BY date_of_treatment DESC \nLIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8314101696014404,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the most common location of performances.",
          "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Show the most common nationality of pilots.",
          "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Show the most common nationality of hosts.",
          "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs have not gone through any treatment?",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8045327663421631,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many artists do not have any album?",
          "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
        },
        {
          "question": "How many enzymes do not have any interactions?",
          "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
        },
        {
          "question": "How many apartments do not have any facility?",
          "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the number of dogs that have not received any treatment .",
      "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9214456081390381,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of rooms that do not have any reservation.",
          "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
        },
        {
          "question": "List the number of customers that did not have any payment history.",
          "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"
        },
        {
          "question": "Count the number of documents that do not have expenses.",
          "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How many owners temporarily do not have any dogs?",
      "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
      "generated_sql": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = '0');",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8163187503814697,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many artists do not have any album?",
          "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
        },
        {
          "question": "How many enzymes do not have any interactions?",
          "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
        },
        {
          "question": "How many apartments do not have any facility?",
          "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of owners who do not own any dogs at this moment.",
      "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
      "generated_sql": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL AND date_departed IS NULL)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8186948299407959,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average number of followers for the users who do not have any tweet.",
          "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
        },
        {
          "question": "Find the number of users who did not write any review.",
          "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
        },
        {
          "question": "Find the number of rooms that do not have any reservation.",
          "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How many professionals did not operate any treatment on dogs?",
      "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7191109657287598,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many events did not have any participants?",
          "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
        },
        {
          "question": "How many customers did not have any event?",
          "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )"
        },
        {
          "question": "How many tourists did not make any visit?",
          "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of professionals who have not treated any dogs.",
      "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8954479694366455,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the average number of followers for the users who do not have any tweet.",
          "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
        },
        {
          "question": "Find the number of users who did not write any review.",
          "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
        },
        {
          "question": "Find the number of rooms that do not have any reservation.",
          "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
      "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
      "generated_sql": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8155655860900879,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
          "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9"
        },
        {
          "question": "List the names of technicians who have not been assigned to repair machines.",
          "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
        },
        {
          "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
          "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
      "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
      "generated_sql": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9428269863128662,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
          "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
        },
        {
          "question": "What are the average rating and resolution of songs that are in Bangla?",
          "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""
        },
        {
          "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
          "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of all the dogs?",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "generated_sql": "SELECT AVG(age) FROM Dogs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7347147464752197,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the average age of all gymnasts?",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "What is the average age of all artists?",
          "query": "SELECT avg(Age) FROM artist"
        },
        {
          "question": "What is the average weight of all players?",
          "query": "SELECT avg(weight) FROM Player"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Compute the average age of all the dogs.",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "generated_sql": "SELECT AVG(age) FROM Dogs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7436606884002686,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Compute the average price of all the products.",
          "query": "SELECT avg(price) FROM products"
        },
        {
          "question": "What is the average age of all gymnasts?",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        },
        {
          "question": "What is the average age of all artists?",
          "query": "SELECT avg(Age) FROM artist"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the age of the oldest dog?",
      "gold_sql": "SELECT max(age) FROM Dogs",
      "generated_sql": "SELECT age \nFROM Dogs \nORDER BY age DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7406299114227295,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the duration of the oldest actor?",
          "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
        },
        {
          "question": "What is the oldest age among the students?",
          "query": "SELECT max(Age) FROM STUDENT"
        },
        {
          "question": "What is the average age of all gymnasts?",
          "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the age of the oldest dog.",
      "gold_sql": "SELECT max(age) FROM Dogs",
      "generated_sql": "SELECT MAX(age) FROM Dogs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.772871732711792,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Tell me the name of the most pricy product.",
          "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1"
        },
        {
          "question": "Tell me the ages of the oldest and youngest students studying major 600.",
          "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"
        },
        {
          "question": "Tell me the highest, lowest, and average cost of procedures.",
          "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does each charge type costs? List both charge type and amount.",
      "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
      "generated_sql": "SELECT charge_type, charge_amount \nFROM Charges",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7886295318603516,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many hosts does each nationality have? List the nationality and the count.",
          "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"
        },
        {
          "question": "How many accounts does each customer have? List the number and customer id.",
          "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"
        },
        {
          "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
          "query": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List each charge type and its amount.",
      "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
      "generated_sql": "SELECT charge_type, charge_amount FROM Charges",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7307229042053223,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the number of records of each policy type and its type code.",
          "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
        },
        {
          "question": "List all document type codes and document type names.",
          "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
        },
        {
          "question": "List all budget type codes and descriptions.",
          "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does the most expensive charge type costs?",
      "gold_sql": "SELECT max(charge_amount) FROM Charges",
      "generated_sql": "SELECT MAX(charge_amount) FROM Charges",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7236888408660889,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the three most expensive procedures.",
          "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3"
        },
        {
          "question": "What type has the most games?",
          "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "How many customers are there in the customer type with the most customers?",
          "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the charge amount of the most expensive charge type?",
      "gold_sql": "SELECT max(charge_amount) FROM Charges",
      "generated_sql": "SELECT charge_amount \nFROM Charges \nORDER BY charge_amount DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7984752655029297,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the carrier of the most expensive phone?",
          "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1"
        },
        {
          "question": "What is the most common participant type?",
          "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common competition type?",
          "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the email, cell phone and home phone of all the professionals.",
      "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "generated_sql": "SELECT email_address, home_phone, cell_number FROM Professionals",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8821022510528564,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the phone numbers of all employees.",
          "query": "SELECT Phone FROM EMPLOYEE"
        },
        {
          "question": "List the grapes and appelations of all wines.",
          "query": "SELECT Grape ,  Appelation FROM WINE"
        },
        {
          "question": "List the names and scores of all wines.",
          "query": "SELECT Name ,  Score FROM WINE"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the email, cell phone and home phone of each professional?",
      "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "generated_sql": "SELECT email_address, cell_number, home_phone \nFROM Professionals",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7015607357025146,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names and capitals of each country?",
          "query": "SELECT Country_name ,  Capital FROM country"
        },
        {
          "question": "What are the date and venue of each debate?",
          "query": "SELECT Date ,  Venue FROM debate"
        },
        {
          "question": "What are the title and director of each film?",
          "query": "SELECT title ,  directed_by FROM film"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are all the possible breed type and size type combinations?",
      "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "generated_sql": "SELECT DISTINCT B.breed_code, S.size_code \nFROM Breeds B \nCROSS JOIN Sizes S",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7653734683990479,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are all the document type codes and document type names?",
          "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
        },
        {
          "question": "What are all the the participant ids, type code and details?",
          "query": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants"
        },
        {
          "question": "What are the type and nationality of ships?",
          "query": "SELECT TYPE ,  Nationality FROM ship"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the distinct breed type and size type combinations for dogs.",
      "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "generated_sql": "SELECT DISTINCT breed_code, size_code \nFROM Dogs;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7730712890625,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Find the distinct unit prices for tracks.",
          "query": "SELECT distinct(UnitPrice) FROM TRACK"
        },
        {
          "question": "Find the attribute data type for the attribute named \"Green\".",
          "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
        },
        {
          "question": "Find the description and credit for the course QM-261?",
          "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'"
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "List the first name of all the professionals along with the description of the treatment they have done.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "generated_sql": "SELECT T1.first_name, T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0657217502593994,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of all products along with the number of complaints that they have received.",
          "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"
        },
        {
          "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
          "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
        },
        {
          "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
          "query": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\""
        }
      ]
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each professional's first name and description of the treatment they have performed?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "generated_sql": "SELECT T1.first_name, T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9443597793579102,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the name and population of each county?",
          "query": "SELECT County_name ,  Population FROM county"
        },
        {
          "question": "what are the first name and last name of all candidates?",
          "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
        },
        {
          "question": "What are the first name and department name of all employees?",
          "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "How many singers are there?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6343774795532227,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many farms are there?",
          "query": "SELECT count(*) FROM farm"
        },
        {
          "question": "How many books are there?",
          "query": "SELECT count(*) FROM book"
        },
        {
          "question": "How many actors are there?",
          "query": "SELECT count(*) FROM actor"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What is the count of singers?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6022696495056152,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total count of enzymes?",
          "query": "SELECT count(*) FROM enzyme"
        },
        {
          "question": "What is the average access count of documents?",
          "query": "SELECT avg(access_count) FROM documents"
        },
        {
          "question": "What is the count of different game types?",
          "query": "SELECT count(DISTINCT gtype) FROM Video_games"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "List the name of singers in ascending order of net worth.",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "generated_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6798231601715088,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of ships in ascending order of tonnage.",
          "query": "SELECT Name FROM ship ORDER BY Tonnage ASC"
        },
        {
          "question": "List the name of products in ascending order of price.",
          "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"
        },
        {
          "question": "List the name and assets of each company in ascending order of company name.",
          "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the names of singers ordered by ascending net worth?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "generated_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6128542423248291,
      "error": null,
      "few_shot_examples": [
        {
          "question": "what are the names of the ships ordered by ascending tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage ASC"
        },
        {
          "question": "What are the names of the climbers, ordered by points descending?",
          "query": "SELECT Name FROM climber ORDER BY Points DESC"
        },
        {
          "question": "What are the names of the technicians by ascending order of age?",
          "query": "SELECT Name FROM technician ORDER BY Age ASC"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the birth year and citizenship of singers?",
      "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
      "generated_sql": "SELECT Birth_Year, Citizenship FROM singer",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.639230489730835,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the team and starting year of technicians?",
          "query": "SELECT Team ,  Starting_Year FROM technician"
        },
        {
          "question": "What are the title and issues of the books?",
          "query": "SELECT Title ,  Issues FROM book"
        },
        {
          "question": "What are the characters and duration of actors?",
          "query": "SELECT Character ,  Duration FROM actor"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the birth years and citizenships of the singers?",
      "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
      "generated_sql": "SELECT Birth_Year, Citizenship FROM singer",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6330733299255371,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the title and issues of the books?",
          "query": "SELECT Title ,  Issues FROM book"
        },
        {
          "question": "What are the characters and duration of actors?",
          "query": "SELECT Character ,  Duration FROM actor"
        },
        {
          "question": "What are the names and ages of editors?",
          "query": "SELECT Name ,  Age FROM editor"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "List the name of singers whose citizenship is not \"France\".",
      "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "generated_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7353148460388184,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of actors whose age is not 20.",
          "query": "SELECT Name FROM actor WHERE Age != 20"
        },
        {
          "question": "List the name of technicians whose team is not \"NYY\".",
          "query": "SELECT Name FROM technician WHERE Team != \"NYY\""
        },
        {
          "question": "List the name of ships whose nationality is not \"United States\".",
          "query": "SELECT Name FROM ship WHERE Nationality != \"United States\""
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers who are not French citizens?",
      "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "generated_sql": "SELECT Name FROM singer WHERE Citizenship != 'France'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6413908004760742,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of people who are not entrepreneurs?",
          "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
        },
        {
          "question": "What are the names of actors who are not 20 years old?",
          "query": "SELECT Name FROM actor WHERE Age != 20"
        },
        {
          "question": "What are the names of enzymes who does not produce 'Heme'?",
          "query": "SELECT name FROM enzyme WHERE product != 'Heme'"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show the name of singers whose birth year is either 1948 or 1949?",
      "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
      "generated_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7239093780517578,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
          "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
        },
        {
          "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
          "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\""
        },
        {
          "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
          "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
      "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
      "generated_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7142841815948486,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the technicians aged either 36 or 37?",
          "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
        },
        {
          "question": "What are the names of the ships  that are from either the US or the UK?",
          "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""
        },
        {
          "question": "What are the names of rooms that have either king or queen bed?",
          "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What is the name of the singer with the largest net worth?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "generated_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6587190628051758,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the ship with the largest tonnage?",
          "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
        },
        {
          "question": "What is the name of the player with the largest number of votes?",
          "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
        },
        {
          "question": "What is the name of the department with the most credits?",
          "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What is the name of the singer who is worth the most?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "generated_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6518590450286865,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the name of the person who is the oldest?",
          "query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)"
        },
        {
          "question": "What is the name of the artist who joined latest?",
          "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
        },
        {
          "question": "What is the name of the youngest editor?",
          "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show different citizenship of singers and the number of singers of each citizenship.",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6642160415649414,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the different nationalities and the number of journalists of each nationality.",
          "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"
        },
        {
          "question": "Show different types of ships and the number of ships of each type.",
          "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE"
        },
        {
          "question": "Show different locations and the number of performances at each location.",
          "query": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, how many singers are from that country?",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7522420883178711,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many players are from each country?",
          "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
        },
        {
          "question": "How many climbers are from each country?",
          "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
        },
        {
          "question": "How many students are there for each major?",
          "query": "SELECT major ,  count(*) FROM Student GROUP BY major"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Please show the most common citizenship of singers.",
      "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8267941474914551,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Please show the most common age of editors.",
          "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Please show the most common occupation of players.",
          "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Please show the most common reigns of wrestlers.",
          "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What is the most common singer citizenship ?",
      "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
      "generated_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6517379283905029,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the most common participant type?",
          "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common competition type?",
          "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "What is the most common type of ships?",
          "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
      "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) \nFROM singer \nGROUP BY Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7373039722442627,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the different nationalities and the number of journalists of each nationality.",
          "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"
        },
        {
          "question": "Show different types of ships and the number of ships of each type.",
          "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE"
        },
        {
          "question": "Show different locations and the number of performances at each location.",
          "query": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, what is the maximum net worth?",
      "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) \nFROM singer \nGROUP BY Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7149252891540527,
      "error": null,
      "few_shot_examples": [
        {
          "question": "For each type, what is the average tonnage?",
          "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE"
        },
        {
          "question": "What is the average age for each gender?",
          "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender"
        },
        {
          "question": "What is the number of artists for each gender?",
          "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show titles of songs and names of singers.",
      "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "generated_sql": "SELECT T2.Title, T1.Name \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7240927219390869,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of companies and of employees.",
          "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID"
        },
        {
          "question": "Show the names of players and names of their coaches.",
          "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
        },
        {
          "question": "Please show the names and the players of clubs.",
          "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the song titles and singer names?",
      "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "generated_sql": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nJOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.811337947845459,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are all the location codes and location names?",
          "query": "SELECT location_code ,  location_name FROM Ref_locations"
        },
        {
          "question": "What are the titles of films and corresponding types of market estimations?",
          "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID"
        },
        {
          "question": "What are the titles of all the Aerosmith albums?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show distinct names of singers that have songs with sales more than 300000.",
      "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8361408710479736,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show names of pilots that have more than one record.",
          "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
          "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"
        },
        {
          "question": "Show the names of employees that work for companies with sales bigger than 200.",
          "query": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "what are the different names of the singers that have sales more than 300000?",
      "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING SUM(T2.Sales) > 300000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8401672840118408,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of the albums that have more than 10 tracks?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
        },
        {
          "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
          "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
        },
        {
          "question": "What are the names of all the Japanese constructors that have earned more than 5 points?",
          "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show the names of singers that have more than one song.",
      "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(*) > 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8425016403198242,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of journalists that have reported more than one event.",
          "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the names of the buildings that have more than one company offices.",
          "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"
        },
        {
          "question": "Show the names of countries that have more than one roller coaster.",
          "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers that have more than one songs?",
      "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Singer_ID \nHAVING COUNT(*) > 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.803189754486084,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of ships that have more than one captain?",
          "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
        },
        {
          "question": "What are the official names of cities that have hosted more than one competition?",
          "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
        },
        {
          "question": "What are the names of the albums that have more than 10 tracks?",
          "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show the names of singers and the total sales of their songs.",
      "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "generated_sql": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7894201278686523,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the names of players and names of their coaches.",
          "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"
        },
        {
          "question": "Show the country names and the corresponding number of players.",
          "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
        },
        {
          "question": "What are the names of the different bank branches, and what are their total loan amounts?",
          "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "For each singer name, what is the total sales for their songs?",
      "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "generated_sql": "SELECT T1.Name, SUM(T2.Sales) \nFROM singer AS T1 \nJOIN song AS T2 \nON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.79398512840271,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total rating of channel for each channel owner?",
          "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER"
        },
        {
          "question": "What is the average rating star for each reviewer?",
          "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
        },
        {
          "question": "What is the average salary for each job title?",
          "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "List the name of singers that do not have any song.",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "generated_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6302216053009033,
      "error": null,
      "few_shot_examples": [
        {
          "question": "List the name of musicals that do not have actors.",
          "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
        },
        {
          "question": "List the names of mountains that do not have any climber.",
          "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
        },
        {
          "question": "Find the name of the courses that do not have any prerequisite?",
          "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "What is the sname of every sing that does not have any song?",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "generated_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.654564380645752,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the total number of enrollment of schools that do not have any goalie player?",
          "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"
        },
        {
          "question": "What are the names of artists that have not had any exhibitions?",
          "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
        },
        {
          "question": "What are the names of documents that do not have any sections?",
          "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"
        }
      ]
    },
    {
      "db_id": "singer",
      "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
      "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "singer",
      "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
      "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "real_estate_properties",
      "question": "How many available features are there in total?",
      "gold_sql": "SELECT count(*) FROM Other_Available_Features",
      "generated_sql": "SELECT COUNT(*) FROM Other_Available_Features",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7391645908355713,
      "error": null,
      "few_shot_examples": [
        {
          "question": "How many available hotels are there in total?",
          "query": "SELECT count(*) FROM HOTELS"
        },
        {
          "question": "How many countries are there in total?",
          "query": "SELECT count(*) FROM country"
        },
        {
          "question": "How many accounts are there in total?",
          "query": "SELECT count(*) FROM accounts"
        }
      ]
    },
    {
      "db_id": "real_estate_properties",
      "question": "What is the feature type name of feature AirCon?",
      "gold_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
      "generated_sql": "SELECT T1.feature_type_name \nFROM Ref_Feature_Types AS T1 \nJOIN Other_Available_Features AS T2 \nON T1.feature_type_code = T2.feature_type_code \nWHERE T2.feature_name = 'AirCon'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0577964782714844,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What is the attribute data type of the attribute with name \"Green\"?",
          "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""
        },
        {
          "question": "What is the name of tracks whose genre is Rock?",
          "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
        },
        {
          "question": "What is the genre name of the film HUNGER ROOF?",
          "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"
        }
      ]
    },
    {
      "db_id": "real_estate_properties",
      "question": "Show the property type descriptions of properties belonging to that code.",
      "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
      "generated_sql": "SELECT T1.property_type_description \nFROM Ref_Property_Types AS T1 \nJOIN Properties AS T2 \nON T1.property_type_code = T2.property_type_code;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9630005359649658,
      "error": null,
      "few_shot_examples": [
        {
          "question": "Show the description of the transaction type that occurs most frequently.",
          "query": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
        },
        {
          "question": "Show the card type codes and the number of transactions.",
          "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"
        },
        {
          "question": "Show the name of the party that has the most delegates.",
          "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
        }
      ]
    },
    {
      "db_id": "real_estate_properties",
      "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
      "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
      "generated_sql": "SELECT property_name \nFROM Properties \nWHERE (property_type_code = 'House' OR property_type_code = 'Apartment') \nAND room_count > 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8435611724853516,
      "error": null,
      "few_shot_examples": [
        {
          "question": "What are the names of regions with two or more storms?",
          "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
        },
        {
          "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
          "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""
        },
        {
          "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
          "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"
        }
      ]
    }
  ],
  "has_gold_sql": true,
  "few_shot_config": {
    "num_examples": 3,
    "strategy": "hybrid",
    "seed": 42
  }
}