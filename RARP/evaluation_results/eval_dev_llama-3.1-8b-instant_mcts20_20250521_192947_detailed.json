{
  "model": "llama-3.1-8b-instant",
  "dataset": "dev.json",
  "total_examples": 1034,
  "exact_match_accuracy": 0.09284332688588008,
  "execution_match_accuracy": 0.5454545454545454,
  "execution_success_rate": 0.8704061895551257,
  "error_rate": 0.06866537717601548,
  "average_time_per_query": 1.6349186606748423,
  "total_time": 1690.5058951377869,
  "per_database_accuracy": {
    "concert_singer": {
      "exact_match_accuracy": 0.06666666666666667,
      "execution_match_accuracy": 0.5333333333333333,
      "execution_success_rate": 0.8444444444444444,
      "mcts_usage_rate": 0.13333333333333333,
      "total_examples": 45
    },
    "pets_1": {
      "exact_match_accuracy": 0.09523809523809523,
      "execution_match_accuracy": 0.47619047619047616,
      "execution_success_rate": 0.7857142857142857,
      "mcts_usage_rate": 0.11904761904761904,
      "total_examples": 42
    },
    "car_1": {
      "exact_match_accuracy": 0.11956521739130435,
      "execution_match_accuracy": 0.34782608695652173,
      "execution_success_rate": 0.8369565217391305,
      "mcts_usage_rate": 0.1956521739130435,
      "total_examples": 92
    },
    "flight_2": {
      "exact_match_accuracy": 0.075,
      "execution_match_accuracy": 0.7625,
      "execution_success_rate": 0.8125,
      "mcts_usage_rate": 0.1375,
      "total_examples": 80
    },
    "employee_hire_evaluation": {
      "exact_match_accuracy": 0.02631578947368421,
      "execution_match_accuracy": 0.6052631578947368,
      "execution_success_rate": 0.8947368421052632,
      "mcts_usage_rate": 0.21052631578947367,
      "total_examples": 38
    },
    "cre_Doc_Template_Mgt": {
      "exact_match_accuracy": 0.07142857142857142,
      "execution_match_accuracy": 0.7261904761904762,
      "execution_success_rate": 0.9047619047619048,
      "mcts_usage_rate": 0.2261904761904762,
      "total_examples": 84
    },
    "course_teach": {
      "exact_match_accuracy": 0.13333333333333333,
      "execution_match_accuracy": 0.7333333333333333,
      "execution_success_rate": 0.9333333333333333,
      "mcts_usage_rate": 0.2,
      "total_examples": 30
    },
    "museum_visit": {
      "exact_match_accuracy": 0.16666666666666666,
      "execution_match_accuracy": 0.5555555555555556,
      "execution_success_rate": 0.9444444444444444,
      "mcts_usage_rate": 0.2777777777777778,
      "total_examples": 18
    },
    "wta_1": {
      "exact_match_accuracy": 0.12903225806451613,
      "execution_match_accuracy": 0.3064516129032258,
      "execution_success_rate": 0.8064516129032258,
      "mcts_usage_rate": 0.12903225806451613,
      "total_examples": 62
    },
    "battle_death": {
      "exact_match_accuracy": 0.1875,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 0.875,
      "mcts_usage_rate": 0.125,
      "total_examples": 16
    },
    "student_transcripts_tracking": {
      "exact_match_accuracy": 0.08974358974358974,
      "execution_match_accuracy": 0.5384615384615384,
      "execution_success_rate": 0.8589743589743589,
      "mcts_usage_rate": 0.16666666666666666,
      "total_examples": 78
    },
    "tvshow": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.4838709677419355,
      "execution_success_rate": 0.8870967741935484,
      "mcts_usage_rate": 0.12903225806451613,
      "total_examples": 62
    },
    "poker_player": {
      "exact_match_accuracy": 0.2,
      "execution_match_accuracy": 0.85,
      "execution_success_rate": 0.975,
      "mcts_usage_rate": 0.25,
      "total_examples": 40
    },
    "voter_1": {
      "exact_match_accuracy": 0.13333333333333333,
      "execution_match_accuracy": 0.8,
      "execution_success_rate": 0.9333333333333333,
      "mcts_usage_rate": 0.0,
      "total_examples": 15
    },
    "world_1": {
      "exact_match_accuracy": 0.041666666666666664,
      "execution_match_accuracy": 0.30833333333333335,
      "execution_success_rate": 0.875,
      "mcts_usage_rate": 0.16666666666666666,
      "total_examples": 120
    },
    "orchestra": {
      "exact_match_accuracy": 0.25,
      "execution_match_accuracy": 0.725,
      "execution_success_rate": 0.875,
      "mcts_usage_rate": 0.075,
      "total_examples": 40
    },
    "network_1": {
      "exact_match_accuracy": 0.07142857142857142,
      "execution_match_accuracy": 0.48214285714285715,
      "execution_success_rate": 0.8392857142857143,
      "mcts_usage_rate": 0.125,
      "total_examples": 56
    },
    "dog_kennels": {
      "exact_match_accuracy": 0.012195121951219513,
      "execution_match_accuracy": 0.5609756097560976,
      "execution_success_rate": 0.9146341463414634,
      "mcts_usage_rate": 0.21951219512195122,
      "total_examples": 82
    },
    "singer": {
      "exact_match_accuracy": 0.3333333333333333,
      "execution_match_accuracy": 0.8333333333333334,
      "execution_success_rate": 0.9,
      "mcts_usage_rate": 0.13333333333333333,
      "total_examples": 30
    },
    "real_estate_properties": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 4
    }
  },
  "results": [
    {
      "db_id": "concert_singer",
      "question": "How many singers do we have?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6331117153167725,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the total number of singers?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2113804817199707,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "generated_sql": "SELECT name, country, age \nFROM singer \nORDER BY age DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.19331669807434082,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "generated_sql": "SELECT s.Name, s.Country, s.Age\nFROM singer s\nWHERE s.Age > 18\nORDER BY s.Age DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.9624083042144775,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "generated_sql": "SELECT AVG(T1.Age) AS Average_Age, \n       MIN(T1.Age) AS Minimum_Age, \n       MAX(T1.Age) AS Maximum_Age\nFROM singer T1\nJOIN singer_in_concert T2 ON T1.Singer_ID = T2.Singer_ID\nJOIN concert T3 ON T2.concert_ID = T3.concert_ID\nWHERE T1.Country = 'France' AND T3.Year > '2010'",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.350201368331909,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "generated_sql": "SELECT AVG(s.Age) AS Average_Age, MIN(s.Age) AS Minimum_Age, MAX(s.Age) AS Maximum_Age\nFROM singer s\nWHERE s.Country = 'France';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33499932289123535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show the name and the release year of the song by the youngest singer.",
      "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.`Song_release_year`\nFROM singer AS T1\nJOIN (\n  SELECT Singer_ID, MIN(Age) AS min_age\n  FROM singer\n  GROUP BY Singer_ID\n) AS T2\nON T1.Singer_ID = T2.Singer_ID\nORDER BY T2.min_age DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3244204521179199,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.`Song_release_year`\nFROM singer AS T1\nWHERE T1.Age = (SELECT MIN(Age) FROM singer)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3991811275482178,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are all distinct countries where singers above age 20 are from?",
      "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "generated_sql": "SELECT DISTINCT T2.Country \nFROM singer AS T2 \nJOIN singer_in_concert AS T1 ON T2.Singer_ID = T1.Singer_ID \nWHERE T2.Age > 20;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.37794971466064453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are  the different countries with singers above age 20?",
      "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "generated_sql": "SELECT DISTINCT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age > 20;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5160553455352783,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show all countries and the number of singers in each country.",
      "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "generated_sql": "SELECT T1.Country, COUNT(T2.Singer_ID) AS Singer_Count\nFROM singer AS T1\nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID\nGROUP BY T1.Country;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3892202377319336,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "How many singers are from each country?",
      "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "generated_sql": "SELECT T2.Country, COUNT(*) FROM singer_in_concert AS T1 \nINNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T2.Country",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4017617702484131,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "List all song names by singers above the average age.",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT s.Name, s.Song_Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nWHERE s.Age > (SELECT AVG(Age) FROM singer);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.45153093338012695,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are all the song names by singers who are older than average?",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT T1.Song_Name \nFROM singer AS T1 \nJOIN (\n  SELECT Singer_ID, AVG(Age) AS avg_age \n  FROM singer \n  GROUP BY Singer_ID\n) AS T2 \nON T1.Singer_ID = T2.Singer_ID \nWHERE T2.avg_age < (SELECT AVG(Age) FROM singer) \nGROUP BY T1.Song_Name \nORDER BY COUNT(T1.Song_Name) DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.707901954650879,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "concert_singer",
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "generated_sql": "SELECT T1.Location, T1.Name \nFROM stadium AS T1 \nWHERE T1.Capacity BETWEEN 5000 AND 10000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.407347202301025,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "generated_sql": "SELECT T1.Location, T1.Name\nFROM stadium AS T1\nWHERE T1.Capacity BETWEEN 5000 AND 10000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.3073883056640625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the maximum capacity and the average of all stadiums ?",
      "gold_sql": "select max(capacity), average from stadium",
      "generated_sql": "SELECT MAX(Capacity) AS max_capacity, AVG(Average) AS avg_capacity\nFROM stadium;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2845301628112793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average and maximum capacities for all stadiums ?",
      "gold_sql": "select avg(capacity) ,  max(capacity) from stadium",
      "generated_sql": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity\nFROM stadium;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.315765380859375,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "generated_sql": "SELECT Name, Capacity\nFROM stadium\nORDER BY Average DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30622029304504395,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "generated_sql": "SELECT Name, Capacity\nFROM stadium\nORDER BY Average DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39873433113098145,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "How many concerts are there in year 2014 or 2015?",
      "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "generated_sql": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE YEAR IN ('2014', '2015');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41867828369140625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "How many concerts occurred in 2014 or 2015?",
      "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "generated_sql": "SELECT COUNT(concert_ID) \nFROM concert \nWHERE Year IN ('2014', '2015');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.46914005279541016,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "generated_sql": "SELECT s.Name, COUNT(c.concert_ID) as num_concerts\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.034562587738037,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "concert_singer",
      "question": "For each stadium, how many concerts play there?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "generated_sql": "SELECT s.Name, COUNT(c.concert_ID) as num_concerts\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.407822847366333,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "gold_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN (\n  SELECT c.Stadium_ID, COUNT(*) as num_concerts\n  FROM concert c\n  WHERE c.Year >= '2014'\n  GROUP BY c.Stadium_ID\n) AS concert_counts\nON s.Stadium_ID = concert_counts.Stadium_ID\nORDER BY concert_counts.num_concerts DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8182086944580078,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
      "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
      "generated_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN (\n  SELECT c.Stadium_ID, COUNT(DISTINCT c.concert_ID) as num_concerts\n  FROM concert c\n  WHERE c.Year > '2013'\n  AND c.Year < '2020'\n  GROUP BY c.Stadium_ID\n) AS most_concerts ON s.Stadium_ID = most_concerts.Stadium_ID\nORDER BY most_concerts.num_concerts DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 10.54847502708435,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "concert_singer",
      "question": "Which year has most number of concerts?",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT YEAR \nFROM concert \nGROUP BY YEAR \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5982742309570312,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the year that had the most concerts?",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT YEAR \nFROM concert \nGROUP BY YEAR \nORDER BY COUNT(concert_ID) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4229276180267334,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium names without any concert.",
      "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "generated_sql": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nLEFT JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID \nWHERE T3.concert_ID IS NULL",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6103920936584473,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the stadiums without any concerts?",
      "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "generated_sql": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nWHERE sic.concert_ID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.89180326461792,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "gold_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "concert_singer",
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "concert_singer",
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "gold_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
      "generated_sql": "SELECT \n  c.concert_Name, \n  c.Theme, \n  COUNT(si.Singer_ID) AS Number_of_Singers\nFROM \n  concert c\n  JOIN singer_in_concert si ON c.concert_ID = si.concert_ID\nGROUP BY \n  c.concert_Name, \n  c.Theme;",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.54964542388916,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names , themes , and number of singers for every concert ?",
      "gold_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
      "generated_sql": "SELECT \n  c.concert_Name, \n  c.Theme, \n  COUNT(DISTINCT si.Singer_ID) AS Number_of_Singers\nFROM \n  concert c\n  JOIN singer_in_concert si ON c.concert_ID = si.concert_ID\nGROUP BY \n  c.concert_Name, \n  c.Theme",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28507518768310547,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "List singer names and number of concerts for each singer.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "generated_sql": "SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_concerts\nFROM singer s\nJOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID\nGROUP BY s.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40735888481140137,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers and number of concerts for each person?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "generated_sql": "SELECT s.Name, COUNT(ci.concert_ID) AS Number_of_Concerts\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nGROUP BY s.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.069264888763428,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "List all singer names in concerts in year 2014.",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "generated_sql": "SELECT T2.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID \nJOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID \nWHERE T1.Year = '2014';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.7658841609954834,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "generated_sql": "SELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.016923427581787,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "generated_sql": "SELECT s.Name, s.Country\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE s.Song_Name LIKE '%Hey%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4088022708892822,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "generated_sql": "SELECT s.Name, s.Country\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE s.Song_Name LIKE '%Hey%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.35176825523376465,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "concert_singer",
      "question": "Find the number of concerts happened in the stadium with the highest capacity .",
      "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "generated_sql": "SELECT COUNT(*) \nFROM stadium \nWHERE Capacity = (SELECT MAX(Capacity) FROM stadium);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3659985065460205,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
      "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "generated_sql": "SELECT COUNT(*) \nFROM stadium \nWHERE Capacity = (SELECT MAX(Capacity) FROM stadium);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.603080987930298,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of pets whose weight is heavier than 10.",
      "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3049142360687256,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "How many pets have a greater weight than 10?",
      "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Pets \nWHERE weight > 10;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3149263858795166,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the weight of the youngest dog.",
      "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T2.weight \nFROM Pets AS T2 \nJOIN Has_Pet AS T1 ON T2.PetID = T1.PetID \nJOIN Student AS T3 ON T1.StuID = T3.StuID \nWHERE T2.pet_age = (SELECT MIN(T2.pet_age) FROM Pets AS T2 JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T2.PetType = 'dog')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6053707599639893,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "How much does the youngest dog weigh?",
      "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T2.weight \nFROM Pets AS T2 \nJOIN Has_Pet AS T1 ON T2.PetID = T1.PetID \nWHERE T2.pet_age = (SELECT MIN(T2.pet_age) \n                    FROM Pets AS T2 \n                    JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID \n                    WHERE T2.PetType = 'dog')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40880656242370605,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "generated_sql": "SELECT PetType, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40981245040893555,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "List the maximum weight and type for each type of pet.",
      "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "generated_sql": "SELECT PetType, MAX(weight) as max_weight\nFROM Pets\nGROUP BY PetType;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3027925491333008,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find number of pets owned by students who are older than 20.",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nWHERE s.Age > 20;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.3598310947418213,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "How many pets are owned by students that have an age greater than 20?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(DISTINCT T1.StuID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Age > 20;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4061286449432373,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(T1.StuID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Sex = 'F' AND T3.PetType = 'dog'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5080409049987793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "How many dog pets are raised by female students?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8186604976654053,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of distinct type of pets.",
      "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
      "generated_sql": "SELECT COUNT(DISTINCT PetType) \nFROM Pets;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3238680362701416,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "How many different types of pet are there?",
      "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
      "generated_sql": "SELECT COUNT(DISTINCT PetType) \nFROM Pets;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5091044902801514,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name of students who have cat or dog pet.",
      "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType IN ('cat', 'dog')",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4832730293273926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType IN ('cat', 'dog')",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42299365997314453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name of students who have both cat and dog pets .",
      "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'cat' AND T3.PetType = 'dog'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35421037673950195,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "pets_1",
      "question": "Find the major and age of students who do not have a cat pet.",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname, T1.LName, T1.Age, T1.Major\nFROM Student AS T1\nWHERE T1.StuID NOT IN (\n  SELECT T2.StuID\n  FROM Has_Pet AS T2\n  JOIN Pets AS T3 ON T2.PetID = T3.PetID\n  WHERE T3.PetType = 'cat'\n)\nORDER BY T1.Age DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.298704385757446,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "pets_1",
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT S.Fname, S.LName, S.Age, M.MajorName \nFROM Student S \nJOIN Major M ON S.Major = M.MajorID \nWHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 7.9812986850738525,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the id of students who do not have a cat pet.",
      "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "pets_1",
      "question": "What are the ids of the students who do not own cats as pets?",
      "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname, T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog' AND T3.PetType != 'cat'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3293759822845459,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.PetType = 'dog' AND T3.PetType != 'cat'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3106074333190918,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the type and weight of the youngest pet.",
      "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T2.PetType, T2.weight \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nORDER BY T3.pet_age ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.354557752609253,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT P.pet_type, P.weight\nFROM Pets P\nJOIN Has_Pet HP ON P.petid = HP.petid\nJOIN Student S ON HP.stuid = S.stuid\nWHERE P.pet_age = (SELECT MIN(P2.pet_age) FROM Pets P2)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.220977306365967,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "generated_sql": "SELECT P.PetID, P.weight \nFROM Pets P \nJOIN Has_Pet HP ON P.PetID = HP.PetID \nGROUP BY P.PetID \nHAVING P.pet_age > 1 \nORDER BY P.pet_age DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.102341890335083,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "pets_1",
      "question": "What is the id and weight of every pet who is older than 1?",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "generated_sql": "SELECT T1.PetID, T2.weight \nFROM Pets AS T2 \nJOIN Has_Pet AS T1 ON T2.PetID = T1.PetID \nWHERE T2.pet_age > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5821435451507568,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the average and maximum age for each type of pet.",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT \n  p.pet_type, \n  AVG(p.pet_age) AS avg_age, \n  MAX(p.pet_age) AS max_age\nFROM \n  Pets p\nGROUP BY \n  p.pet_type;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.219276189804077,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What is the average and maximum age for each pet type?",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT \n  P.PetType, \n  AVG(P.pet_age) AS avg_age, \n  MAX(P.pet_age) AS max_age\nFROM \n  Pets P\nGROUP BY \n  P.PetType;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4095287322998047,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the average weight for each pet type.",
      "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT T2.PetType, AVG(T3.weight) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nGROUP BY T2.PetType;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.3404557704925537,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What is the average weight for each type of pet?",
      "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT T2.PetType, AVG(T3.weight) \nFROM Student AS T1 \nINNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nINNER JOIN Pets AS T3 ON T2.PetID = T3.PetID \nGROUP BY T2.PetType;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.498375415802002,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a pet.",
      "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "generated_sql": "SELECT T1.Fname, T1.Age\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN Pets AS T3 ON T2.PetID = T3.PetID",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4994020462036133,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What are the different first names and ages of the students who do have pets?",
      "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "generated_sql": "SELECT DISTINCT T1.Fname, T1.Age\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN Pets AS T3 ON T2.PetID = T3.PetID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2935640811920166,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "generated_sql": "SELECT T1.StuID\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN Pets AS T3 ON T2.PetID = T3.PetID\nWHERE T1.LName = 'Smith' ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.22642707824707,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "pets_1",
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "generated_sql": "SELECT T1.StuID\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN Pets AS T3 ON T2.PetID = T3.PetID\nWHERE T1.LName = 'Smith'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3264021873474121,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of pets for each student who has any pet and student id.",
      "gold_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
      "generated_sql": "SELECT S.StuID, COUNT(*) as num_pets\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID\nHAVING COUNT(*) > 0;",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.189515590667725,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "pets_1",
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
      "gold_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
      "generated_sql": "SELECT S.StuID, COUNT(H.PetID) AS num_pets\nFROM Student S\nJOIN Has_Pet H ON S.StuID = H.StuID\nGROUP BY S.StuID\nORDER BY num_pets DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36144447326660156,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and gender of student who have more than one pet.",
      "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Fname, T1.Sex\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.StuID\nHAVING COUNT(T2.PetID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.7822301387786865,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Fname, T1.Sex\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.StuID\nHAVING COUNT(T2.PetID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40674638748168945,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the last name of the student who has a cat that is age 3.",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "generated_sql": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.pet_age = 3 AND T3.PetType = 'cat' \nGROUP BY T1.LName \nORDER BY COUNT(T1.LName) DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.81452488899231,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "pets_1",
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "generated_sql": "SELECT T1.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T3.pet_age = 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4046196937561035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the average age of students who do not have any pet .",
      "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "generated_sql": "SELECT AVG(T1.Age) \nFROM Student T1 \nLEFT JOIN Has_Pet T2 ON T1.StuID = T2.StuID \nWHERE T2.StuID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.408566951751709,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "What is the average age for all students who do not own any pets ?",
      "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "generated_sql": "SELECT AVG(T2.Age) \nFROM Pets AS T1 \nLEFT JOIN Student AS T2 ON T1.PetID = T2.StuID \nWHERE T1.PetID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30527424812316895,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many continents are there?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2807750701904297,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of continents?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9235551357269287,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "generated_sql": "SELECT \n    c.ContId, \n    c.Continent, \n    COUNT(*) as num_countries\nFROM \n    countries c\nGROUP BY \n    c.ContId, \n    c.Continent\nORDER BY \n    c.ContId;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 7.601983308792114,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "For each continent, list its id, name, and how many countries it has?",
      "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "generated_sql": "SELECT \n  c.ContId,\n  c.Continent,\n  COUNT(*) AS num_countries\nFROM \n  countries c\nGROUP BY \n  c.ContId, c.Continent\nORDER BY \n  c.ContId;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.4227941036224365,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many countries are listed?",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "generated_sql": "SELECT COUNT(*) FROM countries",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.19136357307434082,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many countries exist?",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "generated_sql": "SELECT COUNT(*) FROM countries",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5184087753295898,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT \n  cm.FullName, \n  cm.Id, \n  COUNT(ml.Model) as Number\nFROM \n  car_makers cm\nJOIN \n  model_list ml ON cm.Id = ml.Maker\nGROUP BY \n  cm.FullName, cm.Id\nORDER BY \n  cm.FullName;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3120739459991455,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT \n    c.Maker, \n    c.FullName, \n    c.Id, \n    COUNT(ml.Model) as ModelCount\nFROM \n    car_makers c\nJOIN \n    model_list ml ON c.Id = ml.Maker\nGROUP BY \n    c.Maker, \n    c.FullName, \n    c.Id\nORDER BY \n    c.Maker;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6195223331451416,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which model of the car has the minimum horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "generated_sql": "SELECT Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.9721059799194336,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Model\nFROM model_list AS T1\nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId\nJOIN cars_data AS T3 ON T2.MakeId = T3.Id\nWHERE T3.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8674216270446777,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Find the model of the car whose weight is below the average weight.",
      "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "generated_sql": "SELECT T1.Model \nFROM model_list AS T1 \nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId \nJOIN cars_data AS T3 ON T2.MakeId = T3.Id \nWHERE T3.Weight < (SELECT AVG(Weight) FROM cars_data);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6759209632873535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the model for the car with a weight smaller than the average?",
      "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "generated_sql": "SELECT T1.Model, T3.Weight \nFROM model_list AS T1 \nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId \nJOIN cars_data AS T3 ON T2.MakeId = T3.Id \nWHERE T3.Weight < (SELECT AVG(Weight) FROM cars_data) \nORDER BY T3.Weight DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.810863733291626,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "generated_sql": "SELECT DISTINCT T1.Maker\nFROM car_makers AS T1\nJOIN model_list AS T2 ON T1.Id = T2.Maker\nJOIN car_names AS T3 ON T2.ModelId = T3.MakeId\nJOIN cars_data AS T4 ON T3.MakeId = T4.Id\nWHERE T4.Year = 1970 AND T1.Id IN (\n  SELECT T1.Id\n  FROM car_makers AS T1\n  JOIN model_list AS T2 ON T1.Id = T2.Maker\n  JOIN car_names AS T3 ON T2.ModelId = T3.MakeId\n  JOIN cars_data AS T4 ON T3.MakeId = T4.Id\n  GROUP BY T1.Id\n  HAVING COUNT(T4.Id) > 0\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42717695236206055,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the name of the different car makers who produced a car in 1970?",
      "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "generated_sql": "SELECT DISTINCT cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.ModelId = cn.MakeId\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0308332443237305,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Find the make and production time of the cars that were produced in the earliest year?",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "generated_sql": "SELECT c.Make, MIN(cd.Year) AS Earliest_Year\nFROM car_names c\nJOIN cars_data cd ON c.MakeId = cd.Id\nGROUP BY c.Make\nORDER BY Earliest_Year ASC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.249833345413208,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What is the maker of the carr produced in the earliest year and what year was it?",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "generated_sql": "SELECT T2.Maker, T1.Model, T4.Year\nFROM car_names AS T1\nJOIN car_makers AS T2 ON T1.MakeId = T2.Id\nJOIN model_list AS T3 ON T2.Id = T3.Maker\nJOIN cars_data AS T4 ON T1.MakeId = T4.Id\nGROUP BY T2.Maker, T1.Model, T4.Year\nHAVING T4.Year = (SELECT MIN(T4.Year) FROM cars_data AS T4)",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.4950244426727295,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "Which distinct car models are the produced after 1980?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "generated_sql": "SELECT DISTINCT T1.Model \nFROM model_list AS T1 \nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId \nJOIN cars_data AS T3 ON T2.MakeId = T3.Id \nWHERE T3.Year > 1980 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.6030707359313965,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What are the different models for the cards produced after 1980?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T1.Year > 1980;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7777259349822998,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many car makers are there in each continents? List the continent name and the count.",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "generated_sql": "SELECT \n    c.Continent, \n    COUNT(cm.Maker) as MakerCount\nFROM \n    continents c\nJOIN \n    countries co ON c.ContId = co.Continent\nJOIN \n    car_makers cm ON co.CountryId = cm.Country\nGROUP BY \n    c.Continent\nORDER BY \n    c.Continent;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32740068435668945,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the name of each continent and how many car makers are there in each one?",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "generated_sql": "SELECT \n    c.Continent, \n    COUNT(cm.Maker) as num_makers\nFROM \n    continents c\nJOIN \n    countries co ON c.ContId = co.Continent\nJOIN \n    car_makers cm ON co.CountryId = cm.Country\nGROUP BY \n    c.Continent;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29010987281799316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which of the countries has the most car makers? List the country name.",
      "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T1.CountryName\nFROM countries AS T1\nJOIN car_makers AS T2 ON T1.CountryId = T2.Country\nGROUP BY T1.CountryName\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2427692413330078,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the name of the country with the most car makers?",
      "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT c.CountryName, COUNT(cm.Maker) as total_makers\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryName\nORDER BY total_makers DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3385796546936035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
      "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
      "generated_sql": "SELECT \n    cm.FullName, \n    COUNT(ml.Model) as count\nFROM \n    car_makers cm\nJOIN \n    model_list ml ON cm.Id = ml.Maker\nGROUP BY \n    cm.FullName",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5525543689727783,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
      "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
      "generated_sql": "SELECT \n    c.Maker, \n    c.FullName, \n    COUNT(m.ModelId) AS num_models\nFROM \n    car_makers c\nJOIN \n    model_list m ON c.Id = m.Maker\nGROUP BY \n    c.Maker, c.FullName\nORDER BY \n    c.Maker;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.535219669342041,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
      "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "generated_sql": "SELECT T1.Accelerate\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nJOIN model_list AS T3 ON T2.Model = T3.ModelId\nJOIN car_makers AS T4 ON T3.Maker = T4.Id\nWHERE T4.Maker = 'AMC Hornet Sportabout (SW)'\nGROUP BY T1.Accelerate\nORDER BY COUNT(T1.Id) DESC\nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.599741220474243,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
      "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "generated_sql": "SELECT T1.Accelerate\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nJOIN model_list AS T3 ON T2.Model = T3.Model\nJOIN car_makers AS T4 ON T3.Maker = T4.Id\nWHERE T4.Maker = 'amc' AND T2.Model = 'hornet sportabout (sw)';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.37241339683532715,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many car makers are there in france?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nWHERE Country = (SELECT CountryId \n                 FROM countries \n                 WHERE CountryName = 'france');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.46114063262939453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of makers of care in France?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nWHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France') ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.7021055221557617,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "How many car models are produced in the usa?",
      "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Model) \nFROM model_list AS T1 \nJOIN car_makers AS T2 ON T1.Maker = T2.Id \nJOIN countries AS T3 ON T2.Country = T3.CountryId \nJOIN continents AS T4 ON T3.Continent = T4.ContId \nWHERE T4.Continent = 'america'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6664352416992188,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the count of the car models produced in the United States?",
      "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "generated_sql": "SELECT COUNT(DISTINCT t1.Model)\nFROM model_list t1\nJOIN car_makers t2 ON t1.Maker = t2.Id\nJOIN countries t3 ON t2.Country = t3.CountryId\nJOIN continents t4 ON t3.Continent = t4.ContId\nWHERE t4.Continent = 'america';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4826357364654541,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
      "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "generated_sql": "SELECT AVG(CAST(MPG AS REAL)) \nFROM cars_data \nWHERE Cylinders = 4;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28562235832214355,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
      "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "generated_sql": "SELECT AVG(CAST(MPG AS REAL)) \nFROM cars_data \nWHERE Cylinders = 4;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2700977325439453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
      "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "generated_sql": "SELECT MIN(Weight) \nFROM cars_data \nWHERE Cylinders = 8 AND Year = 1974 \nORDER BY Weight ASC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.3427181243896484,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
      "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "generated_sql": "SELECT MIN(Weight) \nFROM cars_data \nWHERE Year = 1974 AND Cylinders = 8 \nORDER BY Weight ASC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.7706832885742188,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What are all the makers and models?",
      "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "generated_sql": "SELECT T1.Maker, T2.Model\nFROM car_makers AS T1\nJOIN model_list AS T2 ON T1.Id = T2.Maker;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.48009157180786133,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the makers and models?",
      "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "generated_sql": "SELECT T1.Maker, T2.Model\nFROM car_makers AS T1\nJOIN model_list AS T2 ON T1.Id = T2.Maker ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.0396344661712646,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What are the countries having at least one car maker? List name and id.",
      "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "generated_sql": "SELECT c.CountryName, c.CountryId\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cm.Maker IS NOT NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8099949359893799,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the names and ids of all countries with at least one car maker?",
      "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "generated_sql": "SELECT c.CountryName, c.CountryId\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cm.Id IS NOT NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.506954669952393,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of the cars with horsepower more than 150?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Horsepower > 150",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30346035957336426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with a horsepower greater than 150?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Horsepower > 150",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3478817939758301,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight of cars each year?",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "generated_sql": "SELECT \n    YEAR,\n    AVG(Weight) AS Average_Weight\nFROM \n    cars_data\nGROUP BY \n    YEAR;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.46429944038391113,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight and year for each year?",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "generated_sql": "SELECT \n    YEAR, \n    AVG(Weight) AS average_weight\nFROM \n    cars_data\nGROUP BY \n    YEAR;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.41362428665161133,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which countries in europe have at least 3 car manufacturers?",
      "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "generated_sql": "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')\nGROUP BY c.CountryId\nHAVING COUNT(DISTINCT cm.Id) >= 3",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.490594863891602,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What are the names of all European countries with at least 3 manufacturers?",
      "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "generated_sql": "SELECT C.CountryName\nFROM countries C\nJOIN car_makers M ON C.CountryId = M.Country\nGROUP BY C.CountryId\nHAVING COUNT(DISTINCT M.Id) >= 3\nAND C.Continent = 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 9.072031497955322,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT MAX(T1.Horsepower), T2.Make\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nJOIN model_list AS T3 ON T2.Model = T3.Model\nJOIN car_makers AS T4 ON T3.Maker = T4.Id\nWHERE T1.Cylinders = 3",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7455306053161621,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Make, MAX(T2.Horsepower) AS Max_Horsepower\nFROM car_names AS T1\nJOIN cars_data AS T2 ON T1.MakeId = T2.Id\nJOIN model_list AS T3 ON T1.Model = T3.Model\nWHERE T3.Cylinders = 3\nGROUP BY T1.Make;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.658270835876465,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
      "generated_sql": "SELECT Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE MPG = (SELECT MAX(MPG) FROM cars_data);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 11.233764886856079,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the car model with the highest mpg ?",
      "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
      "generated_sql": "SELECT T1.Model\nFROM model_list AS T1\nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId\nJOIN cars_data AS T3 ON T2.MakeId = T3.Id\nWHERE T3.MPG = (SELECT MAX(MPG) FROM cars_data);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5385279655456543,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the average horsepower of the cars before 1980?",
      "gold_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
      "generated_sql": "SELECT AVG(T1.Horsepower) \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.ModelId \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nJOIN countries AS T5 ON T4.Country = T5.CountryId \nWHERE T1.Year < 1980 AND T5.Continent = 'Asia'",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.31732177734375,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What is the average horsepower for all cars produced before 1980 ?",
      "gold_sql": "select avg(horsepower) from cars_data where year  <  1980;",
      "generated_sql": "SELECT AVG(CAST(Horsepower AS REAL)) \nFROM cars_data \nWHERE Year < 1980 AND Horsepower IS NOT NULL \nORDER BY AVG(CAST(Horsepower AS REAL)) LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.9253087043762207,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl of the cars of model volvo?",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "generated_sql": "SELECT AVG(c.Edispl) \nFROM cars_data c \nJOIN car_names cn ON c.Id = cn.MakeId \nJOIN model_list ml ON cn.MakeId = ml.ModelId \nJOIN car_makers cm ON ml.Maker = cm.Id \nWHERE ml.Model = 'volvo';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.265247106552124,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl for all volvos?",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "generated_sql": "SELECT AVG(T2.Edispl) \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId = T2.Id \nJOIN model_list AS T3 ON T1.MakeId = T3.ModelId \nWHERE T3.Maker = 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3833801746368408,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum accelerate for different number of cylinders?",
      "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "generated_sql": "SELECT MAX(CASE WHEN Cylinders = 4 THEN Accelerate END) AS Max_Accelerate_4,\n       MAX(CASE WHEN Cylinders = 6 THEN Accelerate END) AS Max_Accelerate_6,\n       MAX(CASE WHEN Cylinders = 8 THEN Accelerate END) AS Max_Accelerate_8\nFROM cars_data",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5094401836395264,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum accelerate for all the different cylinders?",
      "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "generated_sql": "SELECT MAX(CASE WHEN Cylinders = 4 THEN Accelerate END) AS MaxAccelerate4,\n       MAX(CASE WHEN Cylinders = 6 THEN Accelerate END) AS MaxAccelerate6,\n       MAX(CASE WHEN Cylinders = 8 THEN Accelerate END) AS MaxAccelerate8\nFROM cars_data;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5266857147216797,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which model has the most version(make) of cars?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT \n    c.Maker, \n    COUNT(*) as total_versions\nFROM \n    car_names c\nGROUP BY \n    c.Maker\nORDER BY \n    total_versions DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.6812424659729,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What model has the most different versions?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT M.Model, COUNT(*) as count\nFROM model_list M\nJOIN car_makers C ON M.Maker = C.Id\nGROUP BY M.Model\nORDER BY count DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.282905340194702,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many cars have more than 4 cylinders?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 4;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0956854820251465,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with more than 4 cylinders?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 4 AND MPG > 20",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.326600551605225,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "how many cars were produced in 1980?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE YEAR = 1980;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.21619629859924316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "In 1980, how many cars were made?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE YEAR = 1980;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4209909439086914,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many car models were produced by the maker with full name American Motor Company?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nWHERE car_makers.FullName = 'American Motor Company';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.308455228805542,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of car models created by the car maker American Motor Company?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "generated_sql": "SELECT COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nWHERE car_makers.Maker = 'amc';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6123104095458984,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which makers designed more than 3 car models? List full name and the id.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SELECT \n    c.Maker, \n    c.FullName, \n    c.Id\nFROM \n    car_makers c\nJOIN \n    model_list m ON c.Id = m.Maker\nGROUP BY \n    c.Id, c.Maker, c.FullName\nHAVING \n    COUNT(m.Model) > 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4497971534729004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the names and ids of all makers with more than 3 models?",
      "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SELECT \n    c.Maker, \n    c.Id\nFROM \n    car_makers c\nJOIN \n    model_list m ON c.Id = m.Maker\nGROUP BY \n    c.Id, c.Maker\nHAVING \n    COUNT(m.ModelId) > 3\nORDER BY \n    c.Maker DESC;  -- Add an ORDER BY condition",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 8.770264863967896,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
      "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "generated_sql": "SELECT DISTINCT m.Model \nFROM model_list m \nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN cars_data c ON m.ModelId = c.Id\nWHERE cm.FullName = 'General Motors' OR cm.Maker = (SELECT Id FROM car_makers WHERE FullName = 'General Motors')\nAND c.Weight > 3500;\n\n-- Modification: Added join with 'cars_data' table to include 'Weight' column in the query.",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.014300346374512,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
      "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "generated_sql": "SELECT DISTINCT m.Model\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nWHERE cm.Maker = 'General Motors'\nOR EXISTS (\n  SELECT 1\n  FROM cars_data c\n  WHERE c.Weight > 3500\n  AND c.MakeId IN (\n    SELECT MakeId\n    FROM car_names\n    WHERE Make = m.Model\n  )\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.899443864822388,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
      "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
      "generated_sql": "SELECT DISTINCT T1.Year \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.MakeId = T3.ModelId \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nJOIN countries AS T5 ON T4.Country = T5.CountryId \nJOIN continents AS T6 ON T5.Continent = T6.ContId \nWHERE T1.Weight BETWEEN 3000 AND 4000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4371764659881592,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
      "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
      "generated_sql": "SELECT DISTINCT T1.Year \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nJOIN countries AS T5 ON T4.Country = T5.CountryId \nJOIN continents AS T6 ON T5.Continent = T6.ContId \nWHERE T1.Weight < 4000 AND T1.Weight > 3000 ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.309507369995117,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What is the horsepower of the car with the largest accelerate?",
      "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Horsepower\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nWHERE T1.Accelerate = (\n  SELECT MAX(Accelerate)\n  FROM cars_data\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3670833110809326,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the horsepower of the car with the greatest accelerate?",
      "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Horsepower\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nWHERE T1.Accelerate = (\n  SELECT MAX(Accelerate)\n  FROM cars_data\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0219976902008057,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
      "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Cylinders\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nJOIN model_list AS T3 ON T2.Model = T3.Model\nJOIN car_makers AS T4 ON T3.Maker = T4.Id\nWHERE T4.Maker = 'volvo'\nORDER BY T1.Accelerate ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33332037925720215,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
      "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Cylinders\nFROM cars_data AS T1\nJOIN car_names AS T2 ON T1.Id = T2.MakeId\nJOIN model_list AS T3 ON T2.Model = T3.ModelId\nJOIN car_makers AS T4 ON T3.Maker = T4.Id\nWHERE T4.Maker = 'volvo' AND T1.Accelerate > 0\nORDER BY T1.Accelerate ASC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.822368144989014,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (\n  SELECT MAX(Horsepower) \n  FROM cars_data\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33779096603393555,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (\n  SELECT MAX(Horsepower) \n  FROM cars_data\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30728864669799805,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many countries has more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(DISTINCT T1.CountryId) \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId = T2.Country \nGROUP BY T1.CountryId \nHAVING COUNT(T2.Country) > 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5089137554168701,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of countries with more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(DISTINCT c.CountryId) \nFROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nGROUP BY c.CountryId \nHAVING COUNT(cm.Id) > 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.41069841384887695,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many cars has over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 6;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23900628089904785,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of carsw ith over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 6;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3003096580505371,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Model, T1.Maker, T2.Horsepower\nFROM model_list AS T1\nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId\nJOIN cars_data AS T3 ON T2.MakeId = T3.Id\nWHERE T3.Cylinders = 4\nORDER BY T3.Horsepower DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.857184171676636,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Model, T1.Maker, T2.Horsepower\nFROM model_list AS T1\nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId\nJOIN cars_data AS T3 ON T2.MakeId = T3.Id\nWHERE T3.Cylinders = 4\nORDER BY T3.Horsepower DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.235061883926392,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
      "gold_sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
      "generated_sql": "SELECT cn.MakeId, cn.Make\nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nJOIN model_list ml ON cn.MakeId = ml.ModelId\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cd.Horsepower > (\n  SELECT MIN(Horsepower)\n  FROM cars_data\n)\nAND cd.Cylinders <= 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3025097846984863,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
      "gold_sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
      "generated_sql": "SELECT cn.MakeId, cn.Make\nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cn.MakeId IN (\n  SELECT cd.Id\n  FROM cars_data cd\n  JOIN car_names cn ON cd.Id = cn.MakeId\n  WHERE cd.Horsepower != 'min' AND cd.Cylinders < 4\n)\nORDER BY cn.MakeId",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.171658754348755,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
      "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "generated_sql": "SELECT MAX(CASE WHEN T1.Cylinders = 8 THEN T2.MPG END) AS MaxMPG\nFROM cars_data T1\nJOIN car_names T2 ON T1.Id = T2.MakeId\nWHERE T1.Year < 1980 OR T1.Cylinders = 8;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.074508428573608,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
      "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "generated_sql": "SELECT MAX(CASE WHEN T1.Cylinders = 8 THEN T2.MPG END) AS max_mpg_8_cylinders,\n       MAX(CASE WHEN T2.Year < 1980 THEN T2.MPG END) AS max_mpg_before_1980\nFROM cars_data T1\nJOIN car_names T2 ON T1.Id = T2.MakeId;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 10.102864980697632,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "generated_sql": "SELECT T1.Model\nFROM model_list AS T1\nJOIN car_names AS T2 ON T1.ModelId = T2.MakeId\nJOIN cars_data AS T3 ON T2.MakeId = T3.Id\nJOIN car_makers AS T4 ON T1.Maker = T4.Id\nWHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5092744827270508,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "generated_sql": "SELECT DISTINCT M.Model\nFROM model_list M\nJOIN car_makers C ON M.Maker = C.Id\nJOIN car_names N ON C.Id = N.MakeId\nJOIN cars_data D ON N.MakeId = D.Id\nWHERE D.Weight < 3500 AND C.Maker != 'Ford Motor Company';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 8.465383768081665,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the name of the countries where there is not a single car maker?",
      "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "car_1",
      "question": "What are the names of the countries with no car makers?",
      "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "car_1",
      "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
      "gold_sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
      "generated_sql": "SELECT \n    cm.Id, \n    cm.Maker\nFROM \n    car_makers cm\nGROUP BY \n    cm.Id, cm.Maker\nHAVING \n    COUNT(DISTINCT ml.Model) >= 2\n    AND COUNT(DISTINCT cm.Id) > 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 8.16297435760498,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
      "gold_sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "car_1",
      "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
      "gold_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
      "generated_sql": "SELECT c.CountryId, c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cm.Id IN (\n  SELECT cm.Id\n  FROM car_makers cm\n  JOIN model_list ml ON cm.Id = ml.Maker\n  GROUP BY cm.Id\n  HAVING COUNT(*) > 3\n)\nOR EXISTS (\n  SELECT 1\n  FROM model_list ml\n  JOIN car_makers cm ON ml.Maker = cm.Id\n  WHERE ml.Model = 'fiat'\n  AND cm.Country = c.CountryId\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3725855350494385,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
      "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
      "generated_sql": "SELECT c.CountryId, c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE cm.Id IN (\n  SELECT cm.Id\n  FROM car_makers cm\n  GROUP BY cm.Id\n  HAVING COUNT(cm.Id) > 3\n)\nOR EXISTS (\n  SELECT 1\n  FROM model_list ml\n  JOIN car_names cn ON ml.ModelId = cn.MakeId\n  JOIN cars_data cd ON cn.MakeId = cd.Id\n  WHERE ml.Maker = 'fiat'\n  AND c.CountryId = cm.Country\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3525583744049072,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which country does Airline \"JetBlue Airways\" belong to?",
      "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Country \nFROM airlines AS T1 \nWHERE T1.Airline = 'JetBlue Airways'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.20773530006408691,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What country is Jetblue Airways affiliated with?",
      "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Country \nFROM airlines AS T1 \nWHERE T1.Airline = 'Jetblue Airways'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.27242231369018555,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
      "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T2.Abbreviation\nFROM airlines AS T1\nINNER JOIN flights AS T2\nON T1.Airline = 'JetBlue Airways'\n",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.428525447845459,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which abbreviation corresponds to Jetblue Airways?",
      "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Abbreviation \nFROM airlines AS T1 \nWHERE T1.Airline = 'Jetblue Airways'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2567715644836426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "List all airline names and their abbreviations in \"USA\".",
      "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT T1.Airline, T1.Abbreviation \nFROM airlines AS T1 \nWHERE T1.Country = 'USA';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6628718376159668,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are the airline names and abbreviations for airlines in the USA?",
      "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT T1.Airline, T1.Abbreviation \nFROM airlines AS T1 \nWHERE T1.Country = 'USA';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3055384159088135,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "List the airport code and name in the city of Anthony.",
      "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "generated_sql": "SELECT airports.AirportCode, airports.AirportName\nFROM airports\nJOIN airlines ON airports.Country = airlines.Country\nWHERE airports.City = 'Anthony'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5612547397613525,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the airport code and airport name corresonding to the city Anthony.",
      "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "generated_sql": "SELECT T1.AirportCode, T1.AirportName\nFROM airports AS T1\nJOIN airlines AS T2 ON T1.Country = T2.Country\nWHERE T1.City = 'Anthony'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6457338333129883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many airlines do we have?",
      "gold_sql": "SELECT count(*) FROM AIRLINES",
      "generated_sql": "SELECT COUNT(*) FROM airlines",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22664785385131836,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What is the total number of airlines?",
      "gold_sql": "SELECT count(*) FROM AIRLINES",
      "generated_sql": "SELECT COUNT(*) FROM airlines",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2339797019958496,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many airports do we have?",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2779958248138428,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of  airports.",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29090118408203125,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights do we have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) FROM flights",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2795870304107666,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) FROM flights",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.21814298629760742,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which airline has abbreviation 'UAL'?",
      "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "generated_sql": "SELECT Airline \nFROM airlines \nWHERE Abbreviation = 'UAL';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30552101135253906,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the airline with abbreviation 'UAL'.",
      "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "generated_sql": "SELECT Airline \nFROM airlines \nWHERE Abbreviation = 'UAL';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23061227798461914,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many airlines are from USA?",
      "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nWHERE Country = 'USA';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28121352195739746,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of airlines in the USA.",
      "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nWHERE Country = 'USA';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24687933921813965,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which city and country is the Alton airport at?",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT a.City, a.Country \nFROM airports a \nJOIN airlines ON a.Country = airlines.Country \nWHERE a.AirportCode = 'ALN'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2521388530731201,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the city and country for the Alton airport.",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT a.City, a.Country \nFROM airports a \nJOIN flights f ON a.AirportCode = f.SourceAirport \nWHERE a.AirportName = 'Alton'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32961392402648926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What is the airport name for airport 'AKO'?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "generated_sql": "SELECT AirportName \nFROM airports \nWHERE AirportCode = 'AKO';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22601652145385742,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the name of the airport with code 'AKO'.",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "generated_sql": "SELECT AirportName \nFROM airports \nWHERE AirportCode = 'AKO';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6920123100280762,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are airport names at City 'Aberdeen'?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "generated_sql": "SELECT AirportName \nFROM airports \nWHERE City = 'Aberdeen';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3494546413421631,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are the names of airports in Aberdeen?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "generated_sql": "SELECT AirportName \nFROM airports \nWHERE City = 'Aberdeen';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8471829891204834,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from 'APG'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.555335521697998,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights departing from 'APG'.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4991171360015869,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights have destination ATO?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2250220775604248,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights into ATO.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6511619091033936,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from City Aberdeen?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4578235149383545,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights departing from Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = (SELECT AirportCode \n                      FROM airports \n                      WHERE City = 'Aberdeen');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.42380833625793457,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights arriving in Aberdeen city?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = (SELECT AirportCode \n                     FROM airports \n                     WHERE City = 'Aberdeen');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37895894050598145,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights arriving in Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = (SELECT AirportCode \n                     FROM airports \n                     WHERE City = 'Aberdeen');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4103705883026123,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports AS source ON flights.SourceAirport = source.AirportCode \nJOIN airports AS destination ON flights.DestAirport = destination.AirportCode \nWHERE source.City = 'Aberdeen' AND destination.City = 'Ashley';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2781193256378174,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights fly from Aberdeen to Ashley?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'ASY';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24942231178283691,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights does airline 'JetBlue Airways' have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'JetBlue Airways';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.286456823348999,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the number of Jetblue Airways flights.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3041219711303711,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2638695240020752,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of United Airlines flights arriving in ASY Airport.",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nWHERE airlines.Abbreviation = 'UAL' AND flights.DestAirport = 'ASY'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4173855781555176,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nWHERE airlines.Airline = 'United Airlines' \nAND flights.SourceAirport = 'AHD';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5757176876068115,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of United Airlines flights leaving from AHD Airport.",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nWHERE airlines.Abbreviation = 'UAL' AND flights.SourceAirport = 'AHD' \nORDER BY airlines.Abbreviation",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.120485544204712,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "How many United Airlines flights go to City 'Aberdeen'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.42305755615234375,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.City = 'Aberdeen' \nORDER BY airlines.Airline \nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.21052622795105,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "Which city has most number of arriving flights?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City, COUNT(T2.SourceAirport) AS NumFlights \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.City \nORDER BY NumFlights DESC \nLIMIT 1;  -- Add column alias for clarity and consider adding GROUP BY or ORDER BY",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.234423637390137,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "Which city has the most frequent destination airport?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.DestAirport \nGROUP BY T1.City \nORDER BY COUNT(T1.AirportCode) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31073665618896484,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which city has most number of departing flights?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City, COUNT(T2.SourceAirport) AS NumFlights \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.City \nORDER BY NumFlights DESC \nLIMIT 1;  -- Add column alias for clarity and consider adding GROUP BY or ORDER BY",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.950809001922607,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "Which city is the most frequent source airport?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City, COUNT(T1.City) as Frequency \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.City \nORDER BY Frequency DESC \nLIMIT 1;  -- Add a column to display the frequency and alias the column",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.138387680053711,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "What is the code of airport that has the highest number of flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nWHERE T2.FlightNo > 1000  -- Add a WHERE condition to filter by flight number\nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.143959045410156,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "What is the airport code of the airport with the most flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nWHERE T1.Country = 'USA' AND T1.AirportCode = (SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1)\nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 8.349245071411133,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "What is the code of airport that has fewest number of flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.AirportCode) ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.54131007194519,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the code of the airport with the least flights.",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35379457473754883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which airline has most number of flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34236741065979004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What airline serves the most flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Airline, COUNT(*) as count\nFROM airlines AS T1\nJOIN flights AS T2 ON T1.uid = T2.Airline\nWHERE T1.Country = 'USA'  -- Add a WHERE condition to filter by country\nGROUP BY T1.Airline\nORDER BY count DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.001849174499512,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
      "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.Abbreviation, T1.Country \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Abbreviation, T1.Country \nORDER BY COUNT(T2.Airline) ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3355131149291992,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
      "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.Abbreviation, T1.Country \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Abbreviation, T1.Country \nORDER BY COUNT(T2.Airline) ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3827543258666992,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have some flight departing from airport 'AHD'?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nJOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode \nWHERE T3.AirportCode = 'AHD' \nORDER BY T1.Airline",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.028221607208252,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have a flight with source airport AHD?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT DISTINCT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nWHERE T2.SourceAirport = 'AHD';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26581788063049316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have flights arriving at airport 'AHD'?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nJOIN airports AS T3 ON T2.DestAirport = T3.AirportCode \nWHERE T3.AirportCode = 'AHD';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4588203430175781,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have a flight with destination airport AHD?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "generated_sql": "SELECT DISTINCT T1.Airline \nFROM airlines AS T1\nJOIN flights AS T2 ON T1.uid = T2.Airline\nJOIN airports AS T3 ON T2.DestAirport = T3.AirportCode\nWHERE T3.AirportCode = 'AHD' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.686190128326416,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have departing flights from both APG and CVO airports?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have departures from CVO but not from APG airports?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have at least 10 flights.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo) >= 10;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30356526374816895,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have at least 10 flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.Airline) >= 10;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3063781261444092,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have fewer than 200 flights.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "generated_sql": "SELECT a.Airline \nFROM airlines a \nJOIN flights f ON a.uid = f.Airline \nGROUP BY a.Airline \nHAVING COUNT(f.Airline) < 200;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2434368133544922,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have less than 200 flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo) < 200;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.728947639465332,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of Airline \"United Airlines\"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nINNER JOIN airlines AS T2 \nON T1.Airline = T2.uid \nWHERE T2.Airline = 'United Airlines';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40485167503356934,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Which flight numbers correspond to United Airlines flights?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM airlines AS T1 \nJOIN flights AS T2 \nON T1.uid = T2.Airline \nWHERE T1.Airline = 'United Airlines';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4066622257232666,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights departing from Airport \"APG\"?",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode \nWHERE T2.AirportName = 'APG'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.3776049613952637,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights leaving from APG.",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT FlightNo \nFROM flights \nWHERE SourceAirport = 'APG';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30564022064208984,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nINNER JOIN airports AS T2 \nON T1.SourceAirport = T2.AirportCode \nWHERE T2.AirportName = 'APG';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.3536882400512695,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights landing at APG.",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nINNER JOIN airports AS T2 \nON T1.SourceAirport = T2.AirportCode \nWHERE T2.AirportCode = 'APG';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.4926021099090576,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nINNER JOIN airports AS T2 \nON T1.SourceAirport = T2.AirportCode \nWHERE T2.City = 'Aberdeen';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.162206411361694,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights leaving from Aberdeen.",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode \nWHERE T2.City = 'Aberdeen';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.2744345664978027,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode \nWHERE T2.City = 'Aberdeen';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.6297266483306885,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights arriving in Aberdeen.",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.DestAirport = T2.AirportCode \nJOIN airports AS T3 ON T1.SourceAirport = T3.AirportCode \nWHERE T3.City = 'Aberdeen'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.837730646133423,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(DISTINCT f.SourceAirport) \nFROM flights f \nJOIN airports a ON f.SourceAirport = a.AirportCode \nWHERE a.City IN ('Aberdeen', 'Abilene');",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.5171618461608887,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "How many flights land in Aberdeen or Abilene?",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport IN (SELECT AirportCode \n                      FROM airports \n                      WHERE City IN ('Aberdeen', 'Abilene'));",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3198363780975342,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Find the name of airports which do not have any flight in and out.",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "flight_2",
      "question": "Which airports do not have departing or arriving flights?",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many employees are there?",
      "gold_sql": "SELECT count(*) FROM employee",
      "generated_sql": "SELECT COUNT(Employee_ID) FROM employee",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2998206615447998,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of employees",
      "gold_sql": "SELECT count(*) FROM employee",
      "generated_sql": "SELECT COUNT(*) FROM employee",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2959630489349365,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Sort employee names by their age in ascending order.",
      "gold_sql": "SELECT name FROM employee ORDER BY age",
      "generated_sql": "SELECT Name \nFROM employee \nORDER BY Age ASC",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3769407272338867,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "List the names of employees and sort in ascending order of age.",
      "gold_sql": "SELECT name FROM employee ORDER BY age",
      "generated_sql": "SELECT Name, Age\nFROM employee\nWHERE Age > 30\nORDER BY Age ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.409452676773071,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is the number of employees from each city?",
      "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "generated_sql": "SELECT T1.City, COUNT(*) as count\nFROM employee AS T1\nGROUP BY T1.City",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5040848255157471,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of employees for each city.",
      "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "generated_sql": "SELECT T1.City, COUNT(T1.Employee_ID) AS Employee_Count\nFROM employee AS T1\nGROUP BY T1.City;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3075282573699951,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which cities do more than one employee under age 30 come from?",
      "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "generated_sql": "SELECT DISTINCT e.City\nFROM employee e\nJOIN hiring h ON e.Employee_ID = h.Employee_ID\nWHERE e.Age < 30\nGROUP BY e.City\nHAVING COUNT(e.Employee_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35092735290527344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the cities that have more than one employee under age 30.",
      "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "generated_sql": "SELECT DISTINCT T1.City \nFROM employee AS T1 \nJOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID \nWHERE T1.Age < 30 \nGROUP BY T1.City \nHAVING COUNT(T1.Employee_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.36216187477111816,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the number of shops in each location.",
      "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "generated_sql": "SELECT T2.Location, COUNT(*) \nFROM shop AS T1 \nINNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T2.Location",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.982725143432617,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many shops are there in each location?",
      "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "generated_sql": "SELECT shop.Location, COUNT(*) as shop_count\nFROM shop\nGROUP BY shop.Location;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2912595272064209,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the manager name and district of the shop whose number of products is the largest.",
      "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "generated_sql": "SELECT s.Manager_name, s.District\nFROM shop s\nWHERE (SELECT MAX(Number_products) FROM shop) = s.Number_products;",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.8894615173339844,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the manager name and district of the shop that sells the largest number of products?",
      "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "generated_sql": "SELECT s.Manager_name, s.District\nFROM shop s\nORDER BY s.Number_products DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3071322441101074,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "find the minimum and maximum number of products of all stores.",
      "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "generated_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products\nFROM shop;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4063873291015625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the minimum and maximum number of products across all the shops?",
      "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "generated_sql": "SELECT MIN(Number_products), MAX(Number_products) \nFROM shop ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.357072353363037,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Return the name, location and district of all shops in descending order of number of products.",
      "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "generated_sql": "SELECT s.Name, s.Location, s.District, COUNT(h.Shop_ID) AS Total_Employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID\nORDER BY s.Number_products DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.604379415512085,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
      "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "generated_sql": "SELECT s.Name, s.Location, s.District\nFROM shop s\nORDER BY s.Number_products DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29982781410217285,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the names of stores whose number products is more than the average number of products.",
      "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "generated_sql": "SELECT s.Name\nFROM shop s\nWHERE s.Number_products > (\n  SELECT AVG(Number_products)\n  FROM shop\n  GROUP BY Location\n)",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.972858190536499,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shops' number products is above the average? Give me the shop names.",
      "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "generated_sql": "SELECT s.Name\nFROM shop s\nWHERE s.Number_products > (\n  SELECT AVG(Number_products)\n  FROM shop\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4244875907897949,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "find the name of employee who was awarded the most times in the evaluation.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Name\nORDER BY COUNT(ev.Employee_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4561769962310791,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which employee received the most awards in evaluations? Give me the employee name.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Name\nORDER BY COUNT(ev.Employee_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4623837471008301,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the employee who got the highest one time bonus.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "generated_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.134154796600342,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which employee received the biggest bonus? Give me the employee name.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "generated_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nORDER BY ev.Bonus DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3189241886138916,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the names of employees who never won any award in the evaluation.",
      "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "generated_sql": "SELECT DISTINCT e.Name \nFROM employee e \nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID \nWHERE ev.Employee_ID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33068418502807617,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the names of the employees who never received any evaluation?",
      "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "generated_sql": "SELECT e.Name\nFROM employee e\nWHERE e.Employee_ID NOT IN (\n  SELECT Employee_ID\n  FROM evaluation\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.244293212890625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is the name of the shop that is hiring the largest number of employees?",
      "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2649376392364502,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shop has the most employees? Give me the shop name.",
      "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2781188488006592,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the shops that do not hire any employee.",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT DISTINCT T2.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nWHERE T2.Shop_ID IS NULL",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.552157163619995,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shops run with no employees? Find the shop names",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT T2.Name \nFROM shop AS T1 \nLEFT JOIN employee AS T2 ON T1.Shop_ID = T2.Employee_ID \nWHERE T1.Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30949974060058594,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the number of employees hired in each shop; show the shop name as well.",
      "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "generated_sql": "SELECT \n  s.Name AS Shop_Name,\n  COUNT(h.Employee_ID) AS Number_of_Employees\nFROM \n  shop s\n  JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY \n  s.Name ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.219118595123291,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "For each shop, return the number of employees working there and the name of the shop.",
      "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "generated_sql": "SELECT \n  s.Name AS Shop_Name,\n  COUNT(h.Employee_ID) AS Number_of_Employees\nFROM \n  shop s\n  LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY \n  s.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3448147773742676,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is total bonus given in all evaluations?",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "generated_sql": "SELECT SUM(Bonus) FROM evaluation ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.5196635723114014,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the total amount of bonus given in all the evaluations.",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "generated_sql": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation GROUP BY Employee_ID ORDER BY Total_Bonus DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.6381731033325195,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Give me all the information about hiring.",
      "gold_sql": "SELECT * FROM hiring",
      "generated_sql": "SELECT \n  h.Shop_ID, \n  e.Name, \n  h.Start_from, \n  h.Is_full_time, \n  e.Age, \n  e.City, \n  e.Employee_ID\nFROM \n  hiring h\nINNER JOIN \n  employee e ON h.Employee_ID = e.Employee_ID\nORDER BY \n  h.Shop_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42259955406188965,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is all the information about hiring?",
      "gold_sql": "SELECT * FROM hiring",
      "generated_sql": "SELECT \n  h.Shop_ID, \n  e.Name, \n  h.Start_from, \n  h.Is_full_time, \n  e.Age, \n  e.City, \n  e.Employee_ID\nFROM \n  hiring h\nINNER JOIN \n  employee e ON h.Employee_ID = e.Employee_ID\nORDER BY \n  h.Shop_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3118102550506592,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many different store locations are there?",
      "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Location) \nFROM shop AS T1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27106642723083496,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of distinct store locations.",
      "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Location) \nFROM shop AS T1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32431530952453613,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many documents do we have?",
      "gold_sql": "SELECT count(*) FROM Documents",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2527289390563965,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of documents.",
      "gold_sql": "SELECT count(*) FROM Documents",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.19175457954406738,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "List document IDs, document names, and document descriptions for all documents.",
      "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "generated_sql": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nWHERE Documents.Document_ID > 0;  -- Added WHERE condition to filter out invalid IDs",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.0383973121643066,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids, names, and descriptions for all documents?",
      "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "generated_sql": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41031861305236816,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document name and template id for document with description with the letter 'w' in it?",
      "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "generated_sql": "SELECT D.Document_Name, T.Template_ID\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE D.Document_Description LIKE '%w%' AND T.Version_Number > 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.8527324199676514,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the names and template ids for documents that contain the letter w in their description.",
      "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "generated_sql": "SELECT T1.Document_Name, T1.Template_ID \nFROM Documents AS T1 \nWHERE T1.Document_Description LIKE '%w%' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.400660514831543,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
      "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "generated_sql": "SELECT D.Document_ID, T.Template_ID, D.Document_Description\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE D.Document_Name = 'Robbin CV';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4069020748138428,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
      "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "generated_sql": "SELECT D.Document_ID, T.Template_ID, D.Document_Description\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE D.Document_Name = 'Robbin CV';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30626749992370605,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many different templates do all document use?",
      "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
      "generated_sql": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30622053146362305,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of different templates used for documents.",
      "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
      "generated_sql": "SELECT COUNT(DISTINCT T.Template_ID) \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2231748104095459,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many documents are using the template with type code 'PPT'?",
      "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "generated_sql": "SELECT COUNT(DISTINCT d.Document_ID) \nFROM Documents d \nJOIN Templates t ON d.Template_ID = t.Template_ID \nWHERE t.Template_Type_Code = 'PPT';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2290802001953125,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of documents that use the PPT template type.",
      "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "generated_sql": "SELECT COUNT(DISTINCT d.Document_ID) \nFROM Documents d \nJOIN Templates t ON d.Template_ID = t.Template_ID \nWHERE t.Template_Type_Code = 'PPT';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3380255699157715,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template ids and number of documents using each template.",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "generated_sql": "SELECT T.Template_ID, COUNT(D.Document_ID) as Document_Count\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE T.Version_Number = 1  -- Filter by version number\nGROUP BY T.Template_ID\nORDER BY Document_Count DESC  -- Order by document count in descending order",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.589104413986206,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are all different template ids used for documents, and how many times were each of them used?",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "generated_sql": "SELECT \n    T.Template_ID,\n    COUNT(D.Document_ID) AS Frequency\nFROM \n    Templates T\nJOIN \n    Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n    T.Template_ID\nORDER BY \n    Frequency DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31941866874694824,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the id and type code for the template used by the most documents?",
      "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T.Template_ID, TT.Template_Type_Code\nFROM Templates T\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code\nJOIN (\n  SELECT Template_ID, COUNT(*) as count\n  FROM Documents\n  GROUP BY Template_ID\n  ORDER BY count DESC\n  LIMIT 1\n) D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID, TT.Template_Type_Code\nORDER BY T.Template_ID",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.475597143173218,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id and type code of the template that is used for the greatest number of documents.",
      "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_ID, T1.Template_Type_Code\nFROM Templates T1\nJOIN Documents T2 ON T1.Template_ID = T2.Template_ID\nGROUP BY T1.Template_ID, T1.Template_Type_Code\nORDER BY COUNT(T2.Document_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33083081245422363,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show ids for all templates that are used by more than one document.",
      "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "generated_sql": "SELECT T.Template_ID\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(D.Template_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2781522274017334,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the template ids of any templates used in more than a single document?",
      "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "generated_sql": "SELECT T.Template_ID\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(D.Template_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22727489471435547,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show ids for all templates not used by any document.",
      "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids for templates that are not used in any documents?",
      "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many templates do we have?",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.21730494499206543,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates.",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.18125343322753906,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show template ids, version numbers, and template type codes for all templates.",
      "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "generated_sql": "SELECT T.Template_ID, T.Version_Number, T.Template_Type_Code\nFROM Templates T;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3683600425720215,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids, version numbers, and type codes for each template?",
      "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "generated_sql": "SELECT T.Template_ID, T.Version_Number, T.Template_Type_Code\nFROM Templates T",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30533480644226074,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all distinct template type codes for all templates.",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "generated_sql": "SELECT DISTINCT T.Template_Type_Code\nFROM Templates T",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3969299793243408,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes?",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "generated_sql": "SELECT DISTINCT Template_Type_Code\nFROM Ref_Template_Types;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2768087387084961,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of templates with template type code PP or PPT?",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "generated_sql": "SELECT T.Template_ID\nFROM Templates T\nJOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code\nWHERE RTT.Template_Type_Code IN ('PP', 'PPT')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3055136203765869,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the ids of templates that have the code PP or PPT.",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "generated_sql": "SELECT T.Template_ID\nFROM Templates T\nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code\nWHERE R.Template_Type_Code IN ('PP', 'PPT')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3467402458190918,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many templates have template type code CV?",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = 'CV';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5094330310821533,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates of the type CV.",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4063904285430908,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the version number and template type code for the template with version number later than 5?",
      "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "generated_sql": "SELECT T.Version_Number, T.Template_Type_Code\nFROM Templates T\nWHERE T.Version_Number > 5 AND T.Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types)\nGROUP BY T.Template_Type_Code\nORDER BY T.Version_Number DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.624731540679932,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
      "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "generated_sql": "SELECT T.Version_Number, T.Template_Type_Code\nFROM Templates T\nWHERE T.Version_Number > 5\nGROUP BY T.Template_Type_Code\nORDER BY T.Version_Number DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.774363040924072,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and number of templates for each.",
      "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "generated_sql": "SELECT \n    T.Template_Type_Code,\n    COUNT(T.Template_ID) AS Number_Of_Templates\nFROM \n    Templates T\nWHERE \n    T.Date_Effective_From IS NOT NULL\nGROUP BY \n    T.Template_Type_Code\nORDER BY \n    T.Template_Type_Code",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.749513149261475,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes, and how many templates correspond to each?",
      "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "generated_sql": "SELECT \n    T.Template_Type_Code,\n    COUNT(*) as Template_Count\nFROM \n    Templates T\nGROUP BY \n    T.Template_Type_Code\nORDER BY \n    Template_Count DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6398563385009766,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code has most number of templates?",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    tt.Template_Type_Code, \n    COUNT(t.Template_ID) as Total_Templates\nFROM \n    Templates t\nJOIN \n    Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code\nGROUP BY \n    tt.Template_Type_Code\nORDER BY \n    Total_Templates DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5299587249755859,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the type code of the template type that the most templates belong to.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T2.Template_ID) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31572794914245605,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes with less than three templates.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nHAVING COUNT(T1.Template_ID) < 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32154393196105957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the codes of template types that have fewer than 3 templates?",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT DISTINCT TTT.Template_Type_Code\nFROM Ref_Template_Types TTT\nJOIN Templates T ON TTT.Template_Type_Code = T.Template_Type_Code\nGROUP BY TTT.Template_Type_Code\nHAVING COUNT(T.Template_ID) < 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32511258125305176,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What the smallest version number and its template type code?",
      "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "generated_sql": "SELECT MIN(T.Version_Number), T.Template_Type_Code\nFROM Templates T\nJOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code\nGROUP BY T.Template_Type_Code",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.38832688331604004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the lowest version number, along with its corresponding template type code.",
      "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "generated_sql": "SELECT T1.Version_Number, T1.Template_Type_Code\nFROM Templates T1\nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nWHERE T1.Version_Number = (SELECT MIN(Version_Number) FROM Templates);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34561944007873535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code of the template used by document with the name \"Data base\"?",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "generated_sql": "SELECT T.Template_Type_Code \nFROM Templates T \nJOIN Documents D ON T.Template_ID = D.Template_ID \nWHERE D.Document_Name = 'Data base';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3013272285461426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type code of the template that is used by a document named Data base.",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "generated_sql": "SELECT T.Template_Type_Code\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Document_Name = 'Data base';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28502821922302246,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document names using templates with template type code BK.",
      "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "generated_sql": "SELECT T1.Document_Name \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'BK';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32513427734375,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the names of documents that use templates with the code BK?",
      "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "generated_sql": "SELECT T1.Document_Name, COUNT(*) as Document_Count \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code \nWHERE T3.Template_Type_Code = 'BK' \nGROUP BY T1.Document_Name \nORDER BY Document_Count DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.3289878368377686,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and the number of documents using each type.",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "generated_sql": "SELECT \n  T1.Template_Type_Code, \n  COUNT(T2.Document_ID) AS Document_Count\nFROM \n  Ref_Template_Types T1\n  LEFT JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code\n  LEFT JOIN Documents T3 ON T2.Template_ID = T3.Template_ID\nGROUP BY \n  T1.Template_Type_Code\nORDER BY \n  Document_Count DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.906457185745239,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes, and how many documents use each type?",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "generated_sql": "SELECT \n    RT.Template_Type_Code,\n    COUNT(D.Template_ID) AS Document_Count\nFROM \n    Ref_Template_Types RT\nJOIN \n    Templates T ON RT.Template_Type_Code = T.Template_Type_Code\nJOIN \n    Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n    RT.Template_Type_Code\nORDER BY \n    Document_Count DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5426328182220459,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code is used by most number of documents?",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    TTT.Template_Type_Code\nFROM \n    Ref_Template_Types TTT\nJOIN \n    Templates T ON TTT.Template_Type_Code = T.Template_Type_Code\nJOIN \n    Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n    TTT.Template_Type_Code\nORDER BY \n    COUNT(D.Document_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41349029541015625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the code of the template type that is most commonly used in documents.",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nJOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T3.Document_ID) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5361955165863037,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes that are not used by any document.",
      "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the codes of template types that are not used for any document?",
      "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and descriptions.",
      "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "generated_sql": "SELECT \n    Template_Type_Code,\n    Template_Type_Description\nFROM \n    Ref_Template_Types;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3556859493255615,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the type codes and descriptions for all template types?",
      "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "generated_sql": "SELECT \n    rt.Template_Type_Code,\n    rt.Template_Type_Description\nFROM \n    Ref_Template_Types rt",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2697720527648926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type descriptions for template type code \"AD\".",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "generated_sql": "SELECT rt.Template_Type_Description\nFROM Ref_Template_Types rt\nWHERE rt.Template_Type_Code = 'AD';",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.2074837684631348,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type description of the template type with the code AD.",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "generated_sql": "SELECT rt.Template_Type_Description\nFROM Ref_Template_Types rt\nWHERE rt.Template_Type_Code = 'AD'\nGROUP BY rt.Template_Type_Description LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.5698657035827637,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code for template type description \"Book\".",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "generated_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.5184402465820312,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the type code of the template type with the description \"Book\".",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "generated_sql": "SELECT T1.Template_Type_Code\nFROM Ref_Template_Types AS T1\nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code\nWHERE T1.Template_Type_Description = 'Book' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.1057446002960205,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the distinct template type descriptions for the templates ever used by any document?",
      "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Description \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T2.Template_ID IN (SELECT Template_ID FROM Documents)",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32995128631591797,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the different descriptions for templates that have been used in a document.",
      "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "generated_sql": "SELECT DISTINCT T.Template_Type_Description \nFROM Templates T \nJOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code \nWHERE T.Template_ID IN (SELECT Template_ID FROM Documents)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.1492385864257812,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the template ids with template type description \"Presentation\".",
      "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "generated_sql": "SELECT T.Template_ID \nFROM Templates T \nJOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code \nWHERE RTT.Template_Type_Description = 'Presentation' \nORDER BY T.Version_Number DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.9415173530578613,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the ids corresponding to templates with the description 'Presentation'.",
      "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "generated_sql": "SELECT T.Template_ID\nFROM Templates T\nJOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code\nWHERE RTT.Template_Type_Description = 'Presentation' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.406229019165039,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many paragraphs in total?",
      "gold_sql": "SELECT count(*) FROM Paragraphs",
      "generated_sql": "SELECT COUNT(*) FROM Paragraphs",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33757472038269043,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of paragraphs.",
      "gold_sql": "SELECT count(*) FROM Paragraphs",
      "generated_sql": "SELECT COUNT(*) \nFROM Paragraphs;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5662877559661865,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many paragraphs for the document with name 'Summer Show'?",
      "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "generated_sql": "SELECT COUNT(*) \nFROM Paragraphs \nWHERE Document_ID IN (\n  SELECT Document_ID \n  FROM Documents \n  WHERE Document_Name = 'Summer Show'\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29120659828186035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of paragraphs in the document named 'Summer Show'.",
      "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = 'Summer Show'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4080042839050293,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show paragraph details for paragraph with text 'Korea ' .",
      "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
      "generated_sql": "SELECT T1.Paragraph_Text \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T1.Paragraph_Text = 'Korea'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.353503942489624,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
      "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
      "generated_sql": "SELECT T.Template_Details\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN Paragraphs P ON D.Document_ID = P.Document_ID\nWHERE P.Paragraph_Text LIKE '%Korea%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.48918986320495605,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
      "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "generated_sql": "SELECT P.Paragraph_ID, P.Paragraph_Text\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nJOIN Paragraphs P ON D.Document_ID = P.Document_ID\nWHERE D.Document_Name = 'Welcome to NY';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.935234546661377,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
      "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "generated_sql": "SELECT T1.Paragraph_ID, T1.Paragraph_Text\nFROM Paragraphs AS T1\nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID\nJOIN Templates AS T3 ON T2.Template_ID = T3.Template_ID\nWHERE T3.Template_Details LIKE '%Welcome to NY%'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.35178184509277344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all paragraph texts for the document \"Customer reviews\".",
      "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "generated_sql": "SELECT T1.Paragraph_Text \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nJOIN Templates AS T3 ON T2.Template_ID = T3.Template_ID \nJOIN Ref_Template_Types AS T4 ON T3.Template_Type_Code = T4.Template_Type_Code \nWHERE T4.Template_Type_Description = 'Customer reviews' AND T2.Document_Name = 'Customer reviews'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30828022956848145,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
      "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "generated_sql": "SELECT T1.Paragraph_Text \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Document_Name = 'Customer reviews';",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.1688661575317383,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "generated_sql": "SELECT \n    D.Document_ID, \n    COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM \n    Documents D\nJOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID\nORDER BY \n    D.Document_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37280941009521484,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "generated_sql": "SELECT \n    D.Document_ID, \n    COUNT(P.Paragraph_ID) AS Paragraph_Count\nFROM \n    Documents D\nJOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID\nORDER BY \n    D.Document_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.38805460929870605,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids, names and the number of paragraphs in each document.",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "generated_sql": "SELECT \n    D.Document_ID,\n    D.Document_Name,\n    COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nWHERE \n    D.Document_ID IS NOT NULL AND P.Paragraph_ID IS NOT NULL\nGROUP BY \n    D.Document_ID, D.Document_Name\nORDER BY \n    D.Document_ID",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.615538835525513,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "generated_sql": "SELECT \n    D.Document_ID,\n    D.Document_Name,\n    COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM \n    Documents D\nJOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID, D.Document_Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3600335121154785,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "List all document ids with at least two paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT DISTINCT T1.Document_ID \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T1.Paragraph_ID) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.690678596496582,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of documents that have 2 or more paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT DISTINCT D.Document_ID \nFROM Documents D \nJOIN Paragraphs P ON D.Document_ID = P.Document_ID \nGROUP BY D.Document_ID \nHAVING COUNT(P.Paragraph_ID) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.466107130050659,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id and name with greatest number of paragraphs?",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT D.Document_ID, D.Document_Name\nFROM Documents D\nJOIN (\n  SELECT Document_ID, COUNT(*) as paragraph_count\n  FROM Paragraphs\n  GROUP BY Document_ID\n) P ON D.Document_ID = P.Document_ID\nWHERE P.paragraph_count = (\n  SELECT MAX(paragraph_count)\n  FROM (\n    SELECT Document_ID, COUNT(*) as paragraph_count\n    FROM Paragraphs\n    GROUP BY Document_ID\n  ) subquery\n)\nORDER BY D.Document_ID\nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.899907350540161,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id and name of the document with the most paragraphs.",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT D.Document_ID, D.Document_Name\nFROM Documents D\nJOIN (\n  SELECT Document_ID, COUNT(*) as Paragraph_Count\n  FROM Paragraphs\n  GROUP BY Document_ID\n  ORDER BY Paragraph_Count DESC\n  LIMIT 1\n) P ON D.Document_ID = P.Document_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34123826026916504,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id with least number of paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents T1 \nLEFT JOIN Paragraphs T2 ON T1.Document_ID = T2.Document_ID \nWHERE T1.Document_ID IS NOT NULL \nGROUP BY T1.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.174678802490234,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id of the document with the fewest paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4282526969909668,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id with 1 to 2 paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T2.Paragraph_ID BETWEEN 1 AND 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7804396152496338,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Give the ids of documents that have between one and two paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "generated_sql": "SELECT D.Document_ID \nFROM Documents D \nJOIN Paragraphs P ON D.Document_ID = P.Document_ID \nGROUP BY D.Document_ID \nHAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.38649463653564453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
      "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
      "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "course_teach",
      "question": "How many teachers are there?",
      "gold_sql": "SELECT count(*) FROM teacher",
      "generated_sql": "SELECT COUNT(Teacher_ID) FROM teacher",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2885556221008301,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What is the total count of teachers?",
      "gold_sql": "SELECT count(*) FROM teacher",
      "generated_sql": "SELECT COUNT(*) \nFROM teacher;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.46329808235168457,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "List the names of teachers in ascending order of age.",
      "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Age IS NOT NULL \nGROUP BY Name \nORDER BY CAST(Age AS INTEGER) ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.386617422103882,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers ordered by ascending age?",
      "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "generated_sql": "SELECT Name \nFROM teacher \nORDER BY Age ASC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30358386039733887,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the age and hometown of teachers?",
      "gold_sql": "SELECT Age ,  Hometown FROM teacher",
      "generated_sql": "SELECT T1.Age, T1.Hometown \nFROM teacher AS T1",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4078865051269531,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What is the age and hometown of every teacher?",
      "gold_sql": "SELECT Age ,  Hometown FROM teacher",
      "generated_sql": "SELECT T1.Age, T1.Hometown \nFROM teacher AS T1",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3085975646972656,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
      "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30515146255493164,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
      "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Hometown != 'Little Lever Urban District'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5762224197387695,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show the name of teachers aged either 32 or 33?",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Age = 32 OR Age = 33;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3093116283416748,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who are aged either 32 or 33?",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "generated_sql": "SELECT Name \nFROM teacher \nWHERE Age = 32 OR Age = 33;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.49218297004699707,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What is the hometown of the youngest teacher?",
      "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID \nORDER BY T1.Age \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5126063823699951,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Where is the youngest teacher from?",
      "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID \nWHERE T1.Age = (SELECT MIN(Age) FROM teacher)",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.44777417182922363,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show different hometown of teachers and the number of teachers from each hometown.",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT T1.Hometown, COUNT(*) as Total_Teachers\nFROM teacher AS T1\nGROUP BY T1.Hometown",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.518951416015625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "For each hometown, how many teachers are there?",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT T1.Hometown, COUNT(*) as Total_Teachers\nFROM teacher AS T1\nGROUP BY T1.Hometown",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31572580337524414,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "List the most common hometown of teachers.",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Hometown \nORDER BY COUNT(T1.Teacher_ID) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40015292167663574,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What is the most commmon hometowns for teachers?",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Hometown \nORDER BY COUNT(T1.Teacher_ID) DESC \nLIMIT 1",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.35375308990478516,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show the hometowns shared by at least two teachers.",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Hometown \nHAVING COUNT(T1.Hometown)  >= 2 ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.6639933586120605,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "course_teach",
      "question": "What are the towns from which at least two teachers come from?",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Hometown \nHAVING COUNT(T1.Teacher_ID) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.240243673324585,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the courses they are arranged to teach.",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "generated_sql": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.7748820781707764,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What is the name of each teacher and what course they teach?",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "generated_sql": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T2.Course_ID = T3.Course_ID ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.527868032455444,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "generated_sql": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T3.Course_ID = T2.Course_ID \nORDER BY T1.Name ASC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 8.60050368309021,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "generated_sql": "SELECT T1.Name, T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID \nJOIN course AS T2 ON T3.Course_ID = T2.Course_ID \nORDER BY T1.Name ASC",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.25258469581604004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show the name of the teacher for the math course.",
      "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "generated_sql": "SELECT T2.Name \nFROM course AS T1 \nJOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID \nJOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID \nWHERE T1.Course = 'Math'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.9168105125427246,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the people who teach math courses?",
      "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "generated_sql": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nJOIN course AS T3 ON T1.Course_ID = T3.Course_ID \nWHERE T3.Course = 'Math' LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.510740041732788,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the number of courses they teach.",
      "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "generated_sql": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4143049716949463,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers and how many courses do they teach?",
      "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "generated_sql": "SELECT T1.Name, COUNT(T2.Course_ID) \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T1.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3075287342071533,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers that teach at least two courses.",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T1.Course_ID) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32306766510009766,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who teach at least two courses?",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T1.Course_ID) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2821986675262451,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "List the names of teachers who have not been arranged to teach courses.",
      "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "generated_sql": "SELECT T2.Name \nFROM teacher AS T2 \nLEFT JOIN course_arrange AS T1 ON T2.Teacher_ID = T1.Teacher_ID \nWHERE T1.Course_ID IS NULL",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35813307762145996,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers whose courses have not been arranged?",
      "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nLEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nWHERE T2.Course_ID IS NULL ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.6809780597686768,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "museum_visit",
      "question": "How many visitors below age 30 are there?",
      "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
      "generated_sql": "SELECT COUNT(*) \nFROM visitor \nWHERE Age < 30;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30704450607299805,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
      "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
      "generated_sql": "SELECT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership > 4 \nORDER BY T1.Level_of_membership DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30402660369873047,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What is the average age of the visitors whose membership level is not higher than 4?",
      "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
      "generated_sql": "SELECT AVG(T2.Age) \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID = T2.ID \nWHERE T2.Level_of_membership <= 4;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5034489631652832,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
      "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
      "generated_sql": "SELECT T1.Name, T1.Level_of_membership\nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nWHERE T1.Level_of_membership > 4\nORDER BY T1.Age DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3234107494354248,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "Find the id and name of the museum that has the most staff members?",
      "gold_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
      "generated_sql": "SELECT m.Museum_ID, m.Name\nFROM museum m\nWHERE m.Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)\nAND m.Open_Year IS NOT NULL\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.290748357772827,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "museum_visit",
      "question": "Find the average number of staff working for the museums that were open before 2009.",
      "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
      "generated_sql": "SELECT AVG(m.Num_of_Staff) \nFROM museum m \nWHERE m.Open_Year < '2009';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3024613857269287,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What are the opening year and staff number of the museum named Plaza Museum?",
      "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
      "generated_sql": "SELECT T1.Open_Year, T1.Num_of_Staff\nFROM museum AS T1\nWHERE T1.Name = 'Plaza Museum' ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.221837282180786,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "museum_visit",
      "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
      "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
      "generated_sql": "SELECT T1.Name \nFROM museum AS T1 \nJOIN (SELECT MIN(Num_of_Staff) AS min_staff \n      FROM museum \n      WHERE Open_Year > '2010') AS T2 \nON T1.Num_of_Staff > T2.min_staff ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 7.506572008132935,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "museum_visit",
      "question": "find the id, name and age for visitors who visited some museums more than once.",
      "gold_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.ID, T1.Name, T1.Age\nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nGROUP BY T1.ID, T1.Name, T1.Age\nHAVING COUNT(T2.Museum_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6567058563232422,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
      "gold_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
      "generated_sql": "SELECT v.ID, v.Name, vm.Level_of_membership\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN (\n  SELECT visitor_ID, SUM(Total_spent) AS Total_spent\n  FROM visit\n  GROUP BY visitor_ID\n  ORDER BY Total_spent DESC\n  LIMIT 1\n) vi_max ON vi.visitor_ID = vi_max.visitor_ID\nJOIN visitor vm ON v.ID = vm.ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8192329406738281,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What are the id and name of the museum visited most times?",
      "gold_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT M.Museum_ID, M.Name \nFROM museum M \nJOIN visit V ON M.Museum_ID = V.Museum_ID \nGROUP BY M.Museum_ID \nORDER BY COUNT(V.Museum_ID) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3282439708709717,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What is the name of the museum that had no visitor yet?",
      "gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
      "generated_sql": "SELECT M.Name \nFROM museum M \nLEFT JOIN visit V ON M.Museum_ID = V.Museum_ID \nWHERE V.Museum_ID IS NULL ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.9692625999450684,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "museum_visit",
      "question": "Find the name and age of the visitor who bought the most tickets at once.",
      "gold_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.Age\nFROM visitor AS T1\nJOIN (\n  SELECT visitor_ID, COUNT(*) as num_tickets\n  FROM visit\n  GROUP BY visitor_ID\n  ORDER BY num_tickets DESC\n  LIMIT 1\n) AS T2 ON T1.ID = T2.visitor_ID",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.08632230758667,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "museum_visit",
      "question": "What are the average and maximum number of tickets bought in all visits?",
      "gold_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
      "generated_sql": "SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS max_tickets\nFROM visit",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28760862350463867,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What is the total ticket expense of the visitors whose membership level is 1?",
      "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
      "generated_sql": "SELECT SUM(T2.Total_spent) \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership = 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3109092712402344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
      "gold_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "museum_visit",
      "question": "Find the number of visitors who did not visit any museum opened after 2010.",
      "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
      "generated_sql": "SELECT COUNT(DISTINCT v.ID) \nFROM visitor v \nLEFT JOIN visit vi ON v.ID = vi.visitor_ID \nLEFT JOIN museum m ON vi.Museum_ID = m.Museum_ID \nWHERE m.Open_Year < '2010' AND vi.Museum_ID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5347812175750732,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "museum_visit",
      "question": "How many museums were opened after 2013 or before 2008?",
      "gold_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
      "generated_sql": "SELECT COUNT(*) \nFROM museum \nWHERE Open_Year > 2013 OR Open_Year < 2008;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6095380783081055,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of players.",
      "gold_sql": "SELECT count(*) FROM players",
      "generated_sql": "SELECT COUNT(player_id) FROM players",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5160424709320068,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many players are there?",
      "gold_sql": "SELECT count(*) FROM players",
      "generated_sql": "SELECT COUNT(player_id) FROM players",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7323009967803955,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of matches.",
      "gold_sql": "SELECT count(*) FROM matches",
      "generated_sql": "SELECT COUNT(*) FROM matches",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39978814125061035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Count the number of matches.",
      "gold_sql": "SELECT count(*) FROM matches",
      "generated_sql": "SELECT COUNT(*) FROM matches",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5527901649475098,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "List the first name and birth date of all players from the country with code USA.",
      "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "generated_sql": "SELECT first_name, birth_date\nFROM players\nWHERE country_code = 'USA'\nORDER BY birth_date DESC\nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.481318473815918,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names and birth dates of players from the USA?",
      "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "generated_sql": "SELECT first_name, birth_date\nFROM players\nWHERE country_code = 'USA';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8920447826385498,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the average age of losers and winners of all matches.",
      "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "generated_sql": "SELECT \n    AVG(CASE WHEN loser_id IS NOT NULL THEN winner_age ELSE loser_age END) AS avg_loser_age,\n    AVG(CASE WHEN winner_id IS NOT NULL THEN winner_age ELSE loser_age END) AS avg_winner_age\nFROM \n    matches;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43394017219543457,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the average ages of losers and winners across matches?",
      "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "generated_sql": "SELECT \n  AVG(CASE WHEN loser_id IS NOT NULL THEN winner_age ELSE NULL END) AS avg_winner_age_loser,\n  AVG(CASE WHEN winner_id IS NOT NULL THEN winner_age ELSE NULL END) AS avg_winner_age_winner\nFROM \n  matches;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.8333535194396973,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the average rank of winners in all matches.",
      "gold_sql": "SELECT avg(winner_rank) FROM matches",
      "generated_sql": "SELECT AVG(winner_rank) \nFROM matches",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5398175716400146,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the average rank for winners in all matches?",
      "gold_sql": "SELECT avg(winner_rank) FROM matches",
      "generated_sql": "SELECT AVG(m.winner_rank) \nFROM matches m \nWHERE m.winner_id IN (SELECT p.player_id \n                      FROM players p \n                      JOIN matches m ON p.player_id = m.loser_id \n                      WHERE m.winner_rank = m.loser_rank);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4159674644470215,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the highest rank of losers in all matches.",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT MAX(m.loser_rank) FROM matches m",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.46839404106140137,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the best rank of losers across all matches?",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT MAX(loser_rank) FROM matches",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.23642969131469727,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "find the number of distinct country codes of all players.",
      "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
      "generated_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6503243446350098,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many distinct countries do players come from?",
      "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
      "generated_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1700553894042969,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of distinct name of losers.",
      "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
      "generated_sql": "SELECT COUNT(DISTINCT loser_name) FROM matches GROUP BY loser_name ORDER BY COUNT(DISTINCT loser_name) DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.263631820678711,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "How many different loser names are there?",
      "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
      "generated_sql": "SELECT COUNT(DISTINCT loser_name) FROM matches",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2695145606994629,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the name of tourney that has more than 10 matches.",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "generated_sql": "SELECT DISTINCT T1.tourney_name \nFROM matches AS T1 \nJOIN players AS T2 ON T1.loser_id = T2.player_id \nWHERE T1.match_num > 10",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39795374870300293,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of tournaments that have more than 10 matches?",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "generated_sql": "SELECT DISTINCT T1.tourney_name \nFROM matches AS T1 \nJOIN tournaments AS T2 ON T1.tourney_id = T2.tourney_id \nWHERE T1.match_num > 10;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.174018383026123,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "List the names of all winners who played in both 2013 and 2016.",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of players who won in both 2013 and 2016?",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "wta_1",
      "question": "List the number of all matches who played in years of 2013 or 2016.",
      "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE year IN (2013, 2016);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3306400775909424,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many matches were played in 2013 or 2016?",
      "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE year IN (2013, 2016);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.69038987159729,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the oldest player.",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "generated_sql": "SELECT first_name, country_code\nFROM players\nWHERE birth_date = (\n  SELECT birth_date\n  FROM players\n  ORDER BY birth_date DESC\n  LIMIT 1\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4544031620025635,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name and country code of the oldest player?",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "generated_sql": "SELECT first_name, country_code\nFROM players\nWHERE birth_date = (\n  SELECT birth_date\n  FROM players\n  ORDER BY birth_date\n  LIMIT 1\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9315598011016846,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name, birth_date\nFROM players\nORDER BY birth_date ASC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5276951789855957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all players, sorted by birth date?",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name, birth_date \nFROM players \nORDER BY birth_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.9610040187835693,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name, birth_date\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44923996925354004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all left handed players, in order of birth date?",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name, birth_date \nFROM players \nWHERE hand = 'L' AND birth_date > '1900-01-01' \nORDER BY birth_date",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.860289812088013,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the player who did the most number of tours.",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN (\n  SELECT player_id, MAX(tours) as max_tours\n  FROM rankings\n  GROUP BY player_id\n) r ON p.player_id = r.player_id\nWHERE r.max_tours = (\n  SELECT MAX(tours) as max_tours\n  FROM rankings\n)\nAND p.country_code = 'USA';  -- Added WHERE condition",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 9.74366307258606,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name and country code of the player with the most tours?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN (\n  SELECT player_id, MAX(tours) as max_tours\n  FROM rankings\n  GROUP BY player_id\n) r ON p.player_id = r.player_id\nWHERE r.max_tours = (\n  SELECT MAX(tours) as max_tours\n  FROM rankings\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1776049137115479,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the year that has the most number of matches.",
      "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT year\nFROM matches\nGROUP BY year\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.35127592086792,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Which year had the most matches?",
      "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT year \nFROM matches \nGROUP BY year \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40204429626464844,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank points of the winner who won the most times.",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.last_name, MAX(r.ranking_points) AS max_rank_points\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nJOIN rankings r ON p.player_id = r.player_id\nWHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings)\nGROUP BY p.first_name, p.last_name\nORDER BY max_rank_points DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.48949217796325684,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.last_name, r.ranking_points\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nWHERE p.player_id IN (\n  SELECT winner_id\n  FROM matches\n  GROUP BY winner_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)\nAND r.ranking_date = (SELECT MAX(ranking_date) FROM rankings)",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 10.989489555358887,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nJOIN rankings r ON p.player_id = r.player_id\nWHERE m.tourney_name = 'Australian Open'\nAND r.ranking_points = (SELECT MAX(ranking_points) FROM rankings r2 WHERE r2.player_id = p.player_id)\nGROUP BY p.first_name, p.last_name\nORDER BY p.first_name",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 15.232041120529175,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nJOIN rankings r ON p.player_id = r.player_id\nWHERE m.tourney_name = 'Australian Open'\nORDER BY r.ranking_points DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.0828866958618164,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
      "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "generated_sql": "SELECT \n  loser_name, \n  winner_name\nFROM \n  matches\nWHERE \n  (minutes, loser_id, winner_id) IN (\n    SELECT \n      minutes, \n      loser_id, \n      winner_id\n    FROM \n      matches\n    ORDER BY \n      minutes DESC\n    LIMIT 1\n  );",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6527762413024902,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of the winner and loser who played in the longest match?",
      "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "generated_sql": "SELECT \n  m.loser_name, \n  m.winner_name, \n  m.minutes\nFROM \n  matches m\nWHERE \n  (m.minutes = (SELECT MAX(minutes) FROM matches))",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44855189323425293,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the average ranking for each player and their first name.",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT \n  p.first_name,\n  AVG(r.ranking) AS average_ranking\nFROM \n  players p\n  LEFT JOIN rankings r ON p.player_id = r.player_id\nGROUP BY \n  p.first_name\nORDER BY \n  average_ranking DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.5374975204467773,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their average rankings?",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT p.first_name, AVG(r.ranking) AS average_ranking\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.first_name;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5086686611175537,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the total ranking points for each player and their first name.",
      "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT \n  p.first_name, \n  COALESCE(SUM(r.ranking_points), 0) AS total_ranking_points\nFROM \n  players p\n  LEFT JOIN rankings r ON p.player_id = r.player_id\nGROUP BY \n  p.first_name\nORDER BY \n  total_ranking_points DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.643760919570923,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their total ranking points?",
      "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT p.first_name, COALESCE(r.ranking_points, 0) AS total_ranking_points\nFROM players p\nLEFT JOIN rankings r ON p.player_id = r.player_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.617877721786499,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "find the number of players for each country.",
      "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "generated_sql": "SELECT T1.country_code, COUNT(*) as num_players\nFROM players AS T1\nGROUP BY T1.country_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6311216354370117,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many players are from each country?",
      "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "generated_sql": "SELECT T1.country_code, COUNT(*) as num_players\nFROM players AS T1\nGROUP BY T1.country_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5648412704467773,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "find the code of the country where has the greatest number of players.",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.country_code\nFROM players AS T1\nJOIN (\n  SELECT country_code, COUNT(*) as count\n  FROM players\n  GROUP BY country_code\n) AS T2\nON T1.country_code = T2.country_code\nORDER BY T2.count DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.46544504165649414,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the code of the country with the most players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.country_code\nFROM players AS T1\nJOIN (\n  SELECT T2.country_code, COUNT(*) as num_players\n  FROM players AS T2\n  GROUP BY T2.country_code\n) AS T3\nON T1.country_code = T3.country_code\nORDER BY T3.num_players DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5459790229797363,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the codes of countries that have more than 50 players.",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "generated_sql": "SELECT T1.country_code\nFROM players AS T1\nJOIN (\n  SELECT player_id, COUNT(*) as player_count\n  FROM matches\n  GROUP BY player_id\n) AS T2\nON T1.player_id = T2.player_id\nWHERE T2.player_count > 50\nGROUP BY T1.country_code\n",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.7076380252838135,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the codes of countries with more than 50 players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "generated_sql": "SELECT T1.country_code\nFROM players AS T1\nJOIN (\n  SELECT player_id, COUNT(*) as player_count\n  FROM matches\n  GROUP BY player_id\n) AS T2\nON T1.player_id = T2.player_id\nWHERE T2.player_count > 50\nGROUP BY T1.country_code\n",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.391750812530518,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of tours for each ranking date.",
      "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "generated_sql": "SELECT \n  r.ranking_date,\n  COUNT(r.tours) AS total_tours\nFROM \n  rankings r\nGROUP BY \n  r.ranking_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7357158660888672,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many total tours were there for each ranking date?",
      "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "generated_sql": "SELECT \n  r.ranking_date,\n  COUNT(m.tourney_id) AS total_tours\nFROM \n  rankings r\n  LEFT JOIN matches m ON r.player_id = m.loser_id OR r.player_id = m.winner_id\nGROUP BY \n  r.ranking_date\nORDER BY \n  r.ranking_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 17.464441061019897,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of matches happened in each year.",
      "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "generated_sql": "SELECT \n  YEAR, \n  COUNT(*) as num_matches\nFROM \n  matches\nWHERE \n  YEAR > 2010  -- added WHERE condition\nGROUP BY \n  YEAR\nORDER BY \n  YEAR DESC;  -- added ORDER BY",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.2232773303985596,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "How many matches were played in each year?",
      "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "generated_sql": "SELECT \n  YEAR,\n  COUNT(*) as num_matches\nFROM \n  matches\nGROUP BY \n  YEAR\nORDER BY \n  YEAR;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3604447841644287,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank of the 3 youngest winners across all matches.",
      "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.winner_rank\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.winner_id\nORDER BY T2.winner_age ASC\nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39711833000183105,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the names and ranks of the three youngest winners across all matches?",
      "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "generated_sql": "SELECT p.first_name, p.last_name, m.winner_rank\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nORDER BY m.winner_age ASC\nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.25927090644836426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many different winners both participated in the WTA Championships and were left handed?",
      "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "generated_sql": "SELECT COUNT(DISTINCT p1.player_id)\nFROM players p1\nJOIN matches m ON p1.player_id = m.winner_id\nWHERE p1.hand = 'L' AND m.tourney_name = 'WTA Championships';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47500181198120117,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of left handed winners who participated in the WTA Championships.",
      "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "generated_sql": "SELECT COUNT(*) \nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39142489433288574,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN (\n  SELECT winner_id, MAX(winner_rank_points) as max_rank_points\n  FROM matches\n  GROUP BY winner_id\n) r ON p.player_id = r.winner_id\nWHERE p.player_id = (\n  SELECT winner_id\n  FROM matches\n  WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4594278335571289,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN (\n  SELECT winner_id, MAX(winner_rank_points) as max_rank_points\n  FROM matches\n  GROUP BY winner_id\n) m ON p.player_id = m.winner_id\nWHERE p.player_id = m.winner_id AND p.player_id IN (\n  SELECT winner_id\n  FROM matches\n  GROUP BY winner_id\n  ORDER BY MAX(winner_rank_points) DESC\n  LIMIT 1\n)",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.3379762172698975,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of players for each hand type.",
      "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "generated_sql": "SELECT hand, COUNT(*) as count\nFROM players\nGROUP BY hand;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.9236676692962646,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "How many players are there for each hand type?",
      "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "generated_sql": "SELECT hand, COUNT(*) as count\nFROM players\nGROUP BY hand;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3455021381378174,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "How many ships ended up being 'Captured'?",
      "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
      "generated_sql": "SELECT COUNT(*) \nFROM ship \nWHERE disposition_of_ship = 'Captured';",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2934534549713135,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
      "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
      "generated_sql": "SELECT T2.name, T2.tonnage \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nORDER BY T2.name DESC",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4120631217956543,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "List the name, date and result of each battle.",
      "gold_sql": "SELECT name ,  date FROM battle",
      "generated_sql": "SELECT T1.name, T1.date, T1.result \nFROM battle AS T1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2701845169067383,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What is maximum and minimum death toll caused each time?",
      "gold_sql": "SELECT max(killed) ,  min(killed) FROM death",
      "generated_sql": "SELECT MAX(killed) AS max_death, MIN(killed) AS min_death\nFROM death;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.890483856201172,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What is the average number of injuries caused each time?",
      "gold_sql": "SELECT avg(injured) FROM death",
      "generated_sql": "SELECT AVG(injured) FROM death",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.455458402633667,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
      "gold_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
      "generated_sql": "SELECT d.killed, d.injured\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4973621368408203,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
      "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
      "generated_sql": "SELECT T1.name, T1.result\nFROM battle AS T1\nWHERE T1.bulgarian_commander != 'Boril' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.528236150741577,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "battle_death",
      "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
      "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
      "generated_sql": "SELECT DISTINCT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.ship_type = 'Brig' AND b.result != 'Bulgarian victory';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6104583740234375,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
      "gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
      "generated_sql": "SELECT b.id, b.name\nFROM battle b\nJOIN death d ON b.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.409404993057251,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What is the ship id and name that caused most total injuries?",
      "gold_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT s.id, s.name\nFROM ship s\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY s.id, s.name\nORDER BY SUM(d.injured) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40573883056640625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
      "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
      "generated_sql": "SELECT DISTINCT T1.name \nFROM battle AS T1 \nJOIN battle AS T2 ON T1.bulgarian_commander = 'Kaloyan' AND T2.latin_commander = 'Baldwin I'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.46772217750549316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "How many different results are there for the battles?",
      "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle",
      "generated_sql": "SELECT COUNT(DISTINCT result) \nFROM battle;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3365628719329834,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "How many battles did not lose any ship with tonnage '225'?",
      "gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
      "generated_sql": "SELECT COUNT(b.id) \nFROM battle b \nLEFT JOIN ship s ON b.id = s.lost_in_battle \nWHERE s.tonnage = '225' AND s.id IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4203011989593506,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
      "gold_sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "battle_death",
      "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
      "gold_sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "battle_death",
      "question": "What are the notes of the death events which has substring 'East'?",
      "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
      "generated_sql": "SELECT note \nFROM death \nWHERE note LIKE '%East%' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.886357069015503,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "what are all the addresses including line 1 and line 2?",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "generated_sql": "SELECT line_1, line_2 \nFROM Addresses\nWHERE line_1 IS NOT NULL AND line_2 IS NOT NULL",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.4398152828216553,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first and second line for all addresses?",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "generated_sql": "SELECT line_1, line_2 \nFROM Addresses;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47653770446777344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many courses in total are listed?",
      "gold_sql": "SELECT count(*) FROM Courses",
      "generated_sql": "SELECT COUNT(*) FROM Courses",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23084592819213867,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many courses are there?",
      "gold_sql": "SELECT count(*) FROM Courses",
      "generated_sql": "SELECT COUNT(*) FROM Courses",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5743274688720703,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How is the math course described?",
      "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
      "generated_sql": "SELECT T2.course_description\nFROM Courses AS T2\nWHERE T2.course_name = 'math';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4482588768005371,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the descriptions for all the math courses?",
      "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
      "generated_sql": "SELECT T1.course_description \nFROM Courses AS T1 \nWHERE T1.course_name = 'math';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4982411861419678,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the zip code of the address in the city Port Chelsea?",
      "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
      "generated_sql": "SELECT T2.zip_postcode \nFROM Addresses AS T1 \nINNER JOIN Students AS T2 \nON T1.address_id = T2.current_address_id \nWHERE T1.city = 'Port Chelsea';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.984447956085205,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the zip code for Port Chelsea?",
      "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
      "generated_sql": "SELECT T1.zip_postcode \nFROM Addresses AS T1 \nWHERE T1.city = 'Port Chelsea'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4915175437927246,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which department offers the most number of degrees? List department name and id.",
      "gold_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    d.department_name, \n    d.department_id\nFROM \n    Departments d\nJOIN \n    Degree_Programs dp ON d.department_id = dp.department_id\nWHERE \n    d.department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1)\nGROUP BY \n    d.department_id",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.570759057998657,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name and id of the department with the most number of degrees ?",
      "gold_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
      "generated_sql": "SELECT \n    D.department_name,\n    D.department_id\nFROM \n    Degree_Programs DP\nJOIN \n    Departments D ON DP.department_id = D.department_id\nGROUP BY \n    D.department_id\nORDER BY \n    COUNT(DP.degree_program_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35477447509765625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many departments offer any degree?",
      "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT D.department_id) \nFROM Departments D \nJOIN Degree_Programs DP ON D.department_id = DP.department_id;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3337118625640869,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different departments offer degrees?",
      "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT T1.department_id) \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 ON T1.department_id = T2.department_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5962250232696533,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different degree names are offered?",
      "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT T1.degree_summary_name) \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7298977375030518,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different degrees are offered?",
      "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT degree_summary_name) \nFROM Degree_Programs;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3063473701477051,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many degrees does the engineering department offer?",
      "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
      "generated_sql": "SELECT COUNT(*) \nFROM Degree_Programs \nWHERE department_id IN (\n  SELECT department_id \n  FROM Departments \n  WHERE department_name = 'engineering'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34732580184936523,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many degrees does the engineering department have?",
      "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
      "generated_sql": "SELECT COUNT(*) \nFROM Degree_Programs \nWHERE department_id IN (\n  SELECT department_id \n  FROM Departments \n  WHERE department_name = 'engineering'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5727546215057373,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions of all the sections?",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "generated_sql": "SELECT section_name, section_description \nFROM Sections;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5133588314056396,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions for all the sections?",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "generated_sql": "SELECT section_name, section_description \nFROM Sections;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.7349388599395752,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and id of courses having at most 2 sections?",
      "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
      "generated_sql": "SELECT C.course_name, C.course_id\nFROM Courses C\nJOIN Sections S ON C.course_id = S.course_id\nGROUP BY C.course_id\nHAVING COUNT(S.section_id) <= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31482410430908203,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and ids of every course with less than 2 sections?",
      "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
      "generated_sql": "SELECT c.course_name, c.course_id \nFROM Courses c \nWHERE c.course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) >= 2);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.879971504211426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List the section_name in reversed lexicographical order.",
      "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "generated_sql": "SELECT section_name \nFROM Sections \nORDER BY section_name DESC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.511713981628418,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names of the sections in reverse alphabetical order?",
      "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "generated_sql": "SELECT section_name \nFROM Sections \nORDER BY section_name ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.5839321613311768,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the semester which most student registered in? Show both the name and the id.",
      "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.semester_name, T2.semester_id\nFROM Student_Enrolment AS T1\nJOIN Semesters AS T2 ON T1.semester_id = T2.semester_id\nGROUP BY T2.semester_id\nORDER BY COUNT(T1.student_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.464569091796875,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "For each semester, what is the name and id of the one with the most students registered?",
      "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n  S.semester_name,\n  COUNT(SE.student_id) AS total_students,\n  SE.semester_id\nFROM \n  Semesters S\n  JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id\nGROUP BY \n  S.semester_name, SE.semester_id\nORDER BY \n  total_students DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4390995502471924,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the description of the department whose name has the substring the computer?",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "generated_sql": "SELECT T.department_description\nFROM Departments T\nWHERE T.department_name LIKE '%computer%' ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.3120131492614746,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the department description for the one whose name has the word computer?",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "generated_sql": "SELECT T.department_description \nFROM Departments T \nWHERE T.department_name LIKE '%computer%'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34136033058166504,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
      "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "generated_sql": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  se.student_id\nFROM \n  Students s\nJOIN \n  Student_Enrolment se ON s.student_id = se.student_id\nJOIN \n  Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id\nJOIN \n  Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY \n  se.student_id\nHAVING \n  COUNT(DISTINCT sec.course_id) = 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39621686935424805,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
      "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "generated_sql": "SELECT \n  s.student_id,\n  s.first_name,\n  s.middle_name,\n  s.last_name,\n  se.degree_program_id\nFROM \n  Students s\n  JOIN Student_Enrolment se ON s.student_id = se.student_id\nWHERE \n  se.degree_program_id IN (\n    SELECT \n      degree_program_id\n    FROM \n      Degree_Programs\n    GROUP BY \n      degree_program_id\n    HAVING \n      COUNT(DISTINCT semester_id) = 1\n  )",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 12.947161436080933,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id\nWHERE T3.degree_summary_name = 'Bachelor'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7582719326019287,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
      "generated_sql": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name\nFROM \n  Students s\nJOIN \n  Student_Enrolment se ON s.student_id = se.student_id\nJOIN \n  Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE \n  dp.degree_summary_name = 'Bachelor';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4991028308868408,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the kind of program which most number of students are enrolled in?",
      "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    D.degree_summary_name, \n    COUNT(SE.student_id) as total_enrolled\nFROM \n    Degree_Programs D\nJOIN \n    Student_Enrolment SE ON D.degree_program_id = SE.degree_program_id\nGROUP BY \n    D.degree_summary_name\nORDER BY \n    total_enrolled DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6915059089660645,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the degree summary name that has the most number of students enrolled?",
      "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    dp.degree_summary_name, \n    COUNT(se.student_id) as total_students\nFROM \n    Degree_Programs dp\nJOIN \n    Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nWHERE \n    dp.degree_summary_name NOT LIKE '%Certificate%'  -- exclude certificate programs\nGROUP BY \n    dp.degree_summary_name\nORDER BY \n    total_students DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.142691373825073,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
      "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    D.degree_summary_name, \n    COUNT(SE.student_enrolment_id) AS total_enrolled\nFROM \n    Degree_Programs D\nJOIN \n    Student_Enrolment SE ON D.degree_program_id = SE.degree_program_id\nGROUP BY \n    D.degree_summary_name\nORDER BY \n    total_enrolled DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36814308166503906,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the program id and the summary of the degree that has the most students enrolled?",
      "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    dp.degree_program_id,\n    dp.degree_summary_name\nFROM \n    Degree_Programs dp\nJOIN \n    Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY \n    dp.degree_program_id, dp.degree_summary_name\nORDER BY \n    COUNT(se.student_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3344388008117676,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    s.student_id,\n    s.first_name,\n    s.middle_name,\n    s.last_name,\n    COUNT(se.student_enrolment_id) AS num_enrollments\nFROM \n    Students s\nJOIN \n    Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n    s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n    num_enrollments DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6496410369873047,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name, \n  s.student_id, \n  COUNT(se.student_enrolment_id) AS num_enrollments\nFROM \n  Students s\n  JOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n  s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n  num_enrollments DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5363218784332275,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which semesters do not have any student enrolled? List the semester name.",
      "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
      "generated_sql": "SELECT s.semester_name \nFROM Semesters s \nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id \nWHERE se.student_enrolment_id IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5867435932159424,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name of the semester with no students enrolled?",
      "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
      "generated_sql": "SELECT T2.semester_name \nFROM Students AS T1 \nLEFT JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nWHERE T2.student_id IS NULL",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.2512879371643066,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are all the course names of the courses which ever have students enrolled in?",
      "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
      "generated_sql": "SELECT DISTINCT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5102689266204834,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names of all courses that have some students enrolled?",
      "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
      "generated_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nGROUP BY C.course_name\nHAVING COUNT(DISTINCT SEC.student_enrolment_id) > 0;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40786242485046387,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What's the name of the course with most number of enrollments?",
      "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nWHERE SEC.student_enrolment_id IN (SELECT SEC.student_enrolment_id FROM Student_Enrolment_Courses SEC GROUP BY SEC.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1)\nGROUP BY C.course_name\nORDER BY COUNT(*) DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.3485448360443115,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name of the course with the most students enrolled?",
      "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nJOIN Student_Enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id\nGROUP BY C.course_name\nORDER BY COUNT(SE.student_enrolment_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7125580310821533,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date and id of the transcript with at least 2 course results.",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id\nFROM Transcripts T1\nJOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id\nJOIN Student_Enrolment_Courses T3 ON T2.student_course_id = T3.student_course_id\nGROUP BY T1.transcript_id\nHAVING COUNT(DISTINCT T3.course_id) >= 2;",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 7.476545095443726,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the date and id of the transcript with at least 2 courses listed?",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id\nFROM Transcripts T1\nJOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id\nJOIN Student_Enrolment_Courses T3 ON T2.student_course_id = T3.student_course_id\nJOIN Student_Enrolment T4 ON T3.student_enrolment_id = T4.student_enrolment_id\nWHERE T4.degree_program_id IS NOT NULL AND T4.semester_id IS NOT NULL\nAND T3.student_enrolment_id IN (\n  SELECT T5.student_enrolment_id\n  FROM Student_Enrolment_Courses T5\n  GROUP BY T5.student_enrolment_id\n  HAVING COUNT(*) >= 2\n) LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 8.435811519622803,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
      "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
      "generated_sql": "SELECT T.cell_mobile_number\nFROM Students AS T\nWHERE T.first_name = 'Timmothy' AND T.last_name = 'Ward';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.48456335067749023,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the mobile phone number of the student named Timmothy Ward ?",
      "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
      "generated_sql": "SELECT T2.cell_mobile_number \nFROM Students AS T1 \nINNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nWHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.358536005020142,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is the first student to register? List the first name, middle name and last name.",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
      "generated_sql": "SELECT first_name, middle_name, last_name\nFROM Students\nORDER BY date_first_registered ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4351792335510254,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name of the first student to register?",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
      "generated_sql": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name\nFROM \n  Students s\nORDER BY \n  s.date_first_registered ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3400840759277344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nWHERE T1.date_first_registered = (\n  SELECT MIN(T2.date_first_registered)\n  FROM Students AS T2\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.456946849822998,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name of the earliest school graduate?",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
      "generated_sql": "SELECT \n  s.first_name, \n  s.middle_name, \n  s.last_name\nFROM \n  Students s\nJOIN \n  Student_Enrolment se ON s.student_id = se.student_id\nJOIN \n  Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id\nJOIN \n  Transcripts t ON sec.student_course_id = (SELECT student_course_id FROM Transcript_Contents ORDER BY transcript_id ASC LIMIT 1)\nWHERE \n  t.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)\nAND se.degree_program_id = (SELECT degree_program_id FROM Student_Enrolment WHERE student_id = s.student_id ORDER BY semester_id ASC LIMIT 1)\nAND s.student_id = (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = se.degree_program_id ORDER BY semester_id ASC LIMIT 1)\nGROUP BY \n  s.first_name, s.middle_name, s.last_name\nORDER BY \n  t.transcript_date ASC\nLIMIT \n  1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.027754068374634,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Whose permanent address is different from his or her current address? List his or her first name.",
      "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
      "generated_sql": "SELECT S.first_name\nFROM Students S\nWHERE S.permanent_address_id != S.current_address_id;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3551442623138428,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first name of the student whose permanent address is different from his or her current one?",
      "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
      "generated_sql": "SELECT T1.first_name\nFROM Students T1\nJOIN Addresses T2 ON T1.current_address_id = T2.address_id\nJOIN Addresses T3 ON T1.permanent_address_id = T3.address_id\nWHERE T2.line_1 != T3.line_1 OR T2.line_2 != T3.line_2 OR T2.line_3 != T3.line_3\nOR T2.city != T3.city OR T2.zip_postcode != T3.zip_postcode\nOR T2.state_province_county != T3.state_province_county OR T2.country != T3.country\nOR T2.other_address_details != T3.other_address_details\nGROUP BY T1.first_name\nORDER BY T1.first_name ASC\nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 9.111994743347168,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which address holds the most number of students currently? List the address id and all lines.",
      "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT A.address_id, A.line_1, A.line_2, A.line_3\nFROM Addresses A\nJOIN Students S ON A.address_id = S.current_address_id\nGROUP BY A.address_id\nORDER BY COUNT(S.student_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3208649158477783,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the id, line 1, and line 2 of the address with the most students?",
      "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT A.address_id, A.line_1, A.line_2\nFROM Addresses A\nJOIN Students S ON A.address_id = S.current_address_id\nWHERE A.line_1 IS NOT NULL AND A.line_2 IS NOT NULL\nGROUP BY A.address_id, A.line_1, A.line_2\nORDER BY COUNT(S.student_id) DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.722274303436279,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "On average, when were the transcripts printed?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(T.transcript_date) \nFROM Transcripts T",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27217698097229004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the average transcript date?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(T.transcript_date) AS average_transcript_date\nFROM Transcripts T;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27950096130371094,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "When is the first transcript released? List the date and details.",
      "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date, T1.other_details\nFROM Transcripts T1\nWHERE T1.transcript_date = (\n  SELECT MIN(T2.transcript_date)\n  FROM Transcripts T2\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3482203483581543,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the earliest date of a transcript release, and what details can you tell me?",
      "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
      "generated_sql": "SELECT \n  MIN(T.transcript_date) AS earliest_transcript_date,\n  T.transcript_date,\n  T.transcript_id,\n  T.other_details\nFROM \n  Transcripts T\nORDER BY \n  T.transcript_date ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.49101686477661133,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many transcripts are released?",
      "gold_sql": "SELECT count(*) FROM Transcripts",
      "generated_sql": "SELECT COUNT(*) FROM Transcripts",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27248668670654297,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many transcripts are listed?",
      "gold_sql": "SELECT count(*) FROM Transcripts",
      "generated_sql": "SELECT COUNT(*) FROM Transcripts",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3595256805419922,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the last transcript release date?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT T.transcript_date \nFROM Transcripts T \nORDER BY T.transcript_date DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23763394355773926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "When was the last transcript released?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT T.transcript_date\nFROM Transcripts T\nORDER BY T.transcript_date DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28263115882873535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
      "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    COUNT(DISTINCT tc.student_course_id) AS max_enrollments,\n    sce.student_enrolment_id\nFROM \n    Transcript_Contents tc\nJOIN \n    Student_Enrolment_Courses sec ON tc.student_course_id = sec.student_course_id\nJOIN \n    Student_Enrolment sce ON sec.student_enrolment_id = sce.student_enrolment_id\nGROUP BY \n    sce.student_enrolment_id\nORDER BY \n    max_enrollments DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4042487144470215,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
      "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n    COUNT(DISTINCT tc.student_course_id) AS max_course_count,\n    sc.course_id\nFROM \n    Transcript_Contents tc\nJOIN \n    Student_Enrolment_Courses sec ON tc.student_course_id = sec.student_course_id\nJOIN \n    Courses sc ON sec.course_id = sc.course_id\nGROUP BY \n    sc.course_id\nORDER BY \n    COUNT(DISTINCT tc.student_course_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.32975029945373535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date of the transcript which shows the least number of results, also list the id.",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T.transcript_date, T.transcript_id\nFROM Transcripts T\nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nWHERE (TC.student_course_id, T.transcript_date) IN (\n  SELECT student_course_id, transcript_date\n  FROM Transcript_Contents\n  GROUP BY student_course_id, transcript_date\n  ORDER BY COUNT(*) ASC\n  LIMIT 1\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.403477907180786,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the date and id of the transcript with the least number of results?",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id\nFROM Transcripts T1\nJOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id\nWHERE (T1.transcript_id, T2.student_course_id) IN (\n  SELECT T1.transcript_id, COUNT(*) as count\n  FROM Transcripts T1\n  JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id\n  GROUP BY T1.transcript_id\n  ORDER BY count ASC\n  LIMIT 1\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5913331508636475,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
      "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
      "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different addresses do the students currently live?",
      "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
      "generated_sql": "SELECT COUNT(DISTINCT T1.current_address_id) \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34467387199401855,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the different addresses that have students living there?",
      "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
      "generated_sql": "SELECT DISTINCT A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details\nFROM Addresses A\nJOIN Students S ON A.address_id = S.current_address_id;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.2392451763153076,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List all the student details in reversed lexicographical order.",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "generated_sql": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_first_registered IS NOT NULL\nORDER BY first_name DESC, middle_name DESC, last_name DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.353386163711548,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What other details can you tell me about students in reverse alphabetical order?",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "generated_sql": "SELECT first_name, middle_name, last_name \nFROM Students \nORDER BY last_name DESC, first_name DESC, middle_name DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4840424060821533,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Describe the section h.",
      "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
      "generated_sql": "SELECT T1.section_name \nFROM Sections AS T1 \nWHERE T1.section_name = 'h';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4641880989074707,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the description for the section named h?",
      "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
      "generated_sql": "SELECT T2.section_description\nFROM Sections AS T1\nJOIN Courses AS T2 ON T1.course_id = T2.course_id\nWHERE T1.section_name = 'h'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.983567953109741,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
      "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.permanent_address_id IN (\n  SELECT address_id \n  FROM Addresses \n  WHERE country = 'Haiti'\n) \nOR T1.cell_mobile_number = '09700166582' \nGROUP BY T1.first_name \nORDER BY COUNT(T1.student_id) DESC \nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.774896860122681,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
      "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
      "generated_sql": "SELECT T1.first_name\nFROM Students T1\nWHERE T1.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.070197820663452,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all cartoons in alphabetical order.",
      "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
      "generated_sql": "SELECT Title\nFROM Cartoon\nORDER BY Title ASC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5653188228607178,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the titles of the cartoons sorted alphabetically?",
      "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
      "generated_sql": "SELECT Title\nFROM Cartoon\nORDER BY Title ASC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24415826797485352,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List all cartoon directed by \"Ben Jones\".",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
      "generated_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2142183780670166,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the names of all cartoons directed by Ben Jones?",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
      "generated_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23306608200073242,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons were written by \"Joseph Kuhr\"?",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "generated_sql": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3948957920074463,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the number of cartoones written by Joseph Kuhr?",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "generated_sql": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.7977869510650635,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "list all cartoon titles and their directors ordered by their air date",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT C.Title, C.Directed_by\nFROM Cartoon C\nJOIN TV_series TS ON C.Channel = TS.Channel\nWHERE TS.Air_Date IS NOT NULL\nORDER BY TS.Air_Date",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.1420066356658936,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "What is the name and directors of all the cartoons that are ordered by air date?",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT C.Title, C.Directed_by\nFROM Cartoon C\nORDER BY C.Original_air_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3036797046661377,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
      "generated_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.996763229370117,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
      "generated_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.38170337677001953,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
      "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT \n  T1.Country, \n  COUNT(T2.id) AS Number_of_TV_Channels\nFROM \n  TV_Channel T1\n  LEFT JOIN TV_series T2 ON T1.id = T2.Channel\nWHERE \n  T1.Language = 'English' AND T1.Country IS NOT NULL\nGROUP BY \n  T1.Country\nORDER BY \n  Number_of_TV_Channels DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 11.141831398010254,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "What is the country with the most number of TV Channels and how many does it have?",
      "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT \n  T1.Country, \n  COUNT(T2.id) AS total_channels\nFROM \n  TV_Channel T1\n  LEFT JOIN TV_series T2 ON T1.id = T2.Channel\nGROUP BY \n  T1.Country\nORDER BY \n  total_channels DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42032456398010254,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List the number of different series names and contents in the TV Channel table.",
      "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
      "generated_sql": "SELECT \n  COUNT(DISTINCT TV_Channel.id) AS series_count,\n  COUNT(DISTINCT TV_Channel.series_name) AS series_name_count,\n  COUNT(DISTINCT TV_Channel.Content) AS content_count\nFROM \n  TV_Channel",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.31148505210876465,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "How many different series and contents are listed in the TV Channel table?",
      "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
      "generated_sql": "SELECT COUNT(DISTINCT TV_Channel.id), COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content)\nFROM TV_Channel",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.27609920501708984,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Content\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T1.series_name = 'Sky Radio';",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.8216376304626465,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of the series Sky Radio?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT Content\nFROM TV_Channel\nWHERE id = (SELECT Channel\n            FROM TV_series\n            WHERE series_name = 'Sky Radio');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31322193145751953,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
      "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Package_Option\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T1.series_name = 'Sky Radio';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3413360118865967,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
      "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Package_Option\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T2.Channel IN (\n  SELECT id\n  FROM TV_Channel\n  WHERE series_name = 'Sky Radio'\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34005308151245117,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "How many TV Channel using language English?",
      "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
      "generated_sql": "SELECT COUNT(T2.id) \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nWHERE T1.Language = 'English';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.24313926696777344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "How many TV Channels use the English language?",
      "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
      "generated_sql": "SELECT COUNT(TV_Channel.id) \nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_Channel.Language = 'English';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2344679832458496,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
      "generated_sql": "SELECT \n    T1.Language, \n    COUNT(T2.id) AS Number_of_TV_Channel\nFROM \n    TV_Channel T1\nJOIN \n    TV_series T2 ON T1.id = T2.Channel\nGROUP BY \n    T1.Language\nORDER BY \n    COUNT(T2.id) ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4529452323913574,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Language, COUNT(T2.Channel) as Channel_Count\nFROM TV_Channel T1\nJOIN TV_series T2 ON T1.id = T2.Channel\nGROUP BY T1.Language\nORDER BY Channel_Count ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3058807849884033,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List each language and the number of TV Channels using it.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
      "generated_sql": "SELECT \n  TV_Channel.Language, \n  COUNT(TV_Channel.id) AS num_channels\nFROM \n  TV_Channel\nGROUP BY \n  TV_Channel.Language\nORDER BY \n  num_channels DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.38683581352233887,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "For each language, list the number of TV Channels that use it.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
      "generated_sql": "SELECT \n  T1.Language, \n  COUNT(T2.id) AS num_channels\nFROM \n  TV_Channel T1\n  LEFT JOIN TV_series T2 ON T1.id = T2.Channel\nGROUP BY \n  T1.Language\nORDER BY \n  num_channels DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.5923378467559814,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
      "generated_sql": "SELECT T2.series_name\nFROM Cartoon AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Title = 'The Rise of the Blue Beetle!';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3408637046813965,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
      "generated_sql": "SELECT T2.series_name\nFROM Cartoon AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Title = 'The Rise of the Blue Beetle!'\nGROUP BY T2.series_name\nORDER BY COUNT(T1.id) DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.424288511276245,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
      "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT C.Title\nFROM Cartoon C\nJOIN TV_Channel TC ON C.Channel = TC.id\nWHERE TC.series_name = 'Sky Radio';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41010308265686035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
      "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT C.Title\nFROM Cartoon C\nJOIN TV_Channel TC ON C.Channel = TC.id\nWHERE TC.series_name = 'Sky Radio';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2853975296020508,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List the Episode of all TV series sorted by rating.",
      "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
      "generated_sql": "SELECT T2.Episode\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nORDER BY T2.Rating DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3473987579345703,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are all of the episodes ordered by ratings?",
      "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
      "generated_sql": "SELECT T2.Episode, T2.Rating\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nORDER BY T2.Rating DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3858928680419922,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
      "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
      "generated_sql": "SELECT T1.Episode, T1.Rating\nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nORDER BY T1.Rating DESC\nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.428910732269287,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
      "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
      "generated_sql": "SELECT T1.Episode, T1.Rating\nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nORDER BY T1.Rating DESC\nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4709656238555908,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is minimum and maximum share of TV series?",
      "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
      "generated_sql": "SELECT MIN(T2.Share) AS Min_Share, MAX(T2.Share) AS Max_Share\nFROM TV_Channel T1\nJOIN TV_series T2 ON T1.id = T2.Channel;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.3756251335144043,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the maximum and minimum share for the TV series?",
      "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
      "generated_sql": "SELECT MAX(T2.Share) AS max_share, MIN(T2.Share) AS min_share\nFROM TV_Channel T1\nJOIN TV_series T2 ON T1.id = T2.Channel;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4227018356323242,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Air_Date\nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Episode = 'A Love of a Lifetime';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.897385358810425,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "When did the episode \"A Love of a Lifetime\" air?",
      "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT Air_Date\nFROM TV_series\nWHERE Episode = 'A Love of a Lifetime';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47458982467651367,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Weekly_Rank\nFROM TV_Channel AS T1\nJOIN TV_series AS T2\nON T1.id = T2.Channel\nWHERE T2.Episode = 'A Love of a Lifetime';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5743327140808105,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Weekly_Rank\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T2.Episode = 'A Love of a Lifetime';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.44367265701293945,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.series_name\nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Episode = 'A Love of a Lifetime';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5135610103607178,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.series_name\nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Episode = 'A Love of a Lifetime';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33966827392578125,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
      "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Episode \nFROM TV_series AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T2.series_name = 'Sky Radio';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4694082736968994,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the episode for the TV series named \"Sky Radio\"?",
      "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T2.Episode\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T1.series_name = 'Sky Radio';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8862252235412598,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "Find the number of cartoons directed by each of the listed directors.",
      "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
      "generated_sql": "SELECT \n  c.Directed_by,\n  COUNT(*) as num_cartoons\nFROM \n  Cartoon c\nWHERE \n  c.Directed_by IS NOT NULL  -- Filter out null directors\nGROUP BY \n  c.Directed_by\nORDER BY \n  num_cartoons ASC;  -- Order by number of cartoons in ascending order",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.949246168136597,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons did each director create?",
      "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
      "generated_sql": "SELECT \n  C.Directed_by, \n  COUNT(C.id) AS num_cartoons\nFROM \n  Cartoon C\nGROUP BY \n  C.Directed_by;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4070851802825928,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "Find the production code and channel of the most recently aired cartoon .",
      "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
      "generated_sql": "SELECT C.Production_code, C.Channel\nFROM Cartoon C\nJOIN (\n  SELECT Channel, MAX(Original_air_date) AS max_date\n  FROM Cartoon\n  GROUP BY Channel\n) AS recent ON C.Channel = recent.Channel\nWHERE C.Original_air_date = recent.max_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9544239044189453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the produdction code and channel of the most recent cartoon ?",
      "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
      "generated_sql": "SELECT C.Production_code, C.Channel\nFROM Cartoon C\nWHERE C.id = (\n  SELECT MAX(id)\n  FROM Cartoon\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5420577526092529,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "Find the package choice and series name of the TV channel that has high definition TV.",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "generated_sql": "SELECT T1.Package_Option, T1.series_name\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T1.Hight_definition_TV = 'yes';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.0041303634643555,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "generated_sql": "SELECT T1.Package_Option, T1.series_name\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nWHERE T1.Hight_definition_TV = 'yes';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.704281330108643,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
      "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SELECT DISTINCT T2.Country\nFROM Cartoon AS T1\nJOIN TV_Channel AS T2 ON T1.Channel = T2.id\nWHERE T1.Written_by = 'Todd Casey';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.300142049789429,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
      "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SELECT DISTINCT T1.Country\nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2.Written_by = 'Todd Casey'\nORDER BY T1.Country",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 7.575969696044922,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
      "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "tvshow",
      "question": "What are the countries that are not playing cartoons written by Todd Casey?",
      "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "tvshow",
      "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "tvshow",
      "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "tvshow",
      "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "generated_sql": "SELECT \n  T1.Pixel_aspect_ratio_PAR,\n  T1.Country\nFROM \n  TV_Channel AS T1\nWHERE \n  T1.Language != 'English'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31235313415527344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "generated_sql": "SELECT \n  T1.Pixel_aspect_ratio_PAR,\n  T1.Country\nFROM \n  TV_Channel AS T1\nWHERE \n  T1.Language != 'English' AND T1.Country IS NOT NULL",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.839699029922485,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "tvshow",
      "question": "find id of the tv channels that from the countries where have more than two tv channels.",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "generated_sql": "SELECT T1.id\nFROM TV_Channel AS T1\nJOIN (\n  SELECT Country, COUNT(id) as count\n  FROM TV_Channel\n  GROUP BY Country\n  HAVING COUNT(id) > 2\n) AS T2\nON T1.Country = T2.Country",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43120574951171875,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of all tv channels that have more than 2 TV channels?",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "generated_sql": "SELECT T1.id \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nGROUP BY T1.id \nHAVING COUNT(T2.id) > 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5111298561096191,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "tvshow",
      "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
      "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
      "generated_sql": "SELECT T1.Package_Option\nFROM TV_Channel AS T1\nJOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2.Directed_by != 'Ben Jones'\nGROUP BY T1.Package_Option\nHAVING COUNT(T2.id) = 0;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36143064498901367,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
      "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
      "generated_sql": "SELECT DISTINCT T1.Package_Option\nFROM TV_Channel T1\nWHERE T1.id NOT IN (\n  SELECT T2.Channel\n  FROM Cartoon T2\n  WHERE T2.Directed_by = 'Ben Jones'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.67119288444519,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "How many poker players are there?",
      "gold_sql": "SELECT count(*) FROM poker_player",
      "generated_sql": "SELECT COUNT(*) \nFROM poker_player;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2739274501800537,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Count the number of poker players.",
      "gold_sql": "SELECT count(*) FROM poker_player",
      "generated_sql": "SELECT COUNT(*) \nFROM poker_player;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30411815643310547,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "List the earnings of poker players in descending order.",
      "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "generated_sql": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3044552803039551,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What are the earnings of poker players, ordered descending by value?",
      "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "generated_sql": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30849599838256836,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "List the final tables made and the best finishes of poker players.",
      "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
      "generated_sql": "SELECT T1.Name, T1.Height, T2.Poker_Player_ID, T2.Final_Table_Made, T2.Best_Finish\nFROM people AS T1\nJOIN poker_player AS T2\nON T1.People_ID = T2.People_ID\nORDER BY T2.Best_Finish DESC\nLIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.9355597496032715,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "What are the final tables made and best finishes for all poker players?",
      "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
      "generated_sql": "SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.22403335571289062,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players?",
      "gold_sql": "SELECT avg(Earnings) FROM poker_player",
      "generated_sql": "SELECT AVG(Earnings) AS Average_Earnings\nFROM poker_player\nGROUP BY People_ID",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.6648941040039062,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "Return the average earnings across all poker players.",
      "gold_sql": "SELECT avg(Earnings) FROM poker_player",
      "generated_sql": "SELECT AVG(T2.Earnings) \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.People_ID = T2.People_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.334928035736084,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What is the money rank of the poker player with the highest earnings?",
      "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
      "generated_sql": "SELECT Money_Rank\nFROM poker_player\nORDER BY Earnings DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.596050500869751,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Return the money rank of the player with the greatest earnings.",
      "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
      "generated_sql": "SELECT p1.Money_Rank\nFROM poker_player p1\nJOIN (SELECT MAX(Earnings) as max_earnings FROM poker_player) p2\nON p1.Earnings = p2.max_earnings\nORDER BY p1.Earnings DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.391503572463989,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
      "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
      "generated_sql": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4051814079284668,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
      "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
      "generated_sql": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33513426780700684,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.7657346725463867,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "Return the names of all the poker players.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nINNER JOIN people AS T2 \nON T1.People_ID = T2.People_ID ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.0425658226013184,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players whose earnings is higher than 300000?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1052970886230469,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Give the names of poker players who have earnings above 300000.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings > 300000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.9362545013427734,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "List the names of poker players ordered by the final tables made in ascending order.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nGROUP BY T2.Name \nORDER BY COUNT(T1.Final_Table_Made) ASC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 9.417927742004395,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Final_Table_Made ASC",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27250099182128906,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What is the birth date of the poker player with the lowest earnings?",
      "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
      "generated_sql": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings = (SELECT MIN(Earnings) FROM poker_player)\nGROUP BY T2.Birth_Date\nORDER BY T1.Earnings ASC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.236528158187866,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "Return the birth date of the poker player with the lowest earnings.",
      "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
      "generated_sql": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6049797534942627,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What is the money rank of the tallest poker player?",
      "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "generated_sql": "SELECT T2.Money_Rank \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T2.Height DESC \nLIMIT 1",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 9.552051782608032,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Return the money rank of the poker player with the greatest height.",
      "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "generated_sql": "SELECT T1.Money_Rank \nFROM poker_player AS T1 \nJOIN people AS T2 \nON T1.People_ID = T2.People_ID \nORDER BY T2.Height DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3773033618927002,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players with height higher than 200?",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "generated_sql": "SELECT AVG(T2.Earnings) \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Height > 200;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5080721378326416,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Give average earnings of poker players who are taller than 200.",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "generated_sql": "SELECT AVG(T2.Earnings) \nFROM people AS T1 \nINNER JOIN poker_player AS T2 \nON T1.People_ID = T2.People_ID \nWHERE T1.Height > 200;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.9017186164855957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players in descending order of earnings?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5436067581176758,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Return the names of poker players sorted by their earnings descending.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.897120237350464,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "What are different nationalities of people and the corresponding number of people from each nation?",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "generated_sql": "SELECT T2.Nationality, COUNT(*) as Number_of_People\nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nWHERE T1.Earnings > 100000 AND T2.Height > 180\nGROUP BY T2.Nationality\nORDER BY T2.Nationality ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.940629005432129,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "How many people are there of each nationality?",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "generated_sql": "SELECT T2.Nationality, COUNT(*) as count\nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nGROUP BY T2.Nationality",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.24164724349975586,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What is the most common nationality of people?",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Nationality \nFROM people \nWHERE People_ID IN (\n  SELECT People_ID \n  FROM poker_player \n  GROUP BY People_ID \n  ORDER BY COUNT(People_ID) DESC \n  LIMIT 1\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26961374282836914,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Give the nationality that is most common across all people.",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Nationality \nFROM people \nWHERE People_ID IN (\n  SELECT People_ID \n  FROM poker_player \n  GROUP BY People_ID \n  ORDER BY COUNT(People_ID) DESC \n  LIMIT 1\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30597591400146484,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What are the nationalities that are shared by at least two people?",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Nationality\nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nGROUP BY T2.Nationality\nHAVING COUNT(T2.People_ID)  >  1",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.485607385635376,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Return the nationalities for which there are two or more people.",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Nationality\nFROM poker_player AS T1\nJOIN people AS T2 ON T1.People_ID = T2.People_ID\nGROUP BY T2.Nationality\nHAVING COUNT(T2.People_ID) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.497544527053833,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "List the names and birth dates of people in ascending alphabetical order of name.",
      "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
      "generated_sql": "SELECT p.Name, p.Birth_Date \nFROM people p \nGROUP BY p.Name  -- Add a GROUP BY clause\nORDER BY p.Name ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.0884108543396,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "poker_player",
      "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
      "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
      "generated_sql": "SELECT Name, Birth_Date \nFROM people \nORDER BY Name ASC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27439022064208984,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Show names of people whose nationality is not \"Russia\".",
      "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "generated_sql": "SELECT p.Name \nFROM people p \nWHERE p.Nationality != 'Russia';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2901802062988281,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of people who are not from Russia?",
      "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T2.Nationality != 'Russia'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0273256301879883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "List the names of people that are not poker players.",
      "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "generated_sql": "SELECT p.Name \nFROM people p \nWHERE p.People_ID NOT IN (SELECT pp.People_ID FROM poker_player pp);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5048491954803467,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of people who do not play poker?",
      "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "generated_sql": "SELECT p.Name \nFROM people p \nWHERE p.People_ID NOT IN (SELECT pp.People_ID \n                          FROM poker_player pp);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30635666847229004,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "How many distinct nationalities are there?",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Nationality) \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3695518970489502,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "poker_player",
      "question": "Count the number of different nationalities.",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Nationality) \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5505168437957764,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "How many states are there?",
      "gold_sql": "SELECT count(*) FROM area_code_state",
      "generated_sql": "SELECT COUNT(*) \nFROM AREA_CODE_STATE;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.20321989059448242,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "List the contestant numbers and names, ordered by contestant name descending.",
      "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
      "generated_sql": "SELECT contestant_number, contestant_name \nFROM CONTESTANTS \nORDER BY contestant_name DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28394222259521484,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "List the vote ids, phone numbers and states of all votes.",
      "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
      "generated_sql": "SELECT vote_id, phone_number, state \nFROM VOTES",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6516304016113281,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What are the maximum and minimum values of area codes?",
      "gold_sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
      "generated_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code\nFROM AREA_CODE_STATE;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24951767921447754,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What is last date created of votes from the state 'CA'?",
      "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
      "generated_sql": "SELECT MAX(T2.created) \nFROM AREA_CODE_STATE AS T1 \nJOIN VOTES AS T2 ON T1.state = T2.state \nWHERE T1.state = 'CA';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41211843490600586,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
      "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
      "generated_sql": "SELECT contestant_name \nFROM CONTESTANTS \nWHERE contestant_name != 'Jessie Alloway';",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.716411828994751,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What are the distinct states and create time of all votes?",
      "gold_sql": "SELECT DISTINCT state ,  created FROM votes",
      "generated_sql": "SELECT DISTINCT T1.state, T2.created \nFROM AREA_CODE_STATE AS T1 \nINNER JOIN VOTES AS T2 ON T1.state = T2.state",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6452372074127197,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
      "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
      "generated_sql": "SELECT C.contestant_number, C.contestant_name\nFROM CONTESTANTS C\nJOIN VOTES V ON C.contestant_number = V.contestant_number\nGROUP BY C.contestant_number, C.contestant_name\nHAVING COUNT(V.vote_id) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7070755958557129,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
      "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT c.contestant_number, c.contestant_name\nFROM CONTESTANTS c\nJOIN VOTES v ON c.contestant_number = v.contestant_number\nGROUP BY c.contestant_number, c.contestant_name\nORDER BY COUNT(v.vote_id) ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39683079719543457,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What are the number of votes from state 'NY' or 'CA'?",
      "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
      "generated_sql": "SELECT COUNT(*) \nFROM VOTES \nWHERE state IN ('NY', 'CA');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.376950740814209,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "How many contestants did not get voted?",
      "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
      "generated_sql": "SELECT COUNT(*) \nFROM CONTESTANTS \nWHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2535281181335449,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What is the area code in which the most voters voted?",
      "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.state \nFROM AREA_CODE_STATE AS T1 \nJOIN VOTES AS T2 ON T1.state = T2.state \nGROUP BY T1.state \nORDER BY COUNT(T2.vote_id) DESC \nLIMIT 1",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30555176734924316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
      "gold_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
      "generated_sql": "SELECT V.created, V.state, V.phone_number\nFROM VOTES V\nJOIN CONTESTANTS C ON V.contestant_number = C.contestant_number\nWHERE C.contestant_name = 'Tabatha Gehling';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3764004707336426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
      "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "voter_1",
      "question": "Return the names of the contestants whose names contain the substring 'Al' .",
      "gold_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
      "generated_sql": "SELECT contestant_name \nFROM CONTESTANTS \nWHERE contestant_name LIKE '%Al%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23459672927856445,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the names of all the countries that became independent after 1950?",
      "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
      "generated_sql": "SELECT c.Name\nFROM country c\nWHERE c.IndepYear > 1950;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3064556121826172,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the names of the nations that were founded after 1950.",
      "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
      "generated_sql": "SELECT Name\nFROM country\nWHERE IndepYear > 1950;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3880448341369629,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many countries have a republic as their form of government?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(Code) \nFROM country \nWHERE GovernmentForm = 'Republic';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7180113792419434,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many countries have governments that are republics?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(Code) \nFROM country \nWHERE GovernmentForm = 'Republic';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.320117712020874,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total surface area of the countries in the Caribbean region?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
      "generated_sql": "SELECT SUM(c.SurfaceArea) \nFROM country c \nWHERE c.Region = 'Caribbean' AND c.Continent = 'North America' ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.215251922607422,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "How much surface area do the countires in the Carribean cover together?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
      "generated_sql": "SELECT SUM(c.SurfaceArea) \nFROM country c \nWHERE c.Continent = 'Caribbean';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5994045734405518,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which continent is Anguilla in?",
      "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
      "generated_sql": "SELECT c.Continent\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nWHERE ci.Name = 'Anguilla';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43514442443847656,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the continent name which Anguilla belongs to?",
      "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
      "generated_sql": "SELECT c.Continent\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nWHERE ci.Name = 'Anguilla';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.26404380798339844,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which region is the city Kabul located in?",
      "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
      "generated_sql": "SELECT c.Region\nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nWHERE c.Name = 'Kabul';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.511383295059204,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What region is Kabul in?",
      "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
      "generated_sql": "SELECT c.Region\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nWHERE ci.Name = 'Kabul';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23090767860412598,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which language is the most popular in Aruba?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Name = 'Aruba'\nORDER BY cl.Percentage DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.41164064407348633,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What language is predominantly spoken in Aruba?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Name = 'Aruba' AND cl.Percentage = (\n  SELECT MAX(Percentage)\n  FROM countrylanguage\n  WHERE CountryCode = 'ABW'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3145773410797119,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the population and life expectancies in Brazil?",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "generated_sql": "SELECT c.Population, c.LifeExpectancy\nFROM country c\nWHERE c.Name = 'Brazil';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23456025123596191,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give me Brazil\u2019s population and life expectancies.",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "generated_sql": "SELECT c.Name, c.LifeExpectancy\nFROM country c\nWHERE c.Name = 'Brazil';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.22958827018737793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the region and population of Angola?",
      "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
      "generated_sql": "SELECT c.Region, c.Population\nFROM country c\nWHERE c.Code = 'AGO';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.21123576164245605,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What region does Angola belong to and what is its population?",
      "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
      "generated_sql": "SELECT c.Region, c.Population\nFROM country c\nWHERE c.Name = 'Angola'",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.5157277584075928,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
      "generated_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5086557865142822,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How long is the people\u2019s average life expectancy in Central Africa?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
      "generated_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Central Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40265488624572754,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the name of country that has the shortest life expectancy in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
      "generated_sql": "SELECT c.Name \nFROM country c \nWHERE c.Continent = 'Asia' \nAND c.LifeExpectancy = (SELECT MIN(LifeExpectancy) \n                        FROM country \n                        WHERE Continent = 'Asia');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3959064483642578,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the name of the country in Asia with the lowest life expectancy.",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
      "generated_sql": "SELECT c.Name\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.LifeExpectancy ASC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23265767097473145,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total population and maximum GNP in Asia?",
      "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
      "generated_sql": "SELECT \n  SUM(c.Population) AS TotalPopulation,\n  MAX(c.GNP) AS MaxGNP\nFROM \n  country c\nWHERE \n  c.Continent = 'Asia';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2709643840789795,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Asia, and what is the largest GNP among them?",
      "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
      "generated_sql": "SELECT \n  c.Continent, \n  MAX(c.GNP) AS max_gnp\nFROM \n  country c\nWHERE \n  c.Continent = 'Asia'\nGROUP BY \n  c.Continent;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.24210405349731445,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the average life expectancy in African countries that are republics?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT AVG(c.LifeExpectancy)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Continent = 'Africa' AND c.GovernmentForm = 'Republic';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3628225326538086,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the average life expectancy for countries in Africa which are republics?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT AVG(c.LifeExpectancy)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Continent = 'Africa' AND c.GovernmentForm = 'Republic';",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.1927127838134766,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What is the total surface area of the continents Asia and Europe?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "generated_sql": "SELECT \n  SUM(CASE WHEN Continent = 'Asia' THEN SurfaceArea ELSE 0 END) AS AsiaSurfaceArea,\n  SUM(CASE WHEN Continent = 'Europe' THEN SurfaceArea ELSE 0 END) AS EuropeSurfaceArea,\n  SUM(CASE WHEN Continent = 'Asia' THEN SurfaceArea ELSE 0 END) + \n  SUM(CASE WHEN Continent = 'Europe' THEN SurfaceArea ELSE 0 END) AS TotalSurfaceArea\nFROM \n  country\nWHERE \n  Continent IN ('Asia', 'Europe')\nGROUP BY \n  Continent",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.282151222229004,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Give the total surface area covered by countries in Asia or Europe.",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "generated_sql": "SELECT Continent, SUM(SurfaceArea) AS TotalSurfaceArea\nFROM country\nWHERE Continent IN ('Asia', 'Europe')\nGROUP BY Continent\nORDER BY TotalSurfaceArea DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.4031596183776855,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Gelderland district?",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "generated_sql": "SELECT COUNT(Population) \nFROM city \nWHERE District = 'Gelderland';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.25439906120300293,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total population of Gelderland district?",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "generated_sql": "SELECT SUM(Population) \nFROM city \nWHERE District = 'Gelderland';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.45191073417663574,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the average GNP and total population in all nations whose government is US territory?",
      "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
      "generated_sql": "SELECT AVG(T1.GNP), SUM(T1.Population)\nFROM country AS T1\nJOIN city AS T2 ON T1.Code = T2.CountryCode\nWHERE T1.GovernmentForm = 'US Territory' AND T1.Population > 1000000",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.8113245964050293,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Give the mean GNP and total population of nations which are considered US territory.",
      "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
      "generated_sql": "SELECT AVG(T2.GNP), SUM(T2.Population)\nFROM country AS T1\nJOIN country AS T2 ON T1.Code = T2.Code\nWHERE T1.GovernmentForm = 'Nonmetropolitan Territory of The Netherlands';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3162577152252197,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many unique languages are spoken in the world?",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "generated_sql": "SELECT COUNT(DISTINCT Language) \nFROM countrylanguage;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24602341651916504,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct languages used around the world?",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "generated_sql": "SELECT COUNT(DISTINCT Language) \nFROM countrylanguage;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.4514949321746826,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many type of governments are in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4110229015350342,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many different forms of governments are there in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5319981575012207,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of languages used in Aruba?",
      "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
      "generated_sql": "SELECT COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4310133457183838,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many languages are spoken in Aruba?",
      "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
      "generated_sql": "SELECT COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23066043853759766,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many official languages does Afghanistan have?",
      "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(T2.Language) \nFROM countrylanguage AS T1 \nINNER JOIN country AS T2 \nON T1.CountryCode = T2.Code \nWHERE T2.Name = 'Afghanistan' AND T1.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.85566782951355,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many official languages are spoken in Afghanistan?",
      "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE CountryCode = 'AFG' AND IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3701448440551758,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is name of the country that speaks the largest number of languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Name \nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nGROUP BY c.Code \nORDER BY COUNT(cl.Language) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4415252208709717,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the name of the nation that uses the greatest amount of languages.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, COUNT(cl.Language) as TotalLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Continent = 'Asia'  -- Filter by continent\nGROUP BY c.Name\nORDER BY TotalLanguages DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.776768922805786,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Which continent has the most diverse languages?",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Continent, COUNT(cl.Language) as TotalLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY TotalLanguages DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4089322090148926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which continent speaks the most languages?",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Continent, COUNT(cl.Language) as TotalLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Continent IS NOT NULL  -- added WHERE condition\nGROUP BY c.Continent\nORDER BY TotalLanguages DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.855077505111694,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "How many countries speak both English and Dutch?",
      "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "What is the number of nations that use English and Dutch?",
      "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "What are the names of nations speak both English and French?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of nations that speak both English and French.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "What are the names of nations where both English and French are official languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries with English and French as official languages.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct continents where Chinese is spoken?",
      "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Continent)\nFROM countrylanguage AS T1\nJOIN country AS T2 ON T1.CountryCode = T2.Code\nWHERE T1.Language = 'Chinese';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2905998229980469,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many continents speak Chinese?",
      "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.32148194313049316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the regions that use English or Dutch?",
      "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
      "generated_sql": "SELECT DISTINCT c.Region\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('English', 'Dutch');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.254256010055542,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which regions speak Dutch or English?",
      "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
      "generated_sql": "SELECT c.Region\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('Dutch', 'English');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34068775177001953,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the countries where either English or Dutch is the official language ?",
      "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
      "generated_sql": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('English', 'Dutch')\nGROUP BY c.Name\nHAVING COUNT(DISTINCT cl.Language) = 2",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.7939770221710205,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Which countries have either English or Dutch as an official language?",
      "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.29550838470458984,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which language is the most popular on the Asian continent?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Language, SUM(cl.Percentage) AS TotalPercentage\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Continent = 'Asia'\nGROUP BY c.Language\nORDER BY TotalPercentage DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.652621507644653,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the language that is used by the largest number of Asian nations?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language\nFROM countrylanguage AS T1\nJOIN country AS T2 ON T1.CountryCode = T2.Code\nWHERE T2.Continent = 'Asia'\nGROUP BY T2.Language\nORDER BY COUNT(T2.Code) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.614781618118286,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which languages are spoken by only one country in republic governments?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
      "generated_sql": "SELECT DISTINCT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.GovernmentForm = 'Republic' AND cl.Percentage = 100;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.755127906799316,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What languages are only used by a single country with a republic government?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
      "generated_sql": "SELECT DISTINCT cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.GovernmentForm = 'Republic' AND cl.Percentage = 100;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.43531346321106,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Find the city with the largest population that uses English.",
      "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, c.Population\nFROM city c\nJOIN countrylanguage cl ON c.CountryCode = cl.CountryCode\nWHERE cl.Language = 'English' AND cl.IsOfficial = 'T'\nORDER BY c.Population DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4550938606262207,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the most populace city that speaks English?",
      "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, c.Population\nFROM city c\nJOIN countrylanguage cl ON c.CountryCode = cl.CountryCode\nWHERE cl.Language = 'English' AND c.Population = (\n  SELECT MAX(Population)\n  FROM city\n  JOIN countrylanguage cl ON city.CountryCode = cl.CountryCode\n  WHERE cl.Language = 'English'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.824279069900513,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Find the name, population and expected life length of asian country with the largest area?",
      "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, c.Population, c.LifeExpectancy\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.SurfaceArea DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2720797061920166,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
      "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, c.Population, c.LifeExpectancy\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.SurfaceArea DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5531816482543945,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is average life expectancy in the countries where English is not the official language?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
      "generated_sql": "SELECT AVG(c.LifeExpectancy)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language != 'English' AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5081923007965088,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the mean life expectancy of countries in which English is not the official language.",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
      "generated_sql": "SELECT AVG(c.LifeExpectancy) \nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language != 'English' AND cl.IsOfficial = 'F';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3776121139526367,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of people living in the nations that do not use English?",
      "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
      "generated_sql": "SELECT COUNT(c.Code) \nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language != 'English' AND cl.IsOfficial = 'T' \nGROUP BY c.Continent \nORDER BY COUNT(c.Code) DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.9894490242004395,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "How many people live in countries that do not speak English?",
      "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
      "generated_sql": "SELECT COUNT(c.ID)\nFROM city c\nJOIN countrylanguage cl ON c.CountryCode = cl.CountryCode\nWHERE cl.Language != 'English';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30007314682006836,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the official language spoken in the country whose head of state is Beatrix?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T1.Language\nFROM countrylanguage AS T1\nJOIN country AS T2 ON T1.CountryCode = T2.Code\nWHERE T2.HeadOfState = 'Beatrix';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30495381355285645,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T1.Language\nFROM countrylanguage AS T1\nJOIN country AS T2 ON T1.CountryCode = T2.Code\nWHERE T2.HeadOfState = 'Beatrix';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3803374767303467,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
      "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(DISTINCT cl.Language)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30611228942871094,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
      "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(DISTINCT cl.Language)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.765809535980225,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the countries that have greater surface area than any country in Europe?",
      "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
      "generated_sql": "SELECT Name \nFROM country \nWHERE SurfaceArea > (SELECT MAX(SurfaceArea) \n                     FROM country \n                     WHERE Continent = 'Europe')",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3659834861755371,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which countries have greater area than that of any country in Europe?",
      "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
      "generated_sql": "SELECT c.Name \nFROM country c \nWHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) \n                       FROM country c2 \n                       WHERE c2.Continent = 'Europe');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8159480094909668,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the African countries that have a  population less than any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nWHERE c.Continent = 'Africa'\nAND c.Population < (\n  SELECT MIN(Population)\n  FROM country\n  JOIN city ci ON country.Code = ci.CountryCode\n  WHERE country.Continent = 'Asia'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.829282522201538,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which African countries have a smaller population than that of any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN country c2 ON c2.Continent = 'Asia'\nWHERE c.Continent = 'Africa'\nAND c.Population < (SELECT MIN(Population) FROM country c2 WHERE c2.Continent = 'Asia');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34584808349609375,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which Asian countries have a population that is larger than any country in Africa?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
      "generated_sql": "SELECT c1.Name\nFROM country c1\nJOIN country c2 ON c1.Population < c2.Population\nWHERE c1.Continent = 'Asia' AND c2.Continent = 'Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.064784049987793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN country a ON c.Population > a.Population\nWHERE c.Continent = 'Asia' AND a.Continent = 'Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5021800994873047,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes for countries that do not speak English?",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "Return the country codes for countries that do not speak English.",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes of countries where people use languages other than English?",
      "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
      "generated_sql": "SELECT DISTINCT T1.Code\nFROM country AS T1\nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode\nWHERE T2.Language != 'English'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4089701175689697,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the country codes for countries in which people speak langauges that are not English.",
      "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
      "generated_sql": "SELECT DISTINCT c.Code\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language != 'English';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6355443000793457,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
      "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
      "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "Which cities are in European countries where English is not the official language?",
      "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
      "generated_sql": "SELECT c.Name, co.Continent\nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nJOIN countrylanguage cl ON co.Code = cl.CountryCode\nWHERE co.Continent = 'Europe' AND cl.Language != 'English' AND cl.IsOfficial = 'T'\nORDER BY c.Name LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.575277090072632,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What are the names of cities in Europe for which English is not the official language?",
      "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
      "generated_sql": "SELECT C.Name \nFROM city C \nJOIN countrylanguage CL ON C.CountryCode = CL.CountryCode \nJOIN country CO ON C.CountryCode = CO.Code \nWHERE CO.Continent = 'Europe' AND CL.IsOfficial = 'F';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6736912727355957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
      "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
      "generated_sql": "SELECT DISTINCT c.Name\nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nJOIN countrylanguage cl ON co.Code = cl.CountryCode\nWHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2975349426269531,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
      "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
      "generated_sql": "SELECT DISTINCT c.Name, co.Continent\nFROM city c\nJOIN country co ON c.CountryCode = co.Code\nJOIN countrylanguage cl ON co.Code = cl.CountryCode\nWHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'\nGROUP BY c.Name, co.Continent",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 8.706096410751343,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What are the name, independence year, and surface area of the country with the smallest population?",
      "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
      "generated_sql": "SELECT c.Name, c.IndepYear, c.SurfaceArea\nFROM country c\nWHERE (c.Population, c.Name) = (\n  SELECT c2.Population, c2.Name\n  FROM country c2\n  ORDER BY c2.Population ASC\n  LIMIT 1\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5061421394348145,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
      "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
      "generated_sql": "SELECT c.Name, c.IndepYear, c.SurfaceArea\nFROM country c\nWHERE c.Code = (\n  SELECT CountryCode\n  FROM city\n  GROUP BY CountryCode\n  ORDER BY MIN(Population) ASC\n  LIMIT 1\n)\nORDER BY c.Population ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 11.381216049194336,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What are the population, name and leader of the country with the largest area?",
      "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT c.SurfaceArea, c.Name, c.HeadOfState\nFROM country c\nWHERE c.Continent = 'Asia'  -- filter countries in Asia\nORDER BY c.SurfaceArea DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.720331430435181,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Give the name, population, and head of state for the country that has the largest area.",
      "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, c.SurfaceArea, c.HeadOfState\nFROM country c\nORDER BY c.SurfaceArea DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2526206970214844,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
      "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
      "generated_sql": "SELECT c.Name, COUNT(cl.Language) as NumberOfLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) >= 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.28995561599731445,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
      "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
      "generated_sql": "SELECT \n  c.Name, \n  COUNT(cl.Language) AS NumberOfLanguages\nFROM \n  country c\nJOIN \n  countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY \n  c.Name\nHAVING \n  COUNT(cl.Language) > 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5179576873779297,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
      "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
      "generated_sql": "SELECT \n  c.District, \n  COUNT(c.ID) AS num_cities\nFROM \n  city c\nGROUP BY \n  c.District\nHAVING \n  AVG(c.Population) < (SELECT AVG(Population) FROM city);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.202321529388428,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many cities in each district have a population that is above the average population across all cities?",
      "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
      "generated_sql": "SELECT \n  c.District, \n  COUNT(c.ID) AS num_cities\nFROM \n  city c\nWHERE \n  c.Population > (SELECT AVG(Population) FROM city)\nGROUP BY \n  c.District;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36801886558532715,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
      "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
      "generated_sql": "SELECT \n  c.GovernmentForm, \n  SUM(c.Population) AS TotalPopulation\nFROM \n  country c\nWHERE \n  c.LifeExpectancy > 72\nGROUP BY \n  c.GovernmentForm",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43907785415649414,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
      "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
      "generated_sql": "SELECT \n  c.GovernmentForm,\n  SUM(c.Population) AS TotalPopulation\nFROM \n  country c\nWHERE \n  c.LifeExpectancy > 72\nGROUP BY \n  c.GovernmentForm",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33939385414123535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
      "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
      "generated_sql": "SELECT \n  c.Continent,\n  AVG(c.LifeExpectancy) AS AverageLifeExpectancy,\n  SUM(c.Population) AS TotalPopulation\nFROM \n  country c\nWHERE \n  c.LifeExpectancy < 72 AND c.Population > 1000000\nGROUP BY \n  c.Continent\nORDER BY \n  AverageLifeExpectancy DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 8.770766258239746,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
      "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
      "generated_sql": "SELECT \n  c.Continent,\n  SUM(c.Population) AS TotalPopulation,\n  AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM \n  country c\nWHERE \n  c.LifeExpectancy < 72\nGROUP BY \n  c.Continent",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7148754596710205,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the names and areas of countries with the top 5 largest area?",
      "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "generated_sql": "SELECT c.Name, c.SurfaceArea\nFROM country c\nORDER BY c.SurfaceArea DESC\nLIMIT 5;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28855276107788086,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Return the names and surface areas of the 5 largest countries.",
      "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "generated_sql": "SELECT c.Name, c.SurfaceArea\nFROM country c\nORDER BY c.SurfaceArea DESC\nLIMIT 5;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5267670154571533,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are names of countries with the top 3 largest population?",
      "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nORDER BY ci.Population DESC\nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6140036582946777,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Return the names of the 3 most populated countries.",
      "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nGROUP BY c.Name\nORDER BY SUM(ci.Population) DESC\nLIMIT 3",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.034863233566284,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the nations with the 3 lowest populations?",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "generated_sql": "SELECT c.Name \nFROM country c \nJOIN city ci ON c.Code = ci.CountryCode \nORDER BY c.Population ASC \nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3350656032562256,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Return the names of the 3 countries with the fewest people.",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN city ci ON c.Code = ci.CountryCode\nORDER BY c.Population ASC\nLIMIT 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.24965167045593262,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "how many countries are in Asia?",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "generated_sql": "SELECT COUNT(Code)\nFROM country\nWHERE Continent = 'Asia';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2567484378814697,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries in Asia.",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "generated_sql": "SELECT COUNT(Code) \nFROM country \nWHERE Continent = 'Asia';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.20352435111999512,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
      "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
      "generated_sql": "SELECT c.Name \nFROM country c \nJOIN city ci ON c.Code = ci.CountryCode \nWHERE c.Continent = 'Europe' AND ci.Population = 80000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30535244941711426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
      "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
      "generated_sql": "SELECT c.Name \nFROM country c \nJOIN city ci ON c.Code = ci.CountryCode \nWHERE c.Continent = 'Europe' AND ci.Population = 80000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2377791404724121,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
      "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
      "generated_sql": "SELECT \n    SUM(c.Population) AS TotalPopulation,\n    AVG(c.SurfaceArea) AS AverageArea\nFROM \n    country c\nWHERE \n    c.Continent = 'North America' AND c.SurfaceArea > 3000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.410628080368042,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
      "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
      "generated_sql": "SELECT \n  SUM(c.Population) AS TotalPopulation,\n  AVG(c.SurfaceArea) AS AverageSurfaceArea\nFROM \n  country c\nWHERE \n  c.Continent = 'North America' AND c.SurfaceArea > 3000;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5448398590087891,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the cities whose population is between 160000 and 900000?",
      "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
      "generated_sql": "SELECT Name\nFROM city\nWHERE Population BETWEEN 160000 AND 900000;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6352052688598633,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Return the names of cities that have a population between 160000 and 900000 .",
      "gold_sql": "select name from city where population between 160000 and 900000",
      "generated_sql": "SELECT Name\nFROM city\nWHERE Population BETWEEN 160000 AND 900000;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2480030059814453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which language is spoken by the largest number of countries?",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Name, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.IsOfficial = 'T'\nGROUP BY cl.Language\nORDER BY COUNT(cl.Language) DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.775190353393555,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Give the language that is spoken in the most countries.",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Name \nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE c.Population > 100000000 \nGROUP BY c.Name \nORDER BY COUNT(cl.Language) DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.7357752323150635,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "What is the language spoken by the largest percentage of people in each country?",
      "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
      "generated_sql": "SELECT c.Name, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nJOIN (\n  SELECT CountryCode, MAX(Percentage) as max_percentage\n  FROM countrylanguage\n  GROUP BY CountryCode\n) sub ON cl.CountryCode = sub.CountryCode AND cl.Percentage = sub.max_percentage",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5310697555541992,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
      "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
      "generated_sql": "SELECT \n  c.Code, \n  cl.Language, \n  cl.Percentage\nFROM \n  country c\nJOIN \n  countrylanguage cl ON c.Code = cl.CountryCode\nORDER BY \n  cl.Percentage DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.37184834480285645,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT c.Name, cl.Percentage\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'\nGROUP BY c.Name\nHAVING MAX(cl.Percentage) = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T')\nORDER BY c.Name",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.670388460159302,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT COUNT(DISTINCT cl.CountryCode)\nFROM countrylanguage cl\nWHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.344271183013916,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT c.Code\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'\nGROUP BY c.Code\nORDER BY SUM(cl.Percentage) DESC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.43663215637207,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT c.Code\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9021785259246826,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "How many conductors are there?",
      "gold_sql": "SELECT count(*) FROM conductor",
      "generated_sql": "SELECT COUNT(*) FROM conductor",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34581661224365234,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of conductors.",
      "gold_sql": "SELECT count(*) FROM conductor",
      "generated_sql": "SELECT COUNT(*) FROM conductor",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31029224395751953,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "List the names of conductors in ascending order of age.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "generated_sql": "SELECT Name \nFROM conductor \nORDER BY Age ASC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.49709200859069824,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors, ordered by age?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "generated_sql": "SELECT c.Name\nFROM conductor c\nORDER BY c.Age;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23476648330688477,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors whose nationalities are not \"USA\"?",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "generated_sql": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29605865478515625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Return the names of conductors that do not have the nationality \"USA\".",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "generated_sql": "SELECT Name \nFROM conductor \nWHERE Nationality != 'USA';",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22745561599731445,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "generated_sql": "SELECT T2.Record_Company\nFROM orchestra AS T1\nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID\nORDER BY T1.Year_of_Founded DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 7.431172847747803,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "generated_sql": "SELECT Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28093886375427246,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What is the average attendance of shows?",
      "gold_sql": "SELECT avg(Attendance) FROM SHOW",
      "generated_sql": "SELECT AVG(Attendance) FROM show",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.1988816261291504,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Return the average attendance across all shows.",
      "gold_sql": "SELECT avg(Attendance) FROM SHOW",
      "generated_sql": "SELECT AVG(T1.Attendance) \nFROM show AS T1",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23427319526672363,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
      "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "generated_sql": "SELECT MAX(CAST(REPLACE(SUBSTR(Share, INSTR(Share, '%') - 1) AS REAL) * 100) AS REAL) AS max_share,\n       MIN(CAST(REPLACE(SUBSTR(Share, INSTR(Share, '%') - 1) AS REAL) * 100) AS REAL) AS min_share\nFROM performance\nWHERE Type != 'Live final';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 4.323969125747681,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
      "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "generated_sql": "SELECT \n    MAX(CAST(REPLACE(SUBSTR(Share, INSTR(Share, '%') - 1, 3) AS REAL)) * 100) AS max_share,\n    MIN(CAST(REPLACE(SUBSTR(Share, INSTR(Share, '%') - 1, 3) AS REAL)) * 100) AS min_share\nFROM \n    performance\nWHERE \n    Type != 'Live final';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 5.878278732299805,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "How many different nationalities do conductors have?",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
      "generated_sql": "SELECT COUNT(DISTINCT Nationality) \nFROM conductor;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22437262535095215,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of different nationalities of conductors.",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
      "generated_sql": "SELECT COUNT(DISTINCT Nationality) \nFROM conductor;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.456632375717163,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "List names of conductors in descending order of years of work.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "generated_sql": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2902228832244873,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "generated_sql": "SELECT c.Name\nFROM conductor c\nORDER BY c.Year_of_Work DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40956902503967285,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "List the name of the conductor with the most years of work.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "generated_sql": "SELECT c.Name\nFROM conductor c\nORDER BY c.Year_of_Work DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7139346599578857,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has worked the greatest number of years?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "generated_sql": "SELECT c.Name\nFROM conductor c\nORDER BY c.Year_of_Work DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3074188232421875,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Show the names of conductors and the orchestras they have conducted.",
      "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "generated_sql": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3207824230194092,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
      "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "generated_sql": "SELECT C.Name, O.Orchestra\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3358914852142334,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Show the names of conductors that have conducted more than one orchestras.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT C.Name\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID\nGROUP BY C.Name\nHAVING COUNT(DISTINCT O.Orchestra_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4873077869415283,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors who have conducted at more than one orchestra?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT DISTINCT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.035872936248779,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Show the name of the conductor that has conducted the most number of orchestras.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Name\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2809159755706787,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has conducted the most orchestras?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT C.Name\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID\nWHERE C.Age > 50\nGROUP BY C.Name\nORDER BY COUNT(O.Orchestra_ID) DESC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 9.402348756790161,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "orchestra",
      "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
      "generated_sql": "SELECT C.Name\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID\nWHERE O.Year_of_Founded > 2008;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5090928077697754,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
      "generated_sql": "SELECT C.Name\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID\nWHERE O.Year_of_Founded > 2008;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31255578994750977,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Please show the different record companies and the corresponding number of orchestras.",
      "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
      "generated_sql": "SELECT \n    o.Record_Company,\n    COUNT(*) as Number_of_Orchestras\nFROM \n    orchestra o\nGROUP BY \n    o.Record_Company\nORDER BY \n    Number_of_Orchestras DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3140287399291992,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "How many orchestras does each record company manage?",
      "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
      "generated_sql": "SELECT \n    O.Record_Company,\n    COUNT(*) AS Number_Of_Orchestras\nFROM \n    orchestra O\nGROUP BY \n    O.Record_Company;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4036130905151367,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Please show the record formats of orchestras in ascending order of count.",
      "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "generated_sql": "SELECT T1.Orchestra, T1.Major_Record_Format, COUNT(T2.Show_ID) AS Count\nFROM orchestra AS T1\nJOIN show AS T2 ON T1.Orchestra_ID = T2.Performance_ID\nGROUP BY T1.Orchestra, T1.Major_Record_Format\nORDER BY COUNT(T2.Show_ID) ASC LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 8.637131929397583,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "orchestra",
      "question": "What are the major record formats of orchestras, sorted by their frequency?",
      "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "generated_sql": "SELECT Major_Record_Format, COUNT(*) as Frequency\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Frequency DESC;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36020326614379883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "List the record company shared by the most number of orchestras.",
      "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31366658210754395,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What is the record company used by the greatest number of orchestras?",
      "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24894046783447266,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "List the names of orchestras that have no performance.",
      "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "generated_sql": "SELECT DISTINCT T1.Orchestra \nFROM orchestra AS T1 \nLEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nWHERE T2.Orchestra_ID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.868443489074707,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are the orchestras that do not have any performances?",
      "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "generated_sql": "SELECT DISTINCT o.Orchestra \nFROM orchestra o \nLEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID \nWHERE p.Orchestra_ID IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.096254587173462,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
      "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "orchestra",
      "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
      "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "orchestra",
      "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD') \nGROUP BY Major_Record_Format \nORDER BY COUNT(*) DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.223330736160278,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of orchestras that have CD or DVD as their record format.",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3050715923309326,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Show the years in which orchestras that have given more than one performance are founded.",
      "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Year_of_Founded\nHAVING COUNT(DISTINCT p.Performance_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.49940967559814453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "What are years of founding for orchestras that have had more than a single performance?",
      "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Orchestra_ID \nHAVING COUNT(T2.Performance_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0904169082641602,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are there?",
      "gold_sql": "SELECT count(*) FROM Highschooler",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5871384143829346,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Count the number of high schoolers.",
      "gold_sql": "SELECT count(*) FROM Highschooler",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade = 9;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5132603645324707,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names and grades of each high schooler.",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT name, grade \nFROM Highschooler",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26180005073547363,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names and grades for each high schooler?",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT H1.name, H1.grade \nFROM Highschooler H1 \nJOIN Highschooler H2 ON H1.ID = H2.student_id OR H1.ID = H2.friend_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 3.2431204319000244,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show all the grades of the high schoolers.",
      "gold_sql": "SELECT grade FROM Highschooler",
      "generated_sql": "SELECT grade \nFROM Highschooler;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5745420455932617,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What is the grade of each high schooler?",
      "gold_sql": "SELECT grade FROM Highschooler",
      "generated_sql": "SELECT H1.grade \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nOR H1.ID = F.friend_id\nGROUP BY H1.grade\nORDER BY H1.grade",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.4250035285949707,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "network_1",
      "question": "What grade is Kyle in?",
      "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT grade \nFROM Highschooler \nWHERE name = 'Kyle';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3381309509277344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Return the grade for the high schooler named Kyle.",
      "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT T1.grade \nFROM Highschooler AS T1 \nWHERE T1.name = 'Kyle';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5117275714874268,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names of all high schoolers in grade 10.",
      "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
      "generated_sql": "SELECT name \nFROM Highschooler \nWHERE grade = 10;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.21169066429138184,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names of all high schoolers in grade 10?",
      "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
      "generated_sql": "SELECT name \nFROM Highschooler \nWHERE grade = 10;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29642319679260254,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the ID of the high schooler named Kyle.",
      "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT ID \nFROM Highschooler \nWHERE name = 'Kyle';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26648569107055664,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What is Kyle's id?",
      "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT ID \nFROM Highschooler \nWHERE name = 'Kyle';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.335796594619751,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are there in grade 9 or 10?",
      "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade IN (9, 10);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2829301357269287,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Count the number of high schoolers in grades 9 or 10.",
      "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade IN (9, 10);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2938685417175293,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the number of high schoolers for each grade.",
      "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
      "generated_sql": "SELECT grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.21977448463439941,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are in each grade?",
      "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
      "generated_sql": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5297393798828125,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Which grade has the most high schoolers?",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.25549864768981934,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Return the grade that has the greatest number of high schoolers.",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.grade \nFROM Highschooler AS T1 \nJOIN (SELECT grade, COUNT(*) as count FROM Highschooler WHERE grade IN (9, 10, 11, 12) GROUP BY grade) AS T2 \nON T1.grade = T2.grade \nORDER BY T2.count DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.9015400409698486,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "network_1",
      "question": "Show me all grades that have at least 4 students.",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
      "generated_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(ID) >= 4;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2187190055847168,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Which grades have 4 or more high schoolers?",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
      "generated_sql": "SELECT grade \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Friend \n  GROUP BY student_id \n  HAVING COUNT(*) >= 4\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3090965747833252,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the student IDs and numbers of friends corresponding to each.",
      "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
      "generated_sql": "SELECT T1.ID, COUNT(T2.student_id) \nFROM Highschooler T1 \nJOIN Friend T2 ON T1.ID = T2.student_id \nGROUP BY T1.ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5549197196960449,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many friends does each student have?",
      "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
      "generated_sql": "SELECT H1.name, COUNT(F.student_id) AS num_friends\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nGROUP BY H1.name;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7028684616088867,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high school students and their corresponding number of friends.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT H1.name, COUNT(F.student_id) AS num_friends\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nGROUP BY H1.name;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.276425838470459,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names of the high schoolers and how many friends does each have?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT H1.name, COUNT(F.student_id) AS num_friends\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nGROUP BY H1.name;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.24839019775390625,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What is the name of the high schooler who has the greatest number of friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nGROUP BY H1.name \nHAVING COUNT(F.student_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Friend GROUP BY student_id))",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.602071046829224,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "network_1",
      "question": "Return the name of the high school student with the most friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id \nWHERE T1.grade = 9  -- Filter by grade\nGROUP BY T1.name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.640213251113892,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high schoolers who have at least 3 friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
      "generated_sql": "SELECT H1.name\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nGROUP BY H1.ID\nHAVING COUNT(DISTINCT F.friend_id) >= 3;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2575385570526123,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have 3 or more friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nGROUP BY H1.ID \nHAVING COUNT(DISTINCT F.friend_id) >= 3",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3433051109313965,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names of all of the high schooler Kyle's friends.",
      "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 \nON T1.student_id = T2.ID \nWHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39455413818359375,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Return the names of friends of the high school student Kyle.",
      "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.student_id = T2.ID \nWHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2585029602050781,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many friends does the high school student Kyle have?",
      "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2179553508758545,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Count the number of friends Kyle has.",
      "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24852442741394043,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show ids of all students who do not have any friends.",
      "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "What are the ids of high school students who do not have friends?",
      "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "Show names of all high school students who do not have any friends.",
      "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have no friends?",
      "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
      "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "What are the ids of students who both have friends and are liked?",
      "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "Show name of all students who have some friends and also are liked by someone else.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who both have friends and are liked?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "network_1",
      "question": "Count the number of likes for each student id.",
      "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
      "generated_sql": "SELECT T1.student_id, COUNT(*) as like_count\nFROM Likes AS T1\nGROUP BY T1.student_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4934511184692383,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many likes correspond to each student id?",
      "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
      "generated_sql": "SELECT H1.ID, COUNT(L.student_id) as likes\nFROM Highschooler H1\nLEFT JOIN Likes L ON H1.ID = L.student_id\nGROUP BY H1.ID",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.21849608421325684,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT H1.name, COUNT(L.student_id) AS likes_count\nFROM Highschooler H1\nJOIN Likes L ON H1.ID = L.student_id\nWHERE H1.grade = 9\nGROUP BY H1.name;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3048088550567627,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT H.name, COUNT(L.student_id) as likes_count\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nWHERE H.grade = 9\nGROUP BY H.name\nHAVING COUNT(L.student_id) > 0;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3878762722015381,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What is the name of the high schooler who has the greatest number of likes?",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Likes L1 ON H1.ID = L1.student_id \nGROUP BY H1.name \nORDER BY COUNT(L1.student_id) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2738184928894043,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Give the name of the student with the most likes.",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Likes L1 ON H1.ID = L1.student_id \nJOIN Likes L2 ON H1.ID = L2.liked_id \nGROUP BY H1.name \nORDER BY COUNT(L1.student_id) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2576885223388672,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names of students who have at least 2 likes.",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT name \nFROM Highschooler \nWHERE ID IN (\n  SELECT student_id \n  FROM Likes \n  GROUP BY student_id \n  HAVING COUNT(liked_id) >= 2\n) ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.746443033218384,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have 2 or more likes?",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Likes L1 ON H1.ID = L1.student_id \nGROUP BY H1.ID \nHAVING COUNT(L1.liked_id) >= 2 ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.367997646331787,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "network_1",
      "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nJOIN Highschooler H2 ON H2.ID = F.friend_id \nWHERE H1.grade > 5 AND H2.ID IN (\n  SELECT F.friend_id \n  FROM Friend F \n  GROUP BY F.friend_id \n  HAVING COUNT(F.student_id) > 1\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5063965320587158,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT H1.name \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id \nJOIN Highschooler H2 ON F.friend_id = H2.ID \nWHERE H1.grade > 5 AND H2.ID IN (SELECT friend_id FROM Friend WHERE student_id = H1.ID) GROUP BY H1.name HAVING COUNT(DISTINCT H2.ID) >= 2",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3074758052825928,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "How many likes does Kyle have?",
      "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3540611267089844,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Return the number of likes that the high schooler named Kyle has.",
      "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5789186954498291,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Find the average grade of all students who have some friends.",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT AVG(H.grade) \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.22405004501342773,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What is the average grade of students who have friends?",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT AVG(H.grade) \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.201554536819458,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Find the minimum grade of students who have no friends.",
      "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT MIN(H.grade) \nFROM Highschooler H \nLEFT JOIN Friend F ON H.ID = F.student_id \nWHERE F.student_id IS NULL",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22322297096252441,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What is the lowest grade of students who do not have any friends?",
      "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT MIN(T1.grade) \nFROM Highschooler T1 \nLEFT JOIN Friend T2 ON T1.ID = T2.student_id \nWHERE T2.student_id IS NULL LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.0259389877319336,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Which states have both owners and professionals living there?",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the states where both owners and professionals live.",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of the dogs who have gone through any treatments?",
      "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT AVG(T1.age) \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.16046142578125,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the average age of the dogs who went through treatments.",
      "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT AVG(CAST(SUBSTR(T1.age, 1, INSTR(T1.age, '-') - 1) AS REAL)) \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.2672064304351807,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
      "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
      "generated_sql": "SELECT p.professional_id, p.last_name, p.cell_number\nFROM Professionals p\nWHERE p.state = 'Indiana'\nOR EXISTS (\n  SELECT 1\n  FROM Treatments t\n  WHERE t.professional_id = p.professional_id\n  GROUP BY t.professional_id\n  HAVING COUNT(t.treatment_id) > 2\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7881898880004883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
      "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
      "generated_sql": "SELECT P.professional_id, P.last_name, P.cell_number\nFROM Professionals P\nLEFT JOIN (\n  SELECT T.professional_id, COUNT(T.treatment_id) as treatment_count\n  FROM Treatments T\n  GROUP BY T.professional_id\n) T ON P.professional_id = T.professional_id\nWHERE P.state = 'Indiana'\nOR T.treatment_count > 2\nORDER BY P.last_name LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 7.570010662078857,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
      "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
      "generated_sql": "SELECT T1.name \nFROM Dogs T1 \nJOIN Treatments T2 ON T1.dog_id = T2.dog_id \nWHERE T2.cost_of_treatment <= 1000",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3253664970397949,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
      "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
      "generated_sql": "SELECT D.name\nFROM Dogs D\nJOIN Owners O ON D.owner_id = O.owner_id\nJOIN (\n  SELECT dog_id\n  FROM Treatments\n  GROUP BY dog_id\n  HAVING SUM(cost_of_treatment) <= 1000\n) T ON D.dog_id = T.dog_id;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3047041893005371,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which first names are used for professionals or owners but are not used as dog names?",
      "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
      "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id\nORDER BY COUNT(d.owner_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26432180404663086,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27205681800842285,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
      "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name\nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id\nGROUP BY T1.professional_id, T1.role_code, T1.first_name\nHAVING COUNT(T2.treatment_id) >= 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3723320960998535,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
      "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name\nFROM Professionals T1\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(*) >= 2\n) T2 ON T1.professional_id = T2.professional_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4382033348083496,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the name of the breed with the most dogs?",
      "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code \nWHERE T1.breed_name NOT LIKE '%mix%' \nGROUP BY T1.breed_name \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.142958641052246,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Which breed do the most dogs have? Give me the breed name.",
      "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.breed_name\nFROM Breeds AS T1\nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code\nGROUP BY T1.breed_name\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37706971168518066,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
      "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.45740532875061035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT O.owner_id, O.last_name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Treatments T ON D.dog_id = T.dog_id\nWHERE (O.owner_id, T.cost_of_treatment) IN (\n  SELECT O.owner_id, SUM(T.cost_of_treatment) AS total_cost\n  FROM Owners O\n  JOIN Dogs D ON O.owner_id = D.owner_id\n  JOIN Treatments T ON D.dog_id = T.dog_id\n  GROUP BY O.owner_id\n  ORDER BY total_cost DESC\n  LIMIT 1\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40576910972595215,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the description of the treatment type that costs the least money in total?",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "generated_sql": "SELECT tt.treatment_type_description\nFROM Treatment_Types tt\nJOIN (\n  SELECT treatment_type_code, SUM(cost_of_treatment) as total_cost\n  FROM Treatments\n  GROUP BY treatment_type_code\n) t ON tt.treatment_type_code = t.treatment_type_code\nORDER BY t.total_cost\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39069294929504395,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Give me the description of the treatment type whose total cost is the lowest.",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "generated_sql": "SELECT tt.treatment_type_description\nFROM Treatment_Types tt\nJOIN (\n  SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost\n  FROM Treatments\n  GROUP BY treatment_type_code\n) t ON tt.treatment_type_code = t.treatment_type_code\nORDER BY t.total_cost ASC\nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 7.243642568588257,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN (\n  SELECT d.owner_id, SUM(t.cost_of_treatment) AS total_cost\n  FROM Dogs d\n  JOIN Treatments t ON d.dog_id = t.dog_id\n  GROUP BY d.owner_id\n) AS total_costs ON o.owner_id = total_costs.owner_id\nORDER BY total_costs.total_cost DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4292316436767578,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN (\n  SELECT d.owner_id, SUM(tt.cost_of_treatment) as total_spent\n  FROM Dogs d\n  JOIN Treatments tt ON d.dog_id = tt.dog_id\n  GROUP BY d.owner_id\n) t ON o.owner_id = t.owner_id\nORDER BY t.total_spent DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.45127415657043457,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id, T1.cell_number\nFROM Professionals T1\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(DISTINCT treatment_type_code) >= 2\n) T2\nON T1.professional_id = T2.professional_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3537492752075195,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT P.professional_id, P.cell_number\nFROM Professionals P\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(DISTINCT treatment_type_code) >= 2\n) T ON P.professional_id = T.professional_id;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4010035991668701,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "generated_sql": "SELECT T1.first_name, T1.last_name\nFROM Professionals T1\nJOIN Treatments T2 ON T1.professional_id = T2.professional_id\nWHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5916590690612793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "generated_sql": "SELECT P.first_name, P.last_name\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nWHERE T.cost_of_treatment < (\n  SELECT AVG(cost_of_treatment)\n  FROM Treatments\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3983652591705322,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the date of each treatment, together with the first name of the professional who operated it.",
      "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SELECT T1.date_of_treatment, T2.first_name\nFROM Treatments AS T1\nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id\nGROUP BY T1.date_of_treatment, T2.first_name\nORDER BY T1.date_of_treatment ASC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.719305515289307,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the date and the operating professional's first name of each treatment?",
      "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SELECT T1.date_of_treatment, T2.first_name\nFROM Treatments T1\nJOIN Professionals T2 ON T1.professional_id = T2.professional_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4135007858276367,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the cost of each treatment and the corresponding treatment type description.",
      "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
      "generated_sql": "SELECT \n    tt.treatment_type_description,\n    t.cost_of_treatment\nFROM \n    Treatments t\nJOIN \n    Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5294740200042725,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the cost and treatment type description of each treatment?",
      "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
      "generated_sql": "SELECT \n    tt.treatment_type_description,\n    AVG(t.cost_of_treatment) AS average_cost\nFROM \n    Treatments t\nJOIN \n    Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code\nGROUP BY \n    tt.treatment_type_description\nORDER BY \n    average_cost",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.8397934436798096,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "List each owner's first name, last name, and the size of his for her dog.",
      "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT \n  O.first_name, \n  O.last_name, \n  D.size_code, \n  S.size_description\nFROM \n  Owners O\n  JOIN Dogs D ON O.owner_id = D.owner_id\n  JOIN Sizes S ON D.size_code = S.size_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3211946487426758,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each owner's first name, last name, and the size of their dog?",
      "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT \n  O.first_name, \n  O.last_name, \n  D.size_code, \n  S.size_description\nFROM \n  Owners O\nJOIN \n  Dogs D ON O.owner_id = D.owner_id\nJOIN \n  Sizes S ON D.size_code = S.size_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44662928581237793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List pairs of the owner's first name and the dogs's name.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name, T2.name \nFROM Owners T1 \nJOIN Dogs T2 ON T1.owner_id = T2.owner_id",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32886815071105957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each owner's first name and their dogs's name?",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT O.first_name, D.name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3153567314147949,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "generated_sql": "SELECT D.name, D.breed_code, TT.treatment_type_description, T.date_of_treatment\nFROM Dogs D\nJOIN Treatments T ON D.dog_id = T.dog_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code\nWHERE D.breed_code = (\n  SELECT breed_code\n  FROM Breeds\n  GROUP BY breed_code\n  ORDER BY COUNT(*) ASC\n  LIMIT 1\n)\nAND T.date_of_treatment IS NOT NULL\nORDER BY D.name, T.date_of_treatment",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 6.074536561965942,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "generated_sql": "SELECT T1.name, T2.date_of_treatment\nFROM Dogs T1\nJOIN Treatments T2 ON T1.dog_id = T2.dog_id\nJOIN Treatment_Types T3 ON T2.treatment_type_code = T3.treatment_type_code\nWHERE T3.treatment_type_description = 'Take for a Walk'\nORDER BY T2.date_of_treatment DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.3133111000061035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
      "generated_sql": "SELECT O.first_name, D.name \nFROM Owners O \nJOIN Dogs D ON O.owner_id = D.owner_id \nWHERE O.state = 'Virginia';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4647519588470459,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
      "generated_sql": "SELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nWHERE O.state = 'Virginia';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.455154180526733,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
      "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "generated_sql": "SELECT T1.date_arrived, T1.date_departed\nFROM Dogs T1\nJOIN Treatments T2 ON T1.dog_id = T2.dog_id\nWHERE T2.treatment_type_code IN (SELECT treatment_type_code FROM Treatment_Types WHERE treatment_type_description = 'Treatment') ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.794668436050415,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
      "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "generated_sql": "SELECT T1.date_arrived, T1.date_departed\nFROM Dogs T1\nJOIN Treatments T2 ON T1.dog_id = T2.dog_id\nWHERE T2.treatment_type_code IN (SELECT treatment_type_code FROM Treatment_Types WHERE treatment_type_description = 'Treatment') ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.445414066314697,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "List the last name of the owner owning the youngest dog.",
      "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
      "generated_sql": "SELECT T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nWHERE T2.age = (SELECT MAX(age) FROM Dogs);",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.8660621643066406,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Who owns the youngest dog? Give me his or her last name.",
      "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
      "generated_sql": "SELECT O.last_name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nORDER BY D.age\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3394484519958496,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
      "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "generated_sql": "SELECT T2.email_address \nFROM Professionals AS T1 \nINNER JOIN Owners AS T2 \nON T1.state = T2.state \nWHERE T1.state IN ('Hawaii', 'Wisconsin');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5770225524902344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
      "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "generated_sql": "SELECT T2.email_address \nFROM Professionals AS T1 \nINNER JOIN Owners AS T2 \nON T1.state = T2.state \nWHERE T1.state IN ('Hawaii', 'Wisconsin') ORDER BY 1 LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 4.342434883117676,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the arriving date and the departing date of all the dogs?",
      "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
      "generated_sql": "SELECT date_arrived, date_departed\nFROM Dogs;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.9023404121398926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the arrival date and the departure date for all the dogs.",
      "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
      "generated_sql": "SELECT T1.date_arrived, T1.date_departed\nFROM Dogs T1\nWHERE T1.date_departed IS NOT NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30898571014404297,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs went through any treatments?",
      "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT t.dog_id) \nFROM Treatments t;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6122705936431885,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Count the number of dogs that went through a treatment.",
      "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT d.dog_id) \nFROM Dogs d \nJOIN Treatments t ON d.dog_id = t.dog_id",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.048089027404785,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "How many professionals have performed any treatment to dogs?",
      "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT p.professional_id) \nFROM Professionals p \nJOIN Treatments t ON p.professional_id = t.professional_id \nJOIN Dogs d ON t.dog_id = d.dog_id \nWHERE d.breed_code = 'DOG'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.697300910949707,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of professionals who have ever treated dogs.",
      "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT T2.professional_id) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code \nWHERE T3.treatment_type_description = 'Take for a Walk' LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.517740488052368,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
      "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "generated_sql": "SELECT P.role, P.street, P.city, P.state\nFROM Professionals P\nJOIN Owners O ON P.city LIKE '%' || O.city || '%'\nWHERE O.city LIKE '%West%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 6.749825716018677,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
      "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "generated_sql": "SELECT T1.role_code, T1.street, T1.city, T1.state\nFROM Professionals AS T1\nWHERE T1.city LIKE '%West%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7162692546844482,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
      "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
      "generated_sql": "SELECT o.first_name, o.last_name, o.email_address\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state LIKE '%North%';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3296685218811035,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
      "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T1.email_address\nFROM Owners AS T1\nWHERE T1.state LIKE '%North%'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2022230625152588,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs have an age below the average?",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5853724479675293,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Count the number of dogs of an age below the average.",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
      "generated_sql": "SELECT breed_code, COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs) \nGROUP BY breed_code \nORDER BY COUNT(*) DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.657392978668213,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does the most recent treatment cost?",
      "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "generated_sql": "SELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.22988557815551758,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Show me the cost of the most recently performed treatment.",
      "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "generated_sql": "SELECT T1.cost_of_treatment\nFROM Treatments T1\nORDER BY T1.date_of_treatment DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31023263931274414,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs have not gone through any treatment?",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(dog_id) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2301785945892334,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the number of dogs that have not received any treatment .",
      "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
      "generated_sql": "SELECT COUNT(dog_id) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2384319305419922,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "How many owners temporarily do not have any dogs?",
      "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
      "generated_sql": "SELECT COUNT(DISTINCT o.owner_id) \nFROM Owners o \nLEFT JOIN Dogs d ON o.owner_id = d.owner_id \nWHERE d.dog_id IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.302476167678833,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of owners who do not own any dogs at this moment.",
      "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
      "generated_sql": "SELECT COUNT(DISTINCT o.owner_id) \nFROM Owners o \nLEFT JOIN Dogs d ON o.owner_id = d.owner_id \nWHERE d.owner_id IS NULL AND o.owner_id IS NOT NULL",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.7553117275238037,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "How many professionals did not operate any treatment on dogs?",
      "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(DISTINCT p.professional_id) \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL AND p.role_code = 'Employee'",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4405245780944824,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of professionals who have not treated any dogs.",
      "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(DISTINCT p.professional_id) \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE t.treatment_id IS NULL;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.36580777168273926,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
      "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
      "generated_sql": "SELECT D.name, D.age, D.weight\nFROM Dogs D\nWHERE D.abandoned_yn = '1';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5883686542510986,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
      "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
      "generated_sql": "SELECT name, age, weight \nFROM Dogs \nWHERE abandoned_yn = '1';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4346930980682373,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of all the dogs?",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "generated_sql": "SELECT AVG(CAST(REPLACE(age, ' years', '') AS REAL)) FROM Dogs",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5756511688232422,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Compute the average age of all the dogs.",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "generated_sql": "SELECT CAST(SUM(CAST(REPLACE(age, ' years', '') AS REAL)) AS REAL) / COUNT(*) FROM Dogs",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26061415672302246,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the age of the oldest dog?",
      "gold_sql": "SELECT max(age) FROM Dogs",
      "generated_sql": "SELECT MAX(age) AS max_age \nFROM Dogs",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.645792007446289,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the age of the oldest dog.",
      "gold_sql": "SELECT max(age) FROM Dogs",
      "generated_sql": "SELECT MAX(age) AS oldest_age \nFROM Dogs ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.7906997203826904,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does each charge type costs? List both charge type and amount.",
      "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
      "generated_sql": "SELECT \n  charge_type, \n  charge_amount\nFROM \n  Charges;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31863975524902344,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List each charge type and its amount.",
      "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
      "generated_sql": "SELECT charge_type, charge_amount\nFROM Charges;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31685447692871094,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does the most expensive charge type costs?",
      "gold_sql": "SELECT max(charge_amount) FROM Charges",
      "generated_sql": "SELECT charge_type, MAX(charge_amount) as max_cost\nFROM Charges\nGROUP BY charge_type\nORDER BY max_cost DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44638967514038086,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the charge amount of the most expensive charge type?",
      "gold_sql": "SELECT max(charge_amount) FROM Charges",
      "generated_sql": "SELECT charge_type, MAX(charge_amount) as max_charge\nFROM Charges\nGROUP BY charge_type\nORDER BY max_charge DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.35272693634033203,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "List the email, cell phone and home phone of all the professionals.",
      "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "generated_sql": "SELECT email_address, cell_number, home_phone \nFROM Professionals;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3661797046661377,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the email, cell phone and home phone of each professional?",
      "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "generated_sql": "SELECT \n  P.email_address, \n  P.cell_number, \n  P.home_phone\nFROM \n  Professionals P;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4662659168243408,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are all the possible breed type and size type combinations?",
      "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "generated_sql": "SELECT DISTINCT B.breed_name, S.size_description\nFROM Breeds B\nJOIN Dogs D ON B.breed_code = D.breed_code\nJOIN Sizes S ON D.size_code = S.size_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.4838809967041016,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the distinct breed type and size type combinations for dogs.",
      "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "generated_sql": "SELECT DISTINCT T1.breed_code, T2.size_code \nFROM Breeds AS T1 \nINNER JOIN Dogs AS T2 \nON T1.breed_code = T2.breed_code \nWHERE T1.breed_code IS NOT NULL AND T2.size_code IS NOT NULL \nORDER BY T1.breed_code, T2.size_code",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.7696759700775146,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "dog_kennels",
      "question": "List the first name of all the professionals along with the description of the treatment they have done.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "generated_sql": "SELECT P.first_name, TT.treatment_type_description\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5064444541931152,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each professional's first name and description of the treatment they have performed?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "generated_sql": "SELECT P.first_name, TT.treatment_type_description\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.32811927795410156,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "How many singers are there?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28582286834716797,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What is the count of singers?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.21448826789855957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "List the name of singers in ascending order of net worth.",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "generated_sql": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions ASC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2657127380371094,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What are the names of singers ordered by ascending net worth?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "generated_sql": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions ASC;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5296845436096191,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What are the birth year and citizenship of singers?",
      "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
      "generated_sql": "SELECT Birth_Year, Citizenship\nFROM singer;",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.9849801063537598,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "singer",
      "question": "What are the birth years and citizenships of the singers?",
      "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
      "generated_sql": "SELECT Birth_Year, Citizenship\nFROM singer;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23858404159545898,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "List the name of singers whose citizenship is not \"France\".",
      "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "generated_sql": "SELECT Name \nFROM singer \nWHERE Citizenship != \"France\";",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2501049041748047,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers who are not French citizens?",
      "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "generated_sql": "SELECT Name \nFROM singer \nWHERE Citizenship != 'France';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3602457046508789,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show the name of singers whose birth year is either 1948 or 1949?",
      "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
      "generated_sql": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2827303409576416,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
      "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
      "generated_sql": "SELECT Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3041095733642578,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What is the name of the singer with the largest net worth?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "generated_sql": "SELECT Name \nFROM singer \nORDER BY Net_Worth_Millions DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23578214645385742,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What is the name of the singer who is worth the most?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "generated_sql": "SELECT s.Name \nFROM singer s \nJOIN (SELECT Singer_ID \n      FROM song \n      GROUP BY Singer_ID \n      HAVING SUM(Sales) > 1000000) AS top_singers \nON s.Singer_ID = top_singers.Singer_ID \nORDER BY s.Net_Worth_Millions DESC \nLIMIT 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.211574554443359,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "singer",
      "question": "Show different citizenship of singers and the number of singers of each citizenship.",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT T1.Citizenship, COUNT(*) as Singer_Count\nFROM singer T1\nGROUP BY T1.Citizenship;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.1994400024414062,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, how many singers are from that country?",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT T1.Citizenship, COUNT(T1.Singer_ID) AS Singer_Count\nFROM singer T1\nGROUP BY T1.Citizenship;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4832615852355957,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Please show the most common citizenship of singers.",
      "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Citizenship \nFROM singer T1 \nWHERE T1.Citizenship = (SELECT T2.Citizenship \n                       FROM singer T2 \n                       GROUP BY T2.Citizenship \n                       ORDER BY COUNT(T2.Citizenship) DESC \n                       LIMIT 1);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4112367630004883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What is the most common singer citizenship ?",
      "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
      "generated_sql": "SELECT T1.Citizenship \nFROM singer AS T1 \nGROUP BY T1.Citizenship \nORDER BY COUNT(T1.Citizenship) DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7482433319091797,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
      "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT T1.Citizenship, MAX(T1.Net_Worth_Millions) AS Max_Net_Worth\nFROM singer T1\nGROUP BY T1.Citizenship;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.736884832382202,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, what is the maximum net worth?",
      "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) AS max_net_worth\nFROM singer\nGROUP BY Citizenship;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.2258195877075195,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show titles of songs and names of singers.",
      "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "generated_sql": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3010261058807373,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What are the song titles and singer names?",
      "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "generated_sql": "SELECT T1.Title, T2.Name \nFROM song AS T1 \nINNER JOIN singer AS T2 \nON T1.Singer_ID = T2.Singer_ID;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2829914093017578,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show distinct names of singers that have songs with sales more than 300000.",
      "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.36770176887512207,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "what are the different names of the singers that have sales more than 300000?",
      "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T2.Sales > 300000;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5094821453094482,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show the names of singers that have more than one song.",
      "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Singer_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.613225221633911,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers that have more than one songs?",
      "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Singer_ID) > 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8004271984100342,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show the names of singers and the total sales of their songs.",
      "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "generated_sql": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7008323669433594,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "For each singer name, what is the total sales for their songs?",
      "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "generated_sql": "SELECT s.Name, SUM(ss.Sales) AS Total_Sales\nFROM singer s\nJOIN song ss ON s.Singer_ID = ss.Singer_ID\nWHERE s.Net_Worth_Millions > 50\nGROUP BY s.Name\nORDER BY Total_Sales DESC",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.6637003421783447,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "singer",
      "question": "List the name of singers that do not have any song.",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "generated_sql": "SELECT s.Name \nFROM singer s \nWHERE NOT EXISTS (SELECT 1 FROM song sg WHERE s.Singer_ID = sg.Singer_ID)",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.276068687438965,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "singer",
      "question": "What is the sname of every sing that does not have any song?",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "generated_sql": "SELECT s.sname \nFROM singer s \nWHERE s.singer_id NOT IN (SELECT singer_id FROM song);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.1727421283721924,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "singer",
      "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
      "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "singer",
      "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
      "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "real_estate_properties",
      "question": "How many available features are there in total?",
      "gold_sql": "SELECT count(*) FROM Other_Available_Features",
      "generated_sql": "SELECT COUNT(DISTINCT feature_id) FROM Other_Property_Features",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3339686393737793,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "real_estate_properties",
      "question": "What is the feature type name of feature AirCon?",
      "gold_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
      "generated_sql": "SELECT T2.feature_type_name \nFROM Other_Available_Features AS T1 \nINNER JOIN Ref_Feature_Types AS T2 \nON T1.feature_type_code = T2.feature_type_code \nWHERE T1.feature_name = 'AirCon';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2051150798797607,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "real_estate_properties",
      "question": "Show the property type descriptions of properties belonging to that code.",
      "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
      "generated_sql": "SELECT \n  pt.property_type_description\nFROM \n  Properties p\nJOIN \n  Ref_Property_Types pt ON p.property_type_code = pt.property_type_code\nWHERE \n  p.property_type_code = 'House';",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5065479278564453,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "real_estate_properties",
      "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
      "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
      "generated_sql": "SELECT DISTINCT p.property_name\nFROM Properties p\nJOIN Other_Property_Features of ON p.property_id = of.property_id\nJOIN Other_Available_Features oaf ON of.feature_id = oaf.feature_id\nJOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code\nJOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code\nWHERE rft.feature_type_name IN ('Amenity', 'Security')\nAND p.room_count > 1\nAND rpt.property_type_description IN ('House', 'Apartment');",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 7.984502792358398,
      "error": null,
      "mcts_used": false
    }
  ],
  "has_gold_sql": true,
  "few_shot_examples": null,
  "use_mcts": true,
  "mcts_iterations": 20,
  "mcts_usage_rate": 0.1653771760154739,
  "direct_vs_mcts": {
    "direct_count": 792,
    "mcts_count": 171,
    "direct_accuracy": 0.6111111111111112,
    "mcts_accuracy": 0.4678362573099415,
    "direct_success_rate": 0.9204545454545454,
    "mcts_success_rate": 1.0
  }
}