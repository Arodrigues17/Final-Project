{
  "model": "llama-3.1-8b-instant",
  "dataset": "dev.json",
  "total_examples": 50,
  "exact_match_accuracy": 0.1,
  "execution_match_accuracy": 0.64,
  "execution_success_rate": 0.88,
  "error_rate": 0.12,
  "average_time_per_query": 26.21415404319763,
  "total_time": 1310.7077021598816,
  "per_database_accuracy": {
    "flight_2": {
      "exact_match_accuracy": 0.2857142857142857,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 7
    },
    "pets_1": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.75,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 4
    },
    "student_transcripts_tracking": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.6666666666666666,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 3
    },
    "battle_death": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 1
    },
    "wta_1": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.16666666666666666,
      "execution_success_rate": 0.6666666666666666,
      "mcts_usage_rate": 0.16666666666666666,
      "total_examples": 6
    },
    "employee_hire_evaluation": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 1.0,
      "total_examples": 1
    },
    "car_1": {
      "exact_match_accuracy": 0.3333333333333333,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 6
    },
    "network_1": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.5,
      "total_examples": 2
    },
    "course_teach": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 2
    },
    "orchestra": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 1
    },
    "dog_kennels": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.0,
      "execution_success_rate": 0.3333333333333333,
      "mcts_usage_rate": 0.0,
      "total_examples": 3
    },
    "concert_singer": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 1
    },
    "cre_Doc_Template_Mgt": {
      "exact_match_accuracy": 0.3333333333333333,
      "execution_match_accuracy": 0.6666666666666666,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.3333333333333333,
      "total_examples": 3
    },
    "voter_1": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 2
    },
    "world_1": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 0.6666666666666666,
      "mcts_usage_rate": 0.16666666666666666,
      "total_examples": 6
    },
    "tvshow": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 1.0,
      "execution_success_rate": 1.0,
      "mcts_usage_rate": 0.0,
      "total_examples": 2
    }
  },
  "results": [
    {
      "db_id": "flight_2",
      "question": "Give the code of the airport with the least flights.",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.Airline) ASC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3609490394592285,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find number of pets owned by students who are older than 20.",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(DISTINCT T1.StuID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Age > 20;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 8.278872966766357,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "On average, when were the transcripts printed?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(T1.transcript_date) \nFROM Transcripts T1",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 16.387564182281494,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "battle_death",
      "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
      "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
      "generated_sql": "SELECT DISTINCT b.name\nFROM battle b\nWHERE b.bulgarian_commander = 'Kaloyan'\nAND b.latin_commander = 'Baldwin I';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 41.838196754455566,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT first_name, last_name, birth_date\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date LIMIT 10",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 44.12582325935364,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the shops that do not hire any employee.",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT T1.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Shop_ID) = 0",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 41.04116773605347,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "flight_2",
      "question": "How many flights arriving in Aberdeen city?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = (SELECT AirportCode \n                     FROM airports \n                     WHERE City = 'Aberdeen');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.761203765869141,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
      "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
      "generated_sql": "SELECT c.CountryId, c.CountryName \nFROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nWHERE cm.Id IN (\n  SELECT cm.Id \n  FROM car_makers cm \n  JOIN model_list ml ON cm.Id = ml.Maker \n  WHERE ml.Model = 'fiat' \n  UNION \n  SELECT cm.Id \n  FROM car_makers cm \n  JOIN model_list ml ON cm.Id = ml.Maker \n  GROUP BY cm.Id \n  HAVING COUNT(*) > 3\n)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 46.12224864959717,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "Show the names and grades of each high schooler.",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT name, grade \nFROM Highschooler;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.959686994552612,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname, T1.Age\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN Pets AS T3 ON T2.PetID = T3.PetID\nWHERE T3.PetType = 'dog'\nAND T3.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 34.17479157447815,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "Find the major and age of students who do not have a cat pet.",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname, T1.LName, T1.Age, T1.Major\nFROM Student AS T1\nWHERE T1.StuID NOT IN (\n  SELECT T2.StuID\n  FROM Has_Pet AS T2\n  JOIN Pets AS T3 ON T2.PetID = T3.PetID\n  WHERE T3.PetType = 'cat'\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 38.25424098968506,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many flights do we have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) FROM flights",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.92926549911499,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "List the names of all winners who played in both 2013 and 2016.",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "wta_1",
      "question": "What is the code of the country with the most players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.country_code\nFROM players AS T1\nJOIN (\n  SELECT T2.country_code, COUNT(*) as num_players\n  FROM players AS T2\n  GROUP BY T2.country_code\n) AS T3\nON T1.country_code = T3.country_code\nORDER BY T3.num_players DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 18.61498999595642,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "pets_1",
      "question": "How many dog pets are raised by female students?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 43.568565130233765,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers that teach at least two courses.",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T1.Course_ID) >= 2",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.365269422531128,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of orchestras that have CD or DVD as their record format.",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD')",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 42.506534814834595,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the states where both owners and professionals live.",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the last transcript release date?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT T.transcript_date \nFROM Transcripts T \nORDER BY T.transcript_date DESC \nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 14.639163255691528,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "concert_singer",
      "question": "What are all the song names by singers who are older than average?",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT T1.Song_Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID \nWHERE T1.Age > (SELECT AVG(Age) FROM singer)",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 42.137059450149536,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates of the type CV.",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(Template_ID) \nFROM Templates \nWHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 36.5843071937561,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "network_1",
      "question": "What are the names and grades for each high schooler?",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT H1.name, H1.grade \nFROM Highschooler H1 \nJOIN Friend F ON H1.ID = F.student_id OR H1.ID = F.friend_id\nGROUP BY H1.name, H1.grade ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 37.3140287399292,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "voter_1",
      "question": "What are the number of votes from state 'NY' or 'CA'?",
      "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
      "generated_sql": "SELECT COUNT(*) \nFROM VOTES \nWHERE state IN ('NY', 'CA');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 40.942185401916504,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates.",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 25.80612802505493,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the best rank of losers across all matches?",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT loser_rank\nFROM matches\nWHERE loser_rank = (\n  SELECT MAX(loser_rank)\n  FROM matches\n);",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 40.7534019947052,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "voter_1",
      "question": "List the vote ids, phone numbers and states of all votes.",
      "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
      "generated_sql": "SELECT vote_id, phone_number, state \nFROM VOTES",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 37.271613121032715,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "How many airports do we have?",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.9419262409210205,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes for countries that do not speak English?",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "flight_2",
      "question": "Give the city and country for the Alton airport.",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT a.City, a.Country \nFROM airports a \nJOIN flights f ON a.AirportCode = f.SourceAirport \nWHERE a.AirportName = 'Alton'",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.4179558753967285,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many different forms of governments are there in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 39.48891067504883,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "How many countries have a republic as their form of government?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(Code) \nFROM country \nWHERE GovernmentForm = 'Republic';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 37.776084661483765,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n  s.student_id,\n  s.first_name,\n  s.middle_name,\n  s.last_name,\n  COUNT(se.student_enrolment_id) AS num_enrollments\nFROM \n  Students s\n  JOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY \n  s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY \n  num_enrollments DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 27.344415426254272,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What is the number of continents?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 7.39256739616394,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT O.owner_id, O.zip_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN (\n  SELECT dog_id, SUM(cost_of_treatment) AS total_cost\n  FROM Treatments\n  GROUP BY dog_id\n) T ON D.dog_id = T.dog_id\nWHERE (D.dog_id, T.total_cost) IN (\n  SELECT dog_id, MAX(total_cost)\n  FROM (\n    SELECT dog_id, SUM(cost_of_treatment) AS total_cost\n    FROM Treatments\n    GROUP BY dog_id\n  ) subquery\n  GROUP BY dog_id\n)\nORDER BY T.total_cost DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 26.43578863143921,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(DISTINCT t1.SourceAirport) \nFROM flights t1 \nJOIN airports t2 ON t1.SourceAirport = t2.AirportCode \nWHERE t2.City IN ('Aberdeen', 'Abilene');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 35.87200093269348,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "Which African countries have a smaller population than that of any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT c.Name\nFROM country c\nWHERE c.Continent = 'Africa'\nAND c.Population < (SELECT MIN(Population) FROM country c2 WHERE c2.Continent = 'Asia') ORDER BY 1",
      "method": "mcts",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 40.073240995407104,
      "error": null,
      "mcts_used": true
    },
    {
      "db_id": "car_1",
      "question": "How many countries has more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(DISTINCT c.CountryId) \nFROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nGROUP BY c.CountryId \nHAVING COUNT(DISTINCT cm.Id) > 2;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 42.97691559791565,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of the series Sky Radio?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT Content\nFROM TV_Channel\nWHERE id = (SELECT Channel\n            FROM TV_series\n            WHERE series_name = 'Sky Radio');",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 37.4017231464386,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "world_1",
      "question": "What is name of the country that speaks the largest number of languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Code\nORDER BY COUNT(cl.Language) DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 39.47406268119812,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "course_teach",
      "question": "Show different hometown of teachers and the number of teachers from each hometown.",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT T1.Hometown, COUNT(*) as Number_of_Teachers\nFROM teacher AS T1\nGROUP BY T1.Hometown",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 37.05390477180481,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "What model has the most different versions?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT M.Model, COUNT(*) as count\nFROM model_list M\nJOIN car_makers C ON M.Maker = C.Id\nGROUP BY M.Model\nORDER BY count DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 41.68234086036682,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT \n  cm.FullName, \n  cm.Id, \n  COUNT(ml.Model) as Number\nFROM \n  car_makers cm\nJOIN \n  model_list ml ON cm.Id = ml.Maker\nGROUP BY \n  cm.FullName, cm.Id\nORDER BY \n  cm.FullName;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 37.33241581916809,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nJOIN rankings r ON p.player_id = r.player_id\nWHERE m.tourney_name = 'Australian Open'\nORDER BY r.ranking_points DESC\nLIMIT 1;",
      "method": "direct",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 54.570889472961426,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "tvshow",
      "question": "What is the name and directors of all the cartoons that are ordered by air date?",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT C.Title, C.Directed_by\nFROM Cartoon C\nORDER BY C.Original_air_date;",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 40.32260036468506,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "car_1",
      "question": "How many cars has over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 6;",
      "method": "direct",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.72885537147522,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights into ATO.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO';",
      "method": "direct",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 29.65487313270569,
      "error": null,
      "mcts_used": false
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of nations that speak both English and French.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity",
      "method": "skipped"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes with less than three templates.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code \nFROM Templates T1 \nJOIN Ref_Template_Types T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T1.Template_ID IN (SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(*) < 3)\nGROUP BY T1.Template_Type_Code \nORDER BY T1.Template_Type_Code",
      "method": "mcts",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 44.028972148895264,
      "error": null,
      "mcts_used": true
    }
  ],
  "has_gold_sql": true,
  "few_shot_examples": null,
  "use_mcts": true,
  "mcts_iterations": 10,
  "mcts_usage_rate": 0.1,
  "direct_vs_mcts": {
    "direct_count": 39,
    "mcts_count": 5,
    "direct_accuracy": 0.7435897435897436,
    "mcts_accuracy": 0.6,
    "direct_success_rate": 1.0,
    "mcts_success_rate": 1.0
  }
}