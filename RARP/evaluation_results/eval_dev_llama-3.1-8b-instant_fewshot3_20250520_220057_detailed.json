{
  "model": "llama-3.1-8b-instant",
  "dataset": "dev.json",
  "total_examples": 1034,
  "exact_match_accuracy": 0.07833655705996131,
  "execution_match_accuracy": 0.4932301740812379,
  "execution_success_rate": 0.776595744680851,
  "error_rate": 0.06866537717601548,
  "average_time_per_query": 0.585515680350003,
  "total_time": 605.4232134819031,
  "per_database_accuracy": {
    "concert_singer": {
      "exact_match_accuracy": 0.044444444444444446,
      "execution_match_accuracy": 0.5333333333333333,
      "execution_success_rate": 0.7111111111111111,
      "total_examples": 45
    },
    "pets_1": {
      "exact_match_accuracy": 0.11904761904761904,
      "execution_match_accuracy": 0.40476190476190477,
      "execution_success_rate": 0.7142857142857143,
      "total_examples": 42
    },
    "car_1": {
      "exact_match_accuracy": 0.13043478260869565,
      "execution_match_accuracy": 0.358695652173913,
      "execution_success_rate": 0.6630434782608695,
      "total_examples": 92
    },
    "flight_2": {
      "exact_match_accuracy": 0.0875,
      "execution_match_accuracy": 0.8125,
      "execution_success_rate": 0.8625,
      "total_examples": 80
    },
    "employee_hire_evaluation": {
      "exact_match_accuracy": 0.07894736842105263,
      "execution_match_accuracy": 0.5789473684210527,
      "execution_success_rate": 0.868421052631579,
      "total_examples": 38
    },
    "cre_Doc_Template_Mgt": {
      "exact_match_accuracy": 0.07142857142857142,
      "execution_match_accuracy": 0.6666666666666666,
      "execution_success_rate": 0.8571428571428571,
      "total_examples": 84
    },
    "course_teach": {
      "exact_match_accuracy": 0.03333333333333333,
      "execution_match_accuracy": 0.4666666666666667,
      "execution_success_rate": 0.7,
      "total_examples": 30
    },
    "museum_visit": {
      "exact_match_accuracy": 0.05555555555555555,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 0.7222222222222222,
      "total_examples": 18
    },
    "wta_1": {
      "exact_match_accuracy": 0.08064516129032258,
      "execution_match_accuracy": 0.2903225806451613,
      "execution_success_rate": 0.7419354838709677,
      "total_examples": 62
    },
    "battle_death": {
      "exact_match_accuracy": 0.1875,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 0.75,
      "total_examples": 16
    },
    "student_transcripts_tracking": {
      "exact_match_accuracy": 0.08974358974358974,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 0.7564102564102564,
      "total_examples": 78
    },
    "tvshow": {
      "exact_match_accuracy": 0.06451612903225806,
      "execution_match_accuracy": 0.4838709677419355,
      "execution_success_rate": 0.7903225806451613,
      "total_examples": 62
    },
    "poker_player": {
      "exact_match_accuracy": 0.25,
      "execution_match_accuracy": 0.85,
      "execution_success_rate": 1.0,
      "total_examples": 40
    },
    "voter_1": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.7333333333333333,
      "execution_success_rate": 0.8,
      "total_examples": 15
    },
    "world_1": {
      "exact_match_accuracy": 0.008333333333333333,
      "execution_match_accuracy": 0.19166666666666668,
      "execution_success_rate": 0.75,
      "total_examples": 120
    },
    "orchestra": {
      "exact_match_accuracy": 0.1,
      "execution_match_accuracy": 0.725,
      "execution_success_rate": 0.9,
      "total_examples": 40
    },
    "network_1": {
      "exact_match_accuracy": 0.017857142857142856,
      "execution_match_accuracy": 0.42857142857142855,
      "execution_success_rate": 0.8571428571428571,
      "total_examples": 56
    },
    "dog_kennels": {
      "exact_match_accuracy": 0.0,
      "execution_match_accuracy": 0.34146341463414637,
      "execution_success_rate": 0.5975609756097561,
      "total_examples": 82
    },
    "singer": {
      "exact_match_accuracy": 0.23333333333333334,
      "execution_match_accuracy": 0.8,
      "execution_success_rate": 0.9,
      "total_examples": 30
    },
    "real_estate_properties": {
      "exact_match_accuracy": 0.5,
      "execution_match_accuracy": 0.5,
      "execution_success_rate": 1.0,
      "total_examples": 4
    }
  },
  "results": [
    {
      "db_id": "concert_singer",
      "question": "How many singers do we have?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4286668300628662,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the total number of singers?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9388206005096436,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "generated_sql": "SELECT T1.Name, T1.Country, T1.Age \nFROM singer AS T1 \nORDER BY T1.Age DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3513906002044678,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "generated_sql": "SELECT T1.Name ,  T1.Country ,  T1.Age \nFROM singer AS T1 \nORDER BY T1.Age DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1607439517974854,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "generated_sql": "SELECT AVG(T1.Age), MIN(T1.Age), MAX(T1.Age) \nFROM singer AS T1 \nJOIN concert AS T2 ON T1.Singer_ID = T2.concert_ID \nJOIN stadium AS T3 ON T2.Stadium_ID = T3.Stadium_ID \nWHERE T3.Location = 'France'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7139589786529541,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "generated_sql": "SELECT AVG(T1.Age), MIN(T1.Age), MAX(T1.Age) \nFROM singer AS T1 \nJOIN concert AS T2 ON T1.Singer_ID = T2.concert_ID \nJOIN stadium AS T3 ON T2.Stadium_ID = T3.Stadium_ID \nWHERE T1.Country = 'France'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4098174571990967,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show the name and the release year of the song by the youngest singer.",
      "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "generated_sql": "SELECT T2.Name ,  T2.`Song_release_year` \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID \nJOIN singer AS T4 ON T3.concert_ID  =  T4.Singer_ID \nWHERE T4.Age  =  ( SELECT MIN(Age) FROM singer )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5088489055633545,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "generated_sql": "SELECT T2.Name ,  T2.`Song_release_year` \nFROM singer_in_concert AS T1 \nJOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T2.Age  =  ( SELECT MIN(Age) FROM singer );",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40519046783447266,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are all distinct countries where singers above age 20 are from?",
      "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "generated_sql": "SELECT DISTINCT T2.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID \nWHERE T1.Age  >  20",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5151288509368896,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are  the different countries with singers above age 20?",
      "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "generated_sql": "SELECT DISTINCT T1.Country \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID \nWHERE T1.Age  >  20",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.510134220123291,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show all countries and the number of singers in each country.",
      "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "generated_sql": "SELECT T1.Country ,  COUNT(T1.Singer_ID) FROM singer AS T1 GROUP BY T1.Country",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7150297164916992,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "How many singers are from each country?",
      "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "generated_sql": "SELECT T1.Country ,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Country",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3032827377319336,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "List all song names by singers above the average age.",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT T1.Song_Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T1.Age  >  (SELECT AVG(Age) FROM singer)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39253854751586914,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are all the song names by singers who are older than average?",
      "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "generated_sql": "SELECT T1.Song_Name \nFROM singer AS T1 \nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nJOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID \nJOIN stadium AS T4 ON T3.Stadium_ID  =  T4.Stadium_ID \nWHERE T4.Average  >  (SELECT AVG(Average) FROM stadium)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8395967483520508,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "generated_sql": "SELECT T1.Location ,  T1.Name \nFROM stadium AS T1 \nWHERE T1.Capacity BETWEEN 5000 AND 10000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8179342746734619,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "generated_sql": "SELECT T1.Location ,  T1.Name \nFROM stadium AS T1 \nWHERE T1.Capacity BETWEEN 5000 AND 10000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6414721012115479,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the maximum capacity and the average of all stadiums ?",
      "gold_sql": "select max(capacity), average from stadium",
      "generated_sql": "SELECT MAX(Capacity), AVG(Average) FROM stadium",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3762822151184082,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the average and maximum capacities for all stadiums ?",
      "gold_sql": "select avg(capacity) ,  max(capacity) from stadium",
      "generated_sql": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5112655162811279,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name ,  T1.Capacity \nFROM stadium AS T1 \nORDER BY T1.Average DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0062754154205322,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name ,  T1.Capacity \nFROM stadium AS T1 \nORDER BY T1.Average DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.0870118141174316,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "How many concerts are there in year 2014 or 2015?",
      "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "generated_sql": "SELECT COUNT(*) \nFROM concert \nWHERE YEAR IN (2014, 2015)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.2483887672424316,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "How many concerts occurred in 2014 or 2015?",
      "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "generated_sql": "SELECT COUNT(*) \nFROM concert \nWHERE YEAR IN ('2014', '2015')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.8853075504302979,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "generated_sql": "SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts\nFROM stadium AS T1\nJOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID\nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.189241647720337,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "For each stadium, how many concerts play there?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "generated_sql": "SELECT T1.Name ,  COUNT(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID GROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40781736373901367,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "gold_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name ,  T1.Capacity \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID \nWHERE T2.Year  >=  2014 \nGROUP BY T1.Name ,  T1.Capacity \nORDER BY COUNT(T2.concert_ID) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40912914276123047,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
      "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
      "generated_sql": "SELECT T1.Name ,  T1.Capacity \nFROM stadium AS T1 \nJOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID \nWHERE T2.Year  >  2013 \nGROUP BY T1.Name ,  T1.Capacity \nORDER BY COUNT(T2.concert_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5103964805603027,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Which year has most number of concerts?",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Year \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID \nGROUP BY T2.Year \nORDER BY COUNT(T2.concert_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3976595401763916,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the year that had the most concerts?",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Year \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID \nGROUP BY T2.Year \nORDER BY COUNT(T2.concert_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3770005702972412,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show the stadium names without any concert.",
      "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "generated_sql": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID \nWHERE T2.concert_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2718989849090576,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the stadiums without any concerts?",
      "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "generated_sql": "SELECT T1.Name \nFROM stadium AS T1 \nLEFT JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID \nWHERE T2.concert_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6129903793334961,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "gold_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "gold_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
      "generated_sql": "SELECT T1.concert_Name ,  T1.Theme ,  COUNT(T2.Singer_ID) AS num_singers \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID \nGROUP BY T1.concert_Name ,  T1.Theme",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5110969543457031,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names , themes , and number of singers for every concert ?",
      "gold_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
      "generated_sql": "SELECT T1.Name ,  T2.Theme ,  COUNT(T3.Singer_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID GROUP BY T1.Name ,  T2.Theme",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5097553730010986,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "List singer names and number of concerts for each singer.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "generated_sql": "SELECT T1.Name ,  COUNT(T2.concert_ID) AS num_concerts\nFROM singer AS T1\nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID\nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5131247043609619,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers and number of concerts for each person?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "generated_sql": "SELECT T1.Name ,  COUNT(T2.concert_ID) AS num_concerts\nFROM singer AS T1\nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID\nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6398763656616211,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "List all singer names in concerts in year 2014.",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "generated_sql": "SELECT T2.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID \nJOIN singer AS T3 ON T2.Singer_ID  =  T3.Singer_ID \nWHERE T1.Year  =  \"2014\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5868756771087646,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "generated_sql": "SELECT T2.Name \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID \nJOIN singer AS T3 ON T2.Singer_ID  =  T3.Singer_ID \nWHERE T1.Year  =  \"2014\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5101516246795654,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "generated_sql": "SELECT T2.Name ,  T2.Country\nFROM singer_in_concert AS T1\nJOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID\nJOIN concert AS T3 ON T1.concert_ID  =  T3.concert_ID\nWHERE T2.Song_Name LIKE \"%Hey%\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8189096450805664,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "generated_sql": "SELECT T1.Name ,  T1.Country\nFROM singer AS T1\nJOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID\nJOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID\nJOIN stadium AS T4 ON T3.Stadium_ID  =  T4.Stadium_ID\nJOIN songs AS T5 ON T1.Song_Name  =  T5.Song_Name\nWHERE T5.Song_Name LIKE \"%Hey%\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 2.904158115386963,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "concert_singer",
      "question": "Find the number of concerts happened in the stadium with the highest capacity .",
      "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "generated_sql": "SELECT COUNT(*) \nFROM concert \nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID \nWHERE stadium.Capacity = ( SELECT MAX(Capacity) FROM stadium )",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8780412673950195,
      "error": null
    },
    {
      "db_id": "concert_singer",
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
      "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "generated_sql": "SELECT COUNT(T2.concert_ID) \nFROM concert AS T1 \nJOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID \nJOIN stadium AS T3 ON T1.Stadium_ID  =  T3.Stadium_ID \nWHERE T3.Capacity  =  (SELECT MAX(Capacity) FROM stadium)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.133798599243164,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of pets whose weight is heavier than 10.",
      "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Pets \nWHERE weight  >  10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1951062679290771,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "How many pets have a greater weight than 10?",
      "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Pets \nWHERE weight  >  10",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3322021961212158,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the weight of the youngest dog.",
      "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T3.weight FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID ORDER BY T3.pet_age ASC LIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5115077495574951,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "How much does the youngest dog weigh?",
      "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T2.weight FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T3.PetID  =  T2.PetID WHERE T3.pet_age  =  (SELECT MIN(pet_age) FROM Pets WHERE PetType  =  \"dog\")",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.2942237854003906,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "generated_sql": "SELECT T2.weight ,  T2.pet_type\nFROM Pets AS T1\nJOIN (\n  SELECT PetID ,  MAX(weight) as max_weight\n  FROM Pets\n  GROUP BY PetID\n) AS T2 ON T1.PetID  =  T2.PetID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.28182101249694824,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "List the maximum weight and type for each type of pet.",
      "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "generated_sql": "SELECT T2.pet_type ,  MAX(T3.weight) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nGROUP BY T2.pet_type",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3301510810852051,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find number of pets owned by students who are older than 20.",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(T1.StuID) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Age > 20",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3351173400878906,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "How many pets are owned by students that have an age greater than 20?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "generated_sql": "SELECT COUNT(*) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nWHERE T1.Age  >  20",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3139784336090088,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(*) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T1.Sex  =  \"F\" AND T3.PetType  =  \"dog\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4092137813568115,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "How many dog pets are raised by female students?",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "generated_sql": "SELECT COUNT(*) \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nJOIN Pets AS T3 ON T2.PetID = T3.PetID \nWHERE T1.Sex = 'F' AND T3.PetType = 'dog';",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33971619606018066,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of distinct type of pets.",
      "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
      "generated_sql": "SELECT COUNT(DISTINCT T2.PetType) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4175243377685547,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "How many different types of pet are there?",
      "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
      "generated_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2626948356628418,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name of students who have cat or dog pet.",
      "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.PetType  =  \"cat\" OR T3.PetType  =  \"dog\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3116567134857178,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.PetType  =  \"cat\" OR T3.PetType  =  \"dog\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3666529655456543,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name of students who have both cat and dog pets .",
      "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.PetType  =  \"cat\" AND T3.PetType  =  \"dog\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6489877700805664,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "pets_1",
      "question": "Find the major and age of students who do not have a cat pet.",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.major ,  T1.age\nFROM Student AS T1\nWHERE T1.StuID NOT IN (\n  SELECT T2.StuID\n  FROM Has_Pet AS T2\n  JOIN Pets AS T3 ON T2.PetID  =  T3.PetID\n  WHERE T3.PetType  =  \"cat\"\n);",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0252511501312256,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Major, T1.Age\nFROM Student AS T1\nWHERE T1.StuID NOT IN (\n  SELECT T2.StuID\n  FROM Has_Pet AS T2\n  JOIN Pets AS T3 ON T2.PetID = T3.PetID\n  WHERE T3.PetType = 'cat'\n);",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.42215561866760254,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the id of students who do not have a cat pet.",
      "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "pets_1",
      "question": "What are the ids of the students who do not own cats as pets?",
      "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname ,  T1.Age\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID\nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID\nWHERE T3.PetType  =  \"dog\" AND T3.PetType  !=  \"cat\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33277297019958496,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "generated_sql": "SELECT T1.Fname \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.PetType  =  \"dog\" AND T3.PetType  !=  \"cat\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.531400203704834,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the type and weight of the youngest pet.",
      "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T2.pet_type ,  T2.weight \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.pet_age  =  (SELECT MIN(T4.pet_age) FROM Pets AS T4)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.3703069686889648,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "generated_sql": "SELECT T2.pet_type ,  T2.weight FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.petid  =  T2.petid JOIN Student AS T3 ON T3.stuid  =  T2.stuid WHERE T3.age  =  (SELECT MIN(age) FROM Student)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.612356424331665,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "generated_sql": "SELECT T1.PetID ,  T1.weight\nFROM Pets AS T1\nJOIN Has_Pet AS T2 ON T1.PetID  =  T2.PetID\nWHERE T2.StuID IN (\n  SELECT StuID\n  FROM Student\n  WHERE Age  >  1\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6144924163818359,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the id and weight of every pet who is older than 1?",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "generated_sql": "SELECT T1.PetID ,  T2.weight\nFROM Pets AS T1\nJOIN Has_Pet AS T2 ON T1.PetID  =  T2.PetID\nWHERE T1.pet_age  >  1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3046393394470215,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the average and maximum age for each type of pet.",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT \n    PetType, \n    AVG(pet_age) AS average_age, \n    MAX(pet_age) AS max_age\nFROM \n    Pets\nGROUP BY \n    PetType;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.32990431785583496,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the average and maximum age for each pet type?",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT \n    T3.PetType, \n    AVG(T3.pet_age) AS average_age, \n    MAX(T3.pet_age) AS max_age\nFROM \n    Student AS T1\nJOIN \n    Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN \n    Pets AS T3 ON T2.PetID = T3.PetID\nGROUP BY \n    T3.PetType",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0820481777191162,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the average weight for each pet type.",
      "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3272695541381836,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the average weight for each type of pet?",
      "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "generated_sql": "SELECT \n    T3.PetType, \n    AVG(T3.weight) AS average_weight\nFROM \n    Student AS T1\nJOIN \n    Has_Pet AS T2 ON T1.StuID = T2.StuID\nJOIN \n    Pets AS T3 ON T2.PetID = T3.PetID\nGROUP BY \n    T3.PetType;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5112507343292236,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a pet.",
      "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "generated_sql": "SELECT T1.Fname ,  T1.Age\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID\nWHERE T2.PetID IS NOT NULL;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5121338367462158,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What are the different first names and ages of the students who do have pets?",
      "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "generated_sql": "SELECT DISTINCT T1.Fname ,  T1.Age \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nWHERE T2.PetID IS NOT NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.513218879699707,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "generated_sql": "SELECT T1.StuID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nWHERE T1.LName  =  \"Smith\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8147375583648682,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "generated_sql": "SELECT T1.StuID \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nWHERE T1.LName = 'Smith'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8194994926452637,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of pets for each student who has any pet and student id.",
      "gold_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
      "generated_sql": "SELECT T1.StuID, COUNT(T2.PetID) AS num_pets\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.StuID\nHAVING COUNT(T2.PetID) > 0;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6111619472503662,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
      "gold_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
      "generated_sql": "SELECT T1.StuID, COUNT(T2.PetID) AS num_pets\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID = T2.StuID\nGROUP BY T1.StuID\nHAVING COUNT(T2.PetID) > 0;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3298931121826172,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and gender of student who have more than one pet.",
      "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Fname ,  T1.Sex \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nGROUP BY T1.StuID \nHAVING COUNT(T2.PetID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2048983573913574,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Fname ,  T1.Sex\nFROM Student AS T1\nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID\nGROUP BY T1.StuID\nHAVING COUNT(T2.PetID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40918469429016113,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the last name of the student who has a cat that is age 3.",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "generated_sql": "SELECT T2.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.pet_age  =  3;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.103332757949829,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "generated_sql": "SELECT T2.LName \nFROM Student AS T1 \nJOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID \nJOIN Pets AS T3 ON T2.PetID  =  T3.PetID \nWHERE T3.pet_age  =  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5611340999603271,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "Find the average age of students who do not have any pet .",
      "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "generated_sql": "SELECT AVG(T1.Age) \nFROM Student AS T1 \nWHERE T1.StuID NOT IN (SELECT T2.StuID FROM Has_Pet AS T2)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6955084800720215,
      "error": null
    },
    {
      "db_id": "pets_1",
      "question": "What is the average age for all students who do not own any pets ?",
      "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "generated_sql": "SELECT AVG(T1.Age) \nFROM Student AS T1 \nLEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID \nWHERE T2.StuID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2021055221557617,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many continents are there?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8351826667785645,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of continents?",
      "gold_sql": "SELECT count(*) FROM CONTINENTS;",
      "generated_sql": "SELECT COUNT(*) FROM continents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2921285629272461,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "generated_sql": "SELECT T1.ContId ,  T1.Continent ,  COUNT(T2.CountryId) AS num_countries\nFROM continents AS T1\nJOIN countries AS T2 ON T1.ContId  =  T2.Continent\nGROUP BY T1.ContId ,  T1.Continent",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.5492298603057861,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "For each continent, list its id, name, and how many countries it has?",
      "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "generated_sql": "SELECT T1.ContId ,  T1.Continent ,  COUNT(T2.CountryId) AS num_countries\nFROM continents AS T1 JOIN countries AS T2 ON T1.ContId  =  T2.Continent\nGROUP BY T1.ContId ,  T1.Continent",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4069688320159912,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many countries are listed?",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "generated_sql": "SELECT COUNT(*) FROM countries",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4072864055633545,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many countries exist?",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "generated_sql": "SELECT COUNT(*) FROM countries",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6640417575836182,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT T2.FullName ,  T2.Id ,  COUNT(T1.Model) \nFROM model_list AS T1 \nJOIN car_makers AS T2 ON T1.Maker  =  T2.Id \nGROUP BY T2.FullName ,  T2.Id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3502674102783203,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "generated_sql": "SELECT T1.Id, T1.FullName, COUNT(T2.Model) \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id = T2.Maker \nGROUP BY T1.Id, T1.FullName",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5079967975616455,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which model of the car has the minimum horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "generated_sql": "SELECT T3.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN cars_data AS T3 ON T2.Maker  =  T3.Id \nWHERE T3.Horsepower  =  (SELECT MIN(Horsepower) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5243916511535645,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "generated_sql": "SELECT T3.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN cars_data AS T3 ON T2.Maker  =  T3.Id \nORDER BY T3.Horsepower ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.50746750831604,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Find the model of the car whose weight is below the average weight.",
      "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "generated_sql": "SELECT T3.Model \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.MakeId = T3.ModelId \nWHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4106416702270508,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the model for the car with a weight smaller than the average?",
      "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "generated_sql": "SELECT T3.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN cars_data AS T3 ON T2.Maker  =  T3.Id \nWHERE T3.Weight  <  ( SELECT AVG(Weight) FROM cars_data )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.30747103691101074,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "generated_sql": "SELECT T2.Maker \nFROM car_names AS T1 \nJOIN car_makers AS T2 ON T1.MakeId  =  T2.Id \nJOIN cars_data AS T3 ON T3.Id  =  T1.MakeId \nWHERE T3.Year  =  1970",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5080242156982422,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the name of the different car makers who produced a car in 1970?",
      "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "generated_sql": "SELECT DISTINCT T2.Maker \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.Model = T2.Model \nJOIN car_makers AS T3 ON T2.Maker = T3.Id \nWHERE T1.Year = 1970",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.40399909019470215,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Find the make and production time of the cars that were produced in the earliest year?",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "generated_sql": "SELECT T3.Make ,  T3.Model ,  T1.Year FROM car_names AS T3 JOIN cars_data AS T1 ON T3.MakeId  =  T1.Id JOIN car_makers AS T2 ON T2.Id  =  T3.Maker WHERE T1.Year  =  ( SELECT MIN(T1.Year) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId JOIN car_makers AS T3 ON T3.Id  =  T2.Maker WHERE T3.Country  =  ( SELECT T2.CountryId FROM countries AS T1 JOIN continents AS T2 ON T1.Continent  =  T2.ContId WHERE T2.Continent  =  'america' ) )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5939180850982666,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the maker of the carr produced in the earliest year and what year was it?",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "generated_sql": "SELECT T3.Maker ,  T4.Year \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN car_makers AS T3 ON T2.Maker  =  T3.Id \nJOIN cars_data AS T4 ON T1.MakeId  =  T4.Id \nWHERE T4.Year  =  (SELECT MIN(T4.Year) FROM cars_data AS T4)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.534888505935669,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which distinct car models are the produced after 1980?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN cars_data AS T3 ON T2.Maker  =  T3.Id \nWHERE T3.Year  >  1980",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.410738468170166,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the different models for the cards produced after 1980?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId = T2.ModelId \nJOIN car_makers AS T3 ON T2.Maker = T3.Id \nWHERE T3.Country = (SELECT CountryId FROM countries WHERE Continent = 'america') \nAND T1.Year > 1980",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5102770328521729,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many car makers are there in each continents? List the continent name and the count.",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "generated_sql": "SELECT T1.Continent ,  COUNT(T3.Maker) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId  =  T2.Continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3377070426940918,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the name of each continent and how many car makers are there in each one?",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "generated_sql": "SELECT T1.Continent ,  COUNT(T3.Maker) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId  =  T2.Continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5798389911651611,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which of the countries has the most car makers? List the country name.",
      "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T2.CountryName \nFROM car_makers AS T1 \nJOIN countries AS T2 ON T1.Country  =  T2.CountryId \nGROUP BY T2.CountryName \nORDER BY COUNT(T1.Id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7176942825317383,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the name of the country with the most car makers?",
      "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T3.CountryName \nFROM car_makers AS T1 \nJOIN countries AS T2 ON T1.Country  =  T2.CountryId \nJOIN continents AS T3 ON T2.Continent  =  T3.ContId \nGROUP BY T3.CountryName \nORDER BY COUNT(T1.Id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.44086766242980957,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
      "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
      "generated_sql": "SELECT COUNT(*) ,  T2.FullName \nFROM car_names AS T1 \nJOIN car_makers AS T2 ON T1.MakeId  =  T2.Id \nGROUP BY T2.FullName",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3946342468261719,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
      "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
      "generated_sql": "SELECT T2.Maker ,  T2.FullName ,  COUNT(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.Maker ,  T2.FullName",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6947507858276367,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
      "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "generated_sql": "SELECT T4.Accelerate \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.Model  =  T2.Model \nJOIN car_makers AS T3 ON T2.Maker  =  T3.Id \nJOIN cars_data AS T4 ON T1.MakeId  =  T4.Id \nWHERE T3.Maker  =  \"amc hornet sportabout (sw)\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9259514808654785,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
      "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "generated_sql": "SELECT T4.Accelerate \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.Model = T2.Model \nJOIN car_makers AS T3 ON T2.Maker = T3.Id \nJOIN cars_data AS T4 ON T3.Id = T4.Id \nWHERE T1.Make = 'amc hornet sportabout (sw)';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5966920852661133,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many car makers are there in france?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'france'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.555718183517456,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of makers of care in France?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'france'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5067028999328613,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many car models are produced in the usa?",
      "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers \nJOIN countries ON car_makers.Country = countries.CountryId \nJOIN continents ON countries.Continent = continents.ContId \nWHERE continents.Continent = 'america'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5053894519805908,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the count of the car models produced in the United States?",
      "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_names \nJOIN model_list ON car_names.MakeId = model_list.ModelId \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN countries ON car_makers.Country = countries.CountryId \nJOIN continents ON countries.Continent = continents.ContId \nWHERE continents.Continent = 'america'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5351927280426025,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
      "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "generated_sql": "SELECT AVG(T2.MPG) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3842649459838867,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
      "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "generated_sql": "SELECT AVG(T2.MPG) \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId = T2.Id \nWHERE T2.Cylinders = 4",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8625195026397705,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
      "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "generated_sql": "SELECT MIN(T3.Weight) \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId = T2.Id \nJOIN model_list AS T3 ON T1.MakeId = T3.ModelId \nWHERE T3.Cylinders = 8 AND T2.Year = 1974",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.46781444549560547,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
      "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "generated_sql": "SELECT MIN(T3.Weight) \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId = T2.Id \nJOIN model_list AS T3 ON T1.MakeId = T3.ModelId \nWHERE T2.Cylinders = 8 AND T2.Year = 1974;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3583831787109375,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are all the makers and models?",
      "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "generated_sql": "SELECT T1.Maker ,  T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5603034496307373,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the makers and models?",
      "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "generated_sql": "SELECT T2.Maker ,  T3.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.Maker \nJOIN car_makers AS T3 ON T2.Maker  =  T3.Id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.9438891410827637,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the countries having at least one car maker? List name and id.",
      "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "generated_sql": "SELECT DISTINCT T1.CountryId ,  T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nWHERE T2.Maker IS NOT NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3884127140045166,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the names and ids of all countries with at least one car maker?",
      "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "generated_sql": "SELECT T1.CountryName ,  T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country WHERE T2.Maker IS NOT NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4266037940979004,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of the cars with horsepower more than 150?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Horsepower > 150",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35890769958496094,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with a horsepower greater than 150?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Horsepower > 150",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.25496578216552734,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight of cars each year?",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "generated_sql": "SELECT AVG(T3.Weight) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id JOIN model_list AS T3 ON T1.MakeId  =  T3.ModelId GROUP BY T3.Year",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4072551727294922,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight and year for each year?",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "generated_sql": "SELECT AVG(T1.Weight), T1.Year \nFROM cars_data AS T1 \nGROUP BY T1.Year",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7543864250183105,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which countries in europe have at least 3 car manufacturers?",
      "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "generated_sql": "SELECT T2.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nGROUP BY T2.Country \nHAVING COUNT(T2.Id)  >=  3 \nAND T1.Continent  =  2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3030848503112793,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the names of all European countries with at least 3 manufacturers?",
      "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "generated_sql": "SELECT T2.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nGROUP BY T2.CountryName \nHAVING COUNT(T2.Id)  >=  3 \nJOIN continents AS T3 ON T1.Continent  =  T3.ContId \nWHERE T3.Continent  =  \"europe\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.34745121002197266,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T3.Horsepower, T3.Make \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.Model = T2.Model \nJOIN cars_data AS T3 ON T1.MakeId = T3.Id \nWHERE T2.Maker = 3 AND T3.Cylinders = 3 \nORDER BY T3.Horsepower DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5364811420440674,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T3.Horsepower, T4.Make \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T3.Cylinders = 3 \nORDER BY T1.Horsepower DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5822365283966064,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Model \nFROM model_list AS T1 \nJOIN cars_data AS T2 ON T1.ModelId  =  T2.Id \nWHERE T2.MPG  =  (SELECT MAX(MPG) FROM cars_data);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33255624771118164,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the car model with the highest mpg ?",
      "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
      "generated_sql": "SELECT T2.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN cars_data AS T3 ON T1.MakeId  =  T3.Id \nWHERE T3.MPG  =  ( SELECT MAX(MPG) FROM cars_data )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5009188652038574,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average horsepower of the cars before 1980?",
      "gold_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
      "generated_sql": "SELECT AVG(T3.Horsepower) \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId = T2.Id \nJOIN model_list AS T3 ON T1.MakeId = T3.ModelId \nWHERE T2.Year < 1980;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.9160623550415039,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average horsepower for all cars produced before 1980 ?",
      "gold_sql": "select avg(horsepower) from cars_data where year  <  1980;",
      "generated_sql": "SELECT AVG(CAST(Horsepower AS REAL)) FROM cars_data WHERE Year < 1980",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.42807674407958984,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl of the cars of model volvo?",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "generated_sql": "SELECT AVG(T2.Edispl) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id JOIN model_list AS T3 ON T1.Model  =  T3.Model WHERE T3.Maker  =  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30473971366882324,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl for all volvos?",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "generated_sql": "SELECT AVG(T3.Edispl) \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId = T2.Id \nJOIN model_list AS T3 ON T1.MakeId = T3.ModelId \nWHERE T3.Maker = 'volvo'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4710092544555664,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum accelerate for different number of cylinders?",
      "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "generated_sql": "SELECT DISTINCT T2.Cylinders \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T1.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.501187801361084,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum accelerate for all the different cylinders?",
      "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "generated_sql": "SELECT MAX(T2.Accelerate) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id GROUP BY T2.Cylinders",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.27579379081726074,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which model has the most version(make) of cars?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T2.Maker ,  T3.Model ,  T1.ModelId FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id JOIN car_names AS T3 ON T3.MakeId  =  T1.ModelId GROUP BY T2.Maker ORDER BY COUNT(T3.Model) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6367082595825195,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What model has the most different versions?",
      "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T2.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nGROUP BY T2.Model \nORDER BY COUNT(T2.ModelId) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4645979404449463,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many cars have more than 4 cylinders?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30558037757873535,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with more than 4 cylinders?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders  >  4",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40848803520202637,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "how many cars were produced in 1980?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE YEAR = 1980;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3945581912994385,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "In 1980, how many cars were made?",
      "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE YEAR = 1980;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2196061611175537,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many car models were produced by the maker with full name American Motor Company?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id = T2.Maker \nJOIN car_names AS T3 ON T2.ModelId = T3.MakeId \nWHERE T1.FullName = \"American Motor Company\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4591348171234131,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of car models created by the car maker American Motor Company?",
      "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "generated_sql": "SELECT COUNT(*) \nFROM car_names \nJOIN model_list ON car_names.MakeId = model_list.ModelId \nJOIN car_makers ON model_list.Maker = car_makers.Id \nWHERE car_makers.FullName = 'American Motor Company'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3426544666290283,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which makers designed more than 3 car models? List full name and the id.",
      "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SELECT T1.FullName ,  T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING COUNT(*)  >  3",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5249514579772949,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the names and ids of all makers with more than 3 models?",
      "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SELECT T1.Id ,  T1.Maker \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id  =  T2.Maker \nGROUP BY T1.Id ,  T1.Maker \nHAVING COUNT(*)  >  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5023760795593262,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
      "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "generated_sql": "SELECT DISTINCT T2.Model ,  T1.Maker \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id  =  T2.Maker \nWHERE T1.FullName  =  \"General Motors\" OR T1.Weight  >  3500;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.35717082023620605,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
      "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId = T2.ModelId \nWHERE T2.Maker = 'General Motors' \nOR T1.Weight > 3500",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3904438018798828,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
      "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
      "generated_sql": "SELECT T4.Year \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId  =  T2.Id \nJOIN model_list AS T3 ON T1.Model  =  T3.Model \nWHERE T2.Weight  >=  3000 AND T2.Weight  <=  4000",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.099942684173584,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
      "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
      "generated_sql": "SELECT DISTINCT T4.Year \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId  =  T2.Id \nJOIN car_makers AS T3 ON T1.MakeId  =  T3.Id \nWHERE T2.Weight  <  4000 AND T2.Weight  >  3000",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6133019924163818,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the horsepower of the car with the largest accelerate?",
      "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "generated_sql": "SELECT T2.Horsepower \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nWHERE T1.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5115065574645996,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the horsepower of the car with the greatest accelerate?",
      "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "generated_sql": "SELECT T2.Horsepower \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nWHERE T1.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6128003597259521,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
      "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "generated_sql": "SELECT T2.Cylinders \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId  =  T2.Id \nJOIN model_list AS T3 ON T1.Model  =  T3.Model \nJOIN car_makers AS T4 ON T3.Maker  =  T4.Id \nWHERE T4.Maker  =  \"volvo\" \nORDER BY T2.Accelerate ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.564112901687622,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
      "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "generated_sql": "SELECT T3.Cylinders \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.Model = T2.Model \nJOIN cars_data AS T3 ON T1.MakeId = T3.Id \nJOIN car_makers AS T4 ON T2.Maker = T4.Id \nWHERE T4.Maker = 'volvo' \nORDER BY T3.Accelerate ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6083905696868896,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5027182102203369,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.501845121383667,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many countries has more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(DISTINCT T2.CountryName) \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nGROUP BY T2.Country \nHAVING COUNT(T2.Id)  >  2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.298948049545288,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of countries with more than 2 car makers ?",
      "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "generated_sql": "SELECT COUNT(T1.CountryId) \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nGROUP BY T1.CountryId \nHAVING COUNT(T2.Id)  >  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6881320476531982,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "How many cars has over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT T1.Id FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Cylinders  >  6",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30391645431518555,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the number of carsw ith over 6 cylinders?",
      "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "generated_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Cylinders > 6",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30631422996520996,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T3.Model\nFROM car_names AS T1\nJOIN model_list AS T2 ON T1.MakeId = T2.ModelId\nJOIN cars_data AS T3 ON T2.Maker = T3.Id\nWHERE T3.Cylinders = 4\nORDER BY T3.Horsepower DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.4353115558624268,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "generated_sql": "SELECT T3.Model, T3.Make, T4.Horsepower \nFROM car_names AS T1 \nJOIN model_list AS T2 ON T1.MakeId  =  T2.ModelId \nJOIN cars_data AS T3 ON T2.Maker  =  T3.Id \nJOIN car_makers AS T4 ON T2.Maker  =  T4.Id \nWHERE T3.Cylinders  =  4 \nORDER BY T3.Horsepower DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.47295165061950684,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
      "gold_sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
      "generated_sql": "SELECT T1.MakeId ,  T1.Make \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId  =  T2.Id \nWHERE T2.Horsepower  >  (SELECT MIN(Horsepower) FROM cars_data) \nAND T2.Cylinders  <=  3",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.43496155738830566,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
      "gold_sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
      "generated_sql": "SELECT T3.MakeId ,  T3.Make \nFROM car_names AS T1 \nJOIN cars_data AS T2 ON T1.MakeId  =  T2.Id \nJOIN car_makers AS T3 ON T3.Id  =  T1.MakeId \nWHERE T2.Horsepower  !=  (SELECT MIN(Horsepower) FROM cars_data) \nAND T2.Cylinders  <  4",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6227028369903564,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
      "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "generated_sql": "SELECT MAX(T1.MPG) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'chevrolet chevelle malibu' OR T1.Year < 1980 OR T1.Cylinders = 8",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5098514556884766,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
      "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "generated_sql": "SELECT MAX(T1.MPG) \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T4.Country = (SELECT CountryId FROM countries WHERE Continent = 'america') \nOR T1.Year < 1980 \nAND T1.Cylinders = 8;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8621201515197754,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "generated_sql": "SELECT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.MakeId = T3.ModelId \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T1.Weight < 3500 AND T4.FullName != 'Ford Motor Company'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.38965344429016113,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "generated_sql": "SELECT DISTINCT T2.Model \nFROM cars_data AS T1 \nJOIN car_names AS T2 ON T1.Id = T2.MakeId \nJOIN model_list AS T3 ON T2.Model = T3.Model \nJOIN car_makers AS T4 ON T3.Maker = T4.Id \nWHERE T1.Weight < 3500 AND T4.Maker != 'Ford Motor Company'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4352865219116211,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the name of the countries where there is not a single car maker?",
      "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "car_1",
      "question": "What are the names of the countries with no car makers?",
      "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "car_1",
      "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
      "gold_sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
      "generated_sql": "SELECT T1.Id ,  T1.Maker \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id  =  T2.Maker \nGROUP BY T1.Id ,  T1.Maker \nHAVING COUNT(T2.Model)  >=  2 \nAND COUNT(DISTINCT T1.Id)  >  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5627124309539795,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
      "gold_sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "car_1",
      "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
      "gold_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
      "generated_sql": "SELECT DISTINCT T1.CountryId ,  T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nWHERE T2.Id IN (\n  SELECT T3.Maker \n  FROM model_list AS T3 \n  JOIN car_names AS T4 ON T3.ModelId  =  T4.MakeId \n  WHERE T4.Model  =  'fiat'\n)\nOR T1.CountryId IN (\n  SELECT T2.CountryId \n  FROM countries AS T2 \n  JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country \n  GROUP BY T2.CountryId \n  HAVING COUNT(T3.Id)  >  3\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6120421886444092,
      "error": null
    },
    {
      "db_id": "car_1",
      "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
      "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
      "generated_sql": "SELECT DISTINCT T1.CountryId ,  T1.CountryName \nFROM countries AS T1 \nJOIN car_makers AS T2 ON T1.CountryId  =  T2.Country \nWHERE T2.Maker IN (SELECT T3.Maker FROM model_list AS T3 JOIN car_names AS T4 ON T3.ModelId  =  T4.MakeId WHERE T4.Model  =  \"fiat\") \nOR (SELECT COUNT(*) FROM car_makers AS T5 WHERE T5.Country  =  T1.CountryId)  >  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5256731510162354,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which country does Airline \"JetBlue Airways\" belong to?",
      "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Country \nFROM airlines AS T1 \nWHERE T1.Airline = \"JetBlue Airways\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39605140686035156,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What country is Jetblue Airways affiliated with?",
      "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Country \nFROM airlines AS T1 \nWHERE T1.Airline = \"Jetblue Airways\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4059584140777588,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
      "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Abbreviation \nFROM airlines AS T1 \nWHERE T1.Airline = \"JetBlue Airways\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41361379623413086,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which abbreviation corresponds to Jetblue Airways?",
      "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "generated_sql": "SELECT T1.Abbreviation \nFROM airlines AS T1 \nWHERE T1.Airline = \"Jetblue Airways\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4044833183288574,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "List all airline names and their abbreviations in \"USA\".",
      "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT T1.Airline, T1.Abbreviation\nFROM airlines AS T1\nWHERE T1.Country = \"USA\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2776217460632324,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are the airline names and abbreviations for airlines in the USA?",
      "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT T1.Airline ,  T1.Abbreviation \nFROM airlines AS T1 \nWHERE T1.Country  =  \"USA\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27740049362182617,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "List the airport code and name in the city of Anthony.",
      "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "generated_sql": "SELECT T1.AirportCode ,  T1.AirportName \nFROM airports AS T1 \nWHERE T1.City  =  \"Anthony\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5678291320800781,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the airport code and airport name corresonding to the city Anthony.",
      "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "generated_sql": "SELECT T2.AirportCode ,  T2.AirportName \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nWHERE T1.City  =  \"Anthony\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.7153615951538086,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many airlines do we have?",
      "gold_sql": "SELECT count(*) FROM AIRLINES",
      "generated_sql": "SELECT COUNT(*) FROM airlines",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.27558183670043945,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the total number of airlines?",
      "gold_sql": "SELECT count(*) FROM AIRLINES",
      "generated_sql": "SELECT COUNT(*) FROM airlines",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4372432231903076,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many airports do we have?",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.4344902038574219,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of  airports.",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "generated_sql": "SELECT COUNT(*) FROM airports",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6136889457702637,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights do we have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) FROM flights",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 6.742432355880737,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "generated_sql": "SELECT COUNT(*) \nFROM flights;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 5.4963719844818115,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which airline has abbreviation 'UAL'?",
      "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nWHERE T1.Abbreviation  =  'UAL'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5560874938964844,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the airline with abbreviation 'UAL'.",
      "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "generated_sql": "SELECT Airline \nFROM airlines \nWHERE Abbreviation = 'UAL'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5072677135467529,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many airlines are from USA?",
      "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT COUNT(*) \nFROM airlines \nWHERE Country = 'USA'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32532405853271484,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of airlines in the USA.",
      "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "generated_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.49586057662963867,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which city and country is the Alton airport at?",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT T2.City ,  T2.Country \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nWHERE T2.Airline  =  (SELECT uid FROM airlines WHERE Airline  =  \"Alton\")",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6696434020996094,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the city and country for the Alton airport.",
      "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "generated_sql": "SELECT T2.City ,  T2.Country \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nWHERE T1.AirportName  =  \"Alton\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.35199689865112305,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the airport name for airport 'AKO'?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "generated_sql": "SELECT T1.AirportName \nFROM airports AS T1 \nWHERE T1.AirportCode = 'AKO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9867537021636963,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the name of the airport with code 'AKO'.",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "generated_sql": "SELECT T1.AirportName \nFROM airports AS T1 \nWHERE T1.AirportCode = 'AKO';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4124157428741455,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are airport names at City 'Aberdeen'?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "generated_sql": "SELECT T2.AirportName \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nWHERE T1.City  =  \"Aberdeen\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6464412212371826,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are the names of airports in Aberdeen?",
      "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "generated_sql": "SELECT T1.AirportName \nFROM airports AS T1 \nWHERE T1.City  =  \"Aberdeen\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30429840087890625,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from 'APG'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37816810607910156,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights departing from 'APG'.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33719897270202637,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights have destination ATO?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3067338466644287,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights into ATO.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3139994144439697,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from City Aberdeen?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode \nJOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode \nWHERE source_airport.City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4380776882171631,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights departing from Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26079869270324707,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights arriving in Aberdeen city?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports AS dest ON flights.DestAirport = dest.AirportCode \nWHERE dest.City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5188384056091309,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights arriving in Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports AS dest ON flights.DestAirport = dest.AirportCode \nWHERE dest.City = 'Aberdeen'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8414819240570068,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports AS src ON flights.SourceAirport = src.AirportCode \nJOIN airports AS dest ON flights.DestAirport = dest.AirportCode \nWHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6057946681976318,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights fly from Aberdeen to Ashley?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = \"APG\" AND DestAirport = \"ASY\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5511722564697266,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights does airline 'JetBlue Airways' have?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'JetBlue Airways'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3176698684692383,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the number of Jetblue Airways flights.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "generated_sql": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"Jetblue Airways\")",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42055201530456543,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.DestAirport = 'ASY'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8330159187316895,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of United Airlines flights arriving in ASY Airport.",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = \"United Airlines\" AND airports.AirportCode = \"ASY\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5248019695281982,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.SourceAirport = 'AHD';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7096614837646484,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of United Airlines flights leaving from AHD Airport.",
      "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.SourceAirport = 'AHD';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4081282615661621,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many United Airlines flights go to City 'Aberdeen'?",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.DestAirport = 'APG';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3066539764404297,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = \"United Airlines\" \nAND flights.DestAirport = \"APG\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30568480491638184,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which city has most number of arriving flights?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nGROUP BY T1.City \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5193090438842773,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which city has the most frequent destination airport?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nGROUP BY T1.City \nORDER BY COUNT(T2.DestAirport) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.911792516708374,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which city has most number of departing flights?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nGROUP BY T1.City \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30736613273620605,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which city is the most frequent source airport?",
      "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.City \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.City \nORDER BY COUNT(T1.AirportCode) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4063863754272461,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the code of airport that has the highest number of flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30762410163879395,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the airport code of the airport with the most flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3052101135253906,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the code of airport that has fewest number of flights?",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3507041931152344,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the code of the airport with the least flights.",
      "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.AirportCode \nFROM airports AS T1 \nJOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport \nGROUP BY T1.AirportCode \nORDER BY COUNT(T2.FlightNo) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4676947593688965,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which airline has most number of flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline  =  T2.uid GROUP BY T1.Airline ORDER BY COUNT(T1.FlightNo) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3050527572631836,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What airline serves the most flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nORDER BY COUNT(T2.FlightNo) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3096127510070801,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
      "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.Abbreviation ,  T1.Country \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid  =  T2.Airline \nGROUP BY T1.Abbreviation ,  T1.Country \nORDER BY COUNT(T2.FlightNo) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.36435818672180176,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
      "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "generated_sql": "SELECT T1.Abbreviation, T1.Country \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Abbreviation, T1.Country \nORDER BY COUNT(T2.FlightNo) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3125021457672119,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have some flight departing from airport 'AHD'?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid  =  T2.Airline \nWHERE T2.SourceAirport  =  'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3779163360595703,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have a flight with source airport AHD?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid  =  T2.Airline \nWHERE T2.SourceAirport  =  \"AHD\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6117980480194092,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have flights arriving at airport 'AHD'?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nWHERE T2.DestAirport = 'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37068700790405273,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have a flight with destination airport AHD?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "generated_sql": "SELECT DISTINCT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nWHERE T2.DestAirport = 'AHD'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41087794303894043,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have departing flights from both APG and CVO airports?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have departures from CVO but not from APG airports?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have at least 10 flights.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "generated_sql": "SELECT DISTINCT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo) >= 10;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4068021774291992,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have at least 10 flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid = T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo) >= 10",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4080698490142822,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Find all airlines that have fewer than 200 flights.",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid  =  T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo)  <  200",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4585425853729248,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which airlines have less than 200 flights?",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "generated_sql": "SELECT T1.Airline \nFROM airlines AS T1 \nJOIN flights AS T2 ON T1.uid  =  T2.Airline \nGROUP BY T1.Airline \nHAVING COUNT(T2.FlightNo)  <  200",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6657149791717529,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of Airline \"United Airlines\"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airlines AS T2 ON T1.Airline = T2.uid \nWHERE T2.Airline = \"United Airlines\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0279614925384521,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Which flight numbers correspond to United Airlines flights?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airlines AS T2 ON T1.Airline = T2.uid \nWHERE T2.Airline = 'United Airlines'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30136942863464355,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights departing from Airport \"APG\"?",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode \nWHERE T2.AirportName  =  \"APG\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4742085933685303,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights leaving from APG.",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nWHERE T1.SourceAirport = 'APG'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34166622161865234,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode \nWHERE T2.AirportName = \"APG\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33321189880371094,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights landing at APG.",
      "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "generated_sql": "SELECT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode \nWHERE T2.AirportCode  =  \"APG\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5229671001434326,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT DISTINCT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode \nWHERE T2.City  =  \"Aberdeen\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47242021560668945,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights leaving from Aberdeen.",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT DISTINCT T1.FlightNo\nFROM flights AS T1\nJOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode\nWHERE T2.City = 'Aberdeen';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41208791732788086,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT T2.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode \nWHERE T2.City  =  \"Aberdeen\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.8781287670135498,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights arriving in Aberdeen.",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "generated_sql": "SELECT DISTINCT T1.FlightNo \nFROM flights AS T1 \nJOIN airports AS T2 ON T1.SourceAirport  =  T2.AirportCode \nWHERE T2.City  =  \"Aberdeen\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2659094333648682,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports AS src ON flights.SourceAirport = src.AirportCode \nJOIN airports AS dest ON flights.DestAirport = dest.AirportCode \nWHERE src.City IN ('Aberdeen', 'Abilene')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.383131742477417,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "How many flights land in Aberdeen or Abilene?",
      "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "generated_sql": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport IN ('APG', 'ABI')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7424657344818115,
      "error": null
    },
    {
      "db_id": "flight_2",
      "question": "Find the name of airports which do not have any flight in and out.",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "flight_2",
      "question": "Which airports do not have departing or arriving flights?",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many employees are there?",
      "gold_sql": "SELECT count(*) FROM employee",
      "generated_sql": "SELECT COUNT(*) FROM employee",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4260869026184082,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of employees",
      "gold_sql": "SELECT count(*) FROM employee",
      "generated_sql": "SELECT COUNT(*) FROM employee",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5949015617370605,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Sort employee names by their age in ascending order.",
      "gold_sql": "SELECT name FROM employee ORDER BY age",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nORDER BY T1.Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8179967403411865,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "List the names of employees and sort in ascending order of age.",
      "gold_sql": "SELECT name FROM employee ORDER BY age",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nORDER BY T1.Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6129374504089355,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is the number of employees from each city?",
      "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "generated_sql": "SELECT COUNT(T1.Employee_ID), T1.City \nFROM employee AS T1 \nGROUP BY T1.City",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34455180168151855,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of employees for each city.",
      "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "generated_sql": "SELECT T1.City, COUNT(*) as Employee_Count\nFROM employee AS T1\nGROUP BY T1.City;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36987829208374023,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which cities do more than one employee under age 30 come from?",
      "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.City \nFROM employee AS T1 \nJOIN hiring AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nGROUP BY T1.City \nHAVING COUNT(T1.Employee_ID)  >  1 \nAND T1.Age  <  30",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8201513290405273,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the cities that have more than one employee under age 30.",
      "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "generated_sql": "SELECT DISTINCT T1.City \nFROM employee AS T1 \nJOIN hiring AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nWHERE T1.Age  <  30 \nGROUP BY T1.City \nHAVING COUNT(T1.Employee_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.48474812507629395,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the number of shops in each location.",
      "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "generated_sql": "SELECT Location, COUNT(*) \nFROM shop \nGROUP BY Location;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44420623779296875,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many shops are there in each location?",
      "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "generated_sql": "SELECT shop.Location, COUNT(*) as Number_of_shops\nFROM shop\nGROUP BY shop.Location",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.45390748977661133,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the manager name and district of the shop whose number of products is the largest.",
      "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "generated_sql": "SELECT T1.Manager_name ,  T1.District \nFROM shop AS T1 \nWHERE T1.Number_products  =  (SELECT MAX(Number_products) FROM shop)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39353203773498535,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the manager name and district of the shop that sells the largest number of products?",
      "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "generated_sql": "SELECT T1.Manager_name ,  T1.District \nFROM shop AS T1 \nWHERE T1.Number_products  =  (SELECT MAX(Number_products) FROM shop)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8158814907073975,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "find the minimum and maximum number of products of all stores.",
      "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "generated_sql": "SELECT MIN(T2.Number_products) ,  MAX(T2.Number_products) FROM employee AS T1 JOIN shop AS T2 ON T1.Employee_ID  =  T2.Manager_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6587889194488525,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the minimum and maximum number of products across all the shops?",
      "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "generated_sql": "SELECT MIN(T1.Number_products), MAX(T1.Number_products) \nFROM shop AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5256338119506836,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Return the name, location and district of all shops in descending order of number of products.",
      "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "generated_sql": "SELECT T1.Name, T1.Location, T1.District \nFROM shop AS T1 \nORDER BY T1.Number_products DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3065652847290039,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
      "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "generated_sql": "SELECT T1.Name, T1.Location, T1.District \nFROM shop AS T1 \nORDER BY T1.Number_products DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5063672065734863,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the names of stores whose number products is more than the average number of products.",
      "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "generated_sql": "SELECT T1.Name \nFROM shop AS T1 \nJOIN employee AS T2 \nON T1.Manager_name  =  T2.Name \nWHERE T1.Number_products  >  (SELECT AVG(Number_products) FROM shop)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.28813934326171875,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shops' number products is above the average? Give me the shop names.",
      "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "generated_sql": "SELECT T1.Name \nFROM shop AS T1 \nJOIN (SELECT Shop_ID, AVG(Number_products) AS avg_products FROM shop GROUP BY Shop_ID) AS T2 \nON T1.Shop_ID = T2.Shop_ID \nWHERE T2.avg_products < T1.Number_products",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.665961503982544,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "find the name of employee who was awarded the most times in the evaluation.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nGROUP BY T1.Name \nORDER BY SUM(T2.Bonus) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7844688892364502,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which employee received the most awards in evaluations? Give me the employee name.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Employee_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7155733108520508,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the employee who got the highest one time bonus.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nJOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nWHERE T2.Bonus  =  ( SELECT MAX(Bonus) FROM evaluation )",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6791799068450928,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which employee received the biggest bonus? Give me the employee name.",
      "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29026055335998535,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the names of employees who never won any award in the evaluation.",
      "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nLEFT JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nWHERE T2.Employee_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7670505046844482,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What are the names of the employees who never received any evaluation?",
      "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "generated_sql": "SELECT T1.Name \nFROM employee AS T1 \nLEFT JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID \nWHERE T2.Employee_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4092233180999756,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is the name of the shop that is hiring the largest number of employees?",
      "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID \nJOIN employee AS T3 ON T2.Employee_ID  =  T3.Employee_ID \nGROUP BY T2.Name \nORDER BY COUNT(T2.Shop_ID) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.46819233894348145,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shop has the most employees? Give me the shop name.",
      "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID \nGROUP BY T2.Name \nORDER BY COUNT(T2.Shop_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.36202001571655273,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the name of the shops that do not hire any employee.",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT T1.Name \nFROM shop AS T1 \nLEFT JOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID \nWHERE T2.Employee_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3578672409057617,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which shops run with no employees? Find the shop names",
      "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "generated_sql": "SELECT T2.Name \nFROM shop AS T1 \nJOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID \nWHERE T2.Employee_ID IS NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.28301525115966797,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the number of employees hired in each shop; show the shop name as well.",
      "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "generated_sql": "SELECT T1.Name ,  COUNT(T2.Shop_ID) AS number_of_employees\nFROM employee AS T1\nJOIN hiring AS T2 ON T1.Employee_ID  =  T2.Employee_ID\nJOIN shop AS T3 ON T2.Shop_ID  =  T3.Shop_ID\nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5557277202606201,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "For each shop, return the number of employees working there and the name of the shop.",
      "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "generated_sql": "SELECT T1.Name ,  COUNT(T2.Employee_ID) AS num_employees\nFROM shop AS T1\nJOIN hiring AS T2 ON T1.Shop_ID  =  T2.Shop_ID\nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.45201754570007324,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is total bonus given in all evaluations?",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "generated_sql": "SELECT SUM(T1.Bonus) FROM evaluation AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3780519962310791,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the total amount of bonus given in all the evaluations.",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "generated_sql": "SELECT SUM(T1.Bonus) FROM evaluation AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5098049640655518,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Give me all the information about hiring.",
      "gold_sql": "SELECT * FROM hiring",
      "generated_sql": "SELECT \n    h.Shop_ID, \n    e.Name, \n    h.Start_from, \n    h.Is_full_time, \n    e.Age, \n    e.City\nFROM \n    hiring AS h\nJOIN \n    employee AS e ON h.Employee_ID = e.Employee_ID\nORDER BY \n    h.Shop_ID, \n    h.Start_from;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4068737030029297,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "What is all the information about hiring?",
      "gold_sql": "SELECT * FROM hiring",
      "generated_sql": "SELECT \n  T1.Employee_ID, \n  T1.Name, \n  T2.Shop_ID, \n  T2.Start_from, \n  T2.Is_full_time, \n  T3.Year_awarded, \n  T3.Bonus\nFROM \n  employee AS T1\n  JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID\n  JOIN evaluation AS T3 ON T1.Employee_ID = T3.Employee_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.37169909477233887,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "How many different store locations are there?",
      "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Shop_ID) FROM shop AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.549508810043335,
      "error": null
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Count the number of distinct store locations.",
      "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Location) FROM shop AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3033449649810791,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many documents do we have?",
      "gold_sql": "SELECT count(*) FROM Documents",
      "generated_sql": "SELECT COUNT(*) FROM Documents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3092973232269287,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of documents.",
      "gold_sql": "SELECT count(*) FROM Documents",
      "generated_sql": "SELECT COUNT(*) FROM Documents",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26162171363830566,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "List document IDs, document names, and document descriptions for all documents.",
      "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "generated_sql": "SELECT \n    D.Document_ID, \n    D.Document_Name, \n    D.Document_Description\nFROM \n    Documents D",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3711812496185303,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids, names, and descriptions for all documents?",
      "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "generated_sql": "SELECT T1.Document_ID ,  T1.Template_ID ,  T2.Template_Type_Code ,  T2.Template_Type_Description \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.41574716567993164,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document name and template id for document with description with the letter 'w' in it?",
      "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "generated_sql": "SELECT T2.Document_Name ,  T2.Template_ID \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nWHERE T1.Document_Description LIKE '%w%'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3069894313812256,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the names and template ids for documents that contain the letter w in their description.",
      "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "generated_sql": "SELECT T1.Document_Name ,  T1.Template_ID \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nWHERE T1.Document_Description LIKE '%w%'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7702784538269043,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
      "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "generated_sql": "SELECT T2.Template_ID ,  T2.Template_ID ,  T1.Document_Description \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nWHERE T1.Document_Name  =  \"Robbin CV\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.313443660736084,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
      "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "generated_sql": "SELECT \n    D.Document_ID,\n    T.Template_ID,\n    D.Document_Description\nFROM \n    Documents AS D\nJOIN \n    Templates AS T ON D.Template_ID = T.Template_ID\nWHERE \n    D.Document_Name = \"Robbin CV\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40454792976379395,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many different templates do all document use?",
      "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5109448432922363,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of different templates used for documents.",
      "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Template_ID) \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.43741846084594727,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many documents are using the template with type code 'PPT'?",
      "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'PPT'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30248498916625977,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of documents that use the PPT template type.",
      "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5787451267242432,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template ids and number of documents using each template.",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "generated_sql": "SELECT T1.Template_ID ,  COUNT(T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3859679698944092,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are all different template ids used for documents, and how many times were each of them used?",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "generated_sql": "SELECT DISTINCT T1.Template_ID ,  COUNT(T1.Template_ID) AS count \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID \nGROUP BY T1.Template_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6005563735961914,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the id and type code for the template used by the most documents?",
      "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_ID ,  T2.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nGROUP BY T1.Template_ID \nORDER BY COUNT(T1.Template_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7927751541137695,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id and type code of the template that is used for the greatest number of documents.",
      "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_ID ,  T2.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nGROUP BY T1.Template_ID \nORDER BY COUNT(T1.Template_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4445321559906006,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show ids for all templates that are used by more than one document.",
      "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID \nGROUP BY T1.Template_ID \nHAVING COUNT(T2.Document_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35120129585266113,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the template ids of any templates used in more than a single document?",
      "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID \nGROUP BY T1.Template_ID \nHAVING COUNT(T2.Document_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4637637138366699,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show ids for all templates not used by any document.",
      "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids for templates that are not used in any documents?",
      "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many templates do we have?",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT COUNT(*) FROM Templates",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.501629114151001,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates.",
      "gold_sql": "SELECT count(*) FROM Templates",
      "generated_sql": "SELECT COUNT(*) FROM Templates",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1205227375030518,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show template ids, version numbers, and template type codes for all templates.",
      "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "generated_sql": "SELECT T1.Template_ID ,  T1.Version_Number ,  T2.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5204386711120605,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids, version numbers, and type codes for each template?",
      "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "generated_sql": "SELECT T1.Template_ID ,  T1.Version_Number ,  T2.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6783342361450195,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all distinct template type codes for all templates.",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29721856117248535,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes?",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "generated_sql": "SELECT DISTINCT Template_Type_Code \nFROM Ref_Template_Types",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26278233528137207,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of templates with template type code PP or PPT?",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T2.Template_Type_Code IN ('PP', 'PPT')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34032320976257324,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the ids of templates that have the code PP or PPT.",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T2.Template_Type_Code IN ('PP', 'PPT')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.5343575477600098,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many templates have template type code CV?",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4818849563598633,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of templates of the type CV.",
      "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.542090654373169,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the version number and template type code for the template with version number later than 5?",
      "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "generated_sql": "SELECT T1.Version_Number ,  T1.Template_Type_Code \nFROM Templates AS T1 \nWHERE T1.Version_Number  >  5",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4598839282989502,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
      "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "generated_sql": "SELECT T1.Version_Number, T1.Template_Type_Code \nFROM Templates AS T1 \nWHERE T1.Version_Number > 5;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.475538969039917,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and number of templates for each.",
      "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code ,  COUNT(T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0172955989837646,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes, and how many templates correspond to each?",
      "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code ,  COUNT(T1.Template_Type_Code) AS count \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.500807523727417,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code has most number of templates?",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T2.Template_ID) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5276474952697754,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the type code of the template type that the most templates belong to.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T1.Template_ID) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4322381019592285,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes with less than three templates.",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nHAVING COUNT(T2.Template_ID) < 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3395094871520996,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the codes of template types that have fewer than 3 templates?",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nHAVING COUNT(T2.Template_ID) < 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3803420066833496,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What the smallest version number and its template type code?",
      "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "generated_sql": "SELECT MIN(T1.Version_Number), T1.Template_Type_Code \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6624815464019775,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the lowest version number, along with its corresponding template type code.",
      "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "generated_sql": "SELECT T1.Version_Number, T1.Template_Type_Code \nFROM Templates AS T1 \nWHERE T1.Version_Number = (SELECT MIN(T2.Version_Number) FROM Templates AS T2)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5475025177001953,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code of the template used by document with the name \"Data base\"?",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "generated_sql": "SELECT T2.Template_Type_Code \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code \nWHERE T1.Document_Name  =  \"Data base\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.028599739074707,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type code of the template that is used by a document named Data base.",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "generated_sql": "SELECT T2.Template_Type_Code \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code \nWHERE T1.Document_Name  =  \"Data base\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6359844207763672,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document names using templates with template type code BK.",
      "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "generated_sql": "SELECT DISTINCT T2.Document_Name \nFROM Templates AS T1 \nJOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T1.Template_Type_Code  =  T3.Template_Type_Code \nWHERE T3.Template_Type_Code  =  \"BK\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4538702964782715,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the names of documents that use templates with the code BK?",
      "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "generated_sql": "SELECT DISTINCT T2.Document_Name \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code \nWHERE T3.Template_Type_Description  =  \"template with code BK\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.44987916946411133,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and the number of documents using each type.",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "generated_sql": "SELECT T1.Template_Type_Code ,  COUNT(T2.Document_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID  =  T3.Template_ID GROUP BY T1.Template_Type_Code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.46095776557922363,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes, and how many documents use each type?",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Code ,  COUNT(T2.Document_ID) \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nJOIN Documents AS T3 ON T2.Template_ID  =  T3.Template_ID \nGROUP BY T1.Template_Type_Code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.517723560333252,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code is used by most number of documents?",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Template_Type_Code \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code \nGROUP BY T2.Template_Type_Code \nORDER BY COUNT(T2.Template_Type_Code) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5944786071777344,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the code of the template type that is most commonly used in documents.",
      "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nGROUP BY T1.Template_Type_Code \nORDER BY COUNT(T2.Template_ID) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3443777561187744,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes that are not used by any document.",
      "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the codes of template types that are not used for any document?",
      "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and descriptions.",
      "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "generated_sql": "SELECT T1.Template_Type_Code ,  T1.Template_Type_Description \nFROM Ref_Template_Types AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7541582584381104,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the type codes and descriptions for all template types?",
      "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "generated_sql": "SELECT T1.Template_Type_Code ,  T1.Template_Type_Description \nFROM Ref_Template_Types AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5494003295898438,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type descriptions for template type code \"AD\".",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "generated_sql": "SELECT T1.Template_Type_Description \nFROM Ref_Template_Types AS T1 \nWHERE T1.Template_Type_Code = \"AD\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8544929027557373,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type description of the template type with the code AD.",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "generated_sql": "SELECT T2.Template_Type_Description \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T1.Template_Type_Code = 'AD';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2967326641082764,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code for template type description \"Book\".",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code \nWHERE T1.Template_Type_Description = \"Book\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.54575514793396,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the type code of the template type with the description \"Book\".",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "generated_sql": "SELECT T1.Template_Type_Code \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T1.Template_Type_Description  =  \"Book\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.46549201011657715,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the distinct template type descriptions for the templates ever used by any document?",
      "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "generated_sql": "SELECT DISTINCT T1.Template_Type_Description \nFROM Ref_Template_Types AS T1 \nJOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T2.Template_ID IN (SELECT Template_ID FROM Documents)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7753899097442627,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the different descriptions for templates that have been used in a document.",
      "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "generated_sql": "SELECT DISTINCT T2.Template_Type_Description \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T1.Template_ID IN (SELECT Template_ID FROM Documents)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5724105834960938,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the template ids with template type description \"Presentation\".",
      "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T2.Template_Type_Description  =  \"Presentation\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6236412525177002,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the ids corresponding to templates with the description 'Presentation'.",
      "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "generated_sql": "SELECT T1.Template_ID \nFROM Templates AS T1 \nJOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code \nWHERE T2.Template_Type_Description  =  'Presentation'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6546344757080078,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many paragraphs in total?",
      "gold_sql": "SELECT count(*) FROM Paragraphs",
      "generated_sql": "SELECT COUNT(*) FROM Paragraphs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0774028301239014,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of paragraphs.",
      "gold_sql": "SELECT count(*) FROM Paragraphs",
      "generated_sql": "SELECT COUNT(*) FROM Paragraphs",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1467554569244385,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "How many paragraphs for the document with name 'Summer Show'?",
      "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "generated_sql": "SELECT COUNT(*) \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID \nWHERE T1.Document_Name = 'Summer Show'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.360746145248413,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Count the number of paragraphs in the document named 'Summer Show'.",
      "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "generated_sql": "SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID WHERE T2.Document_Name  =  \"Summer Show\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5859787464141846,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show paragraph details for paragraph with text 'Korea ' .",
      "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
      "generated_sql": "SELECT T3.Paragraph_Text\nFROM Documents AS T1\nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID\nJOIN Paragraphs AS T3 ON T1.Document_ID  =  T3.Document_ID\nWHERE T3.Paragraph_Text  =  'Korea ';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8881423473358154,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
      "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
      "generated_sql": "SELECT T3.Paragraph_ID, T3.Document_ID, T3.Paragraph_Text, T3.Other_Details\nFROM Documents AS T1\nJOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID\nJOIN Paragraphs AS T3 ON T3.Document_ID = T1.Document_ID\nWHERE T3.Paragraph_Text LIKE '%Korea%'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.208702802658081,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
      "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "generated_sql": "SELECT T3.Paragraph_ID ,  T3.Paragraph_Text\nFROM Documents AS T1\nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID\nJOIN Paragraphs AS T3 ON T1.Document_ID  =  T3.Document_ID\nWHERE T1.Document_Name  =  \"Welcome to NY\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37346673011779785,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
      "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "generated_sql": "SELECT T1.Document_ID ,  T1.Paragraph_Text \nFROM Paragraphs AS T1 \nJOIN Documents AS T2 ON T1.Document_ID  =  T2.Document_ID \nWHERE T2.Document_Name  =  'Welcome to NY'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.6722016334533691,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all paragraph texts for the document \"Customer reviews\".",
      "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "generated_sql": "SELECT T3.Paragraph_Text \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Paragraphs AS T3 ON T1.Document_ID  =  T3.Document_ID \nWHERE T1.Document_Name  =  \"Customer reviews\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.152961015701294,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
      "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "generated_sql": "SELECT T3.Paragraph_Text \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Paragraphs AS T3 ON T1.Document_ID  =  T3.Document_ID \nWHERE T1.Document_Name  =  'Customer reviews'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8280773162841797,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "generated_sql": "SELECT T1.Document_ID ,  COUNT(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.972912073135376,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "generated_sql": "SELECT DISTINCT T1.Document_ID ,  COUNT(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID ORDER BY T1.Document_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34903740882873535,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids, names and the number of paragraphs in each document.",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "generated_sql": "SELECT T1.Document_ID ,  T1.Document_Name ,  COUNT(T2.Paragraph_ID) AS Num_Paragraphs\nFROM Documents AS T1\nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID\nGROUP BY T1.Document_ID ,  T1.Document_Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4660074710845947,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "generated_sql": "SELECT T1.Document_ID ,  T1.Document_Name ,  COUNT(T2.Paragraph_ID) AS Paragraph_Count\nFROM Documents AS T1\nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID\nGROUP BY T1.Document_ID ,  T1.Document_Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.42214465141296387,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "List all document ids with at least two paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT DISTINCT T1.Document_ID \nFROM Paragraphs AS T1 \nWHERE T1.Paragraph_ID  >  1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3086056709289551,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of documents that have 2 or more paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT DISTINCT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID \nGROUP BY T1.Document_ID \nHAVING COUNT(T2.Paragraph_ID)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3359203338623047,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id and name with greatest number of paragraphs?",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID ,  T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID ,  T1.Document_Name ORDER BY COUNT(T2.Paragraph_ID) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.35069727897644043,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id and name of the document with the most paragraphs.",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID ,  T1.name FROM Documents AS T1 JOIN (\n  SELECT Document_ID ,  COUNT(*) as paragraph_count FROM Paragraphs GROUP BY Document_ID ORDER BY paragraph_count DESC LIMIT 1\n) AS T2 ON T1.Document_ID  =  T2.Document_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3300666809082031,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id with least number of paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6143462657928467,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the id of the document with the fewest paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID \nGROUP BY T1.Document_ID \nORDER BY COUNT(T2.Paragraph_ID) ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5608944892883301,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the document id with 1 to 2 paragraphs?",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "generated_sql": "SELECT T1.Document_ID \nFROM Documents AS T1 \nJOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID \nJOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code  =  T3.Template_Type_Code \nWHERE T3.Template_Type_Description  =  \"Document\" \nAND T1.Document_ID IN (SELECT Document_ID FROM Paragraphs WHERE Paragraph_ID BETWEEN 1 AND 2)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.47774720191955566,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Give the ids of documents that have between one and two paragraphs.",
      "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "generated_sql": "SELECT DISTINCT T1.Document_ID \nFROM Documents AS T1 \nJOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID \nWHERE T2.Paragraph_ID BETWEEN 1 AND 2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.49439024925231934,
      "error": null
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
      "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
      "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "course_teach",
      "question": "How many teachers are there?",
      "gold_sql": "SELECT count(*) FROM teacher",
      "generated_sql": "SELECT COUNT(T1.Teacher_ID) FROM teacher AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3473982810974121,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What is the total count of teachers?",
      "gold_sql": "SELECT count(*) FROM teacher",
      "generated_sql": "SELECT COUNT(*) FROM teacher",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8789012432098389,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "List the names of teachers in ascending order of age.",
      "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nORDER BY T1.Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2534525394439697,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers ordered by ascending age?",
      "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
      "generated_sql": "SELECT T1.Name FROM teacher AS T1 ORDER BY T1.Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3619101047515869,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the age and hometown of teachers?",
      "gold_sql": "SELECT Age ,  Hometown FROM teacher",
      "generated_sql": "SELECT T1.Age ,  T1.Hometown FROM teacher AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7774026393890381,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What is the age and hometown of every teacher?",
      "gold_sql": "SELECT Age ,  Hometown FROM teacher",
      "generated_sql": "SELECT T1.Age ,  T1.Hometown FROM teacher AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.44043564796447754,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
      "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nWHERE T1.Hometown != \"Little Lever Urban District\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.25490236282348633,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
      "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nWHERE T1.Hometown != \"Little Lever Urban District\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34296441078186035,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show the name of teachers aged either 32 or 33?",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nWHERE T1.Age IN (32, 33)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2761406898498535,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who are aged either 32 or 33?",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "generated_sql": "SELECT T1.Name \nFROM teacher AS T1 \nWHERE T1.Age  =  32 OR T1.Age  =  33",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5577855110168457,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What is the hometown of the youngest teacher?",
      "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "generated_sql": "SELECT T1.hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T2.Grade  =  (SELECT MAX(Grade) FROM course_arrange)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7156338691711426,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Where is the youngest teacher from?",
      "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "generated_sql": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Age  =  ( SELECT MIN(T2.Age) FROM teacher AS T2 )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30541133880615234,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show different hometown of teachers and the number of teachers from each hometown.",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT DISTINCT T1.Hometown ,  COUNT(T1.Name) FROM teacher AS T1 GROUP BY T1.Hometown",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.924041748046875,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "For each hometown, how many teachers are there?",
      "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "generated_sql": "SELECT T2.Hometown ,  COUNT(T1.Teacher_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Hometown",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6068878173828125,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "List the most common hometown of teachers.",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Hometown \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID \nGROUP BY T2.Hometown \nORDER BY COUNT(T2.Teacher_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5646646022796631,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What is the most commmon hometowns for teachers?",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Hometown \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID \nGROUP BY T2.Hometown \nORDER BY COUNT(T2.Hometown) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.3778061866760254,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show the hometowns shared by at least two teachers.",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.hometown \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID \nGROUP BY T1.hometown \nHAVING COUNT(T1.hometown)  >=  2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.5575757026672363,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the towns from which at least two teachers come from?",
      "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.Hometown \nFROM teacher AS T1 \nGROUP BY T1.Hometown \nHAVING COUNT(T1.Teacher_ID)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6416530609130859,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the courses they are arranged to teach.",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "generated_sql": "SELECT T1.Name ,  T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID \nJOIN course AS T3 ON T2.Course_ID  =  T3.Course_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.4559252262115479,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What is the name of each teacher and what course they teach?",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "generated_sql": "SELECT T1.Name ,  T2.Course \nFROM teacher AS T1 \nJOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5472826957702637,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "generated_sql": "SELECT T2.Name ,  T1.Course \nFROM course_arrange AS T1 \nJOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID \nJOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID \nORDER BY T3.Name ASC",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3772294521331787,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
      "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "generated_sql": "SELECT T2.Name, T1.Course \nFROM course AS T1 \nJOIN course_arrange AS T2 ON T1.Course_ID  =  T2.Course_ID \nJOIN teacher AS T3 ON T2.Teacher_ID  =  T3.Teacher_ID \nORDER BY T3.Name ASC",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5343441963195801,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show the name of the teacher for the math course.",
      "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "generated_sql": "SELECT T2.Name \nFROM course AS T1 \nJOIN course_arrange AS T2 ON T1.Course_ID  =  T2.Course_ID \nJOIN teacher AS T3 ON T2.Teacher_ID  =  T3.Teacher_ID \nWHERE T1.Course  =  \"Math\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.1970841884613037,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the people who teach math courses?",
      "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "generated_sql": "SELECT T2.Name \nFROM course AS T1 \nJOIN course_arrange AS T2 ON T1.Course_ID  =  T2.Course_ID \nJOIN teacher AS T3 ON T2.Teacher_ID  =  T3.Teacher_ID \nWHERE T1.Course  =  \"Math\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3927276134490967,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers and the number of courses they teach.",
      "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "generated_sql": "SELECT T2.Name ,  COUNT(T1.Course_ID) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3514828681945801,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers and how many courses do they teach?",
      "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "generated_sql": "SELECT T2.Name ,  COUNT(T1.Course_ID) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47768688201904297,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "Show names of teachers that teach at least two courses.",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T1.Course_ID)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3252124786376953,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who teach at least two courses?",
      "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Name \nFROM course_arrange AS T1 \nJOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID \nGROUP BY T2.Name \nHAVING COUNT(T1.Course_ID)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3547818660736084,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "List the names of teachers who have not been arranged to teach courses.",
      "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "generated_sql": "SELECT T2.Name \nFROM course AS T1 \nLEFT JOIN course_arrange AS T2 ON T1.Course_ID  =  T2.Course_ID \nLEFT JOIN teacher AS T3 ON T2.Teacher_ID  =  T3.Teacher_ID \nWHERE T2.Course_ID IS NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4433586597442627,
      "error": null
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers whose courses have not been arranged?",
      "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "generated_sql": "SELECT T2.Name \nFROM course AS T1 \nJOIN course_arrange AS T2 ON T1.Course_ID  =  T2.Course_ID \nJOIN teacher AS T3 ON T2.Teacher_ID  =  T3.Teacher_ID \nWHERE T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.451096773147583,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "How many visitors below age 30 are there?",
      "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
      "generated_sql": "SELECT COUNT(*) \nFROM visitor \nWHERE Age < 30",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.38345861434936523,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
      "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
      "generated_sql": "SELECT T1.Name \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID  =  T2.visitor_ID \nWHERE T1.Level_of_membership  >  4 \nORDER BY T1.Level_of_membership DESC",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2918691635131836,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What is the average age of the visitors whose membership level is not higher than 4?",
      "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
      "generated_sql": "SELECT AVG(T1.Age) \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID = T2.visitor_ID \nWHERE T1.Level_of_membership <= 4;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.36751246452331543,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
      "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
      "generated_sql": "SELECT T1.Name ,  T2.Level_of_membership\nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID  =  T2.visitor_ID\nWHERE T2.Level_of_membership  >  4\nORDER BY T1.Age DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3595278263092041,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "Find the id and name of the museum that has the most staff members?",
      "gold_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
      "generated_sql": "SELECT T1.Museum_ID ,  T1.Name \nFROM museum AS T1 \nORDER BY T1.Num_of_Staff DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39182353019714355,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "Find the average number of staff working for the museums that were open before 2009.",
      "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
      "generated_sql": "SELECT AVG(T1.Num_of_Staff) \nFROM museum AS T1 \nWHERE T1.Open_Year < 2009;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5766310691833496,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What are the opening year and staff number of the museum named Plaza Museum?",
      "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
      "generated_sql": "SELECT T1.Open_Year ,  T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name  =  \"Plaza Museum\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43624091148376465,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
      "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
      "generated_sql": "SELECT T1.Name \nFROM museum AS T1 \nJOIN (SELECT MIN(Num_of_Staff) AS min_staff FROM museum WHERE Open_Year > 2010) AS T2 \nON T1.Num_of_Staff > T2.min_staff",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4087965488433838,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "find the id, name and age for visitors who visited some museums more than once.",
      "gold_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
      "generated_sql": "SELECT T1.id ,  T1.name ,  T2.age \nFROM visitor AS T1 \nJOIN visit AS T3 ON T1.id  =  T3.visitor_ID \nJOIN visitor AS T2 ON T2.id  =  T3.visitor_ID \nGROUP BY T1.id \nHAVING COUNT(T3.visitor_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6193497180938721,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
      "gold_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
      "generated_sql": "SELECT T1.id, T1.name, T2.Level_of_membership\nFROM visitor AS T1\nJOIN visit AS T2 ON T1.ID = T2.visitor_ID\nJOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID\nWHERE T2.Total_spent = (\n  SELECT MAX(T4.Total_spent)\n  FROM visit AS T4\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.39108705520629883,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What are the id and name of the museum visited most times?",
      "gold_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Museum_ID ,  T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY COUNT(T2.Museum_ID) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32572054862976074,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What is the name of the museum that had no visitor yet?",
      "gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
      "generated_sql": "SELECT T1.Name \nFROM museum AS T1 \nLEFT JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID \nWHERE T2.Museum_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4089810848236084,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "Find the name and age of the visitor who bought the most tickets at once.",
      "gold_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name ,  T2.Age \nFROM visitor AS T1 \nJOIN visit AS T2 ON T1.ID  =  T2.visitor_ID \nWHERE T2.Num_of_Ticket  =  (SELECT MAX(T3.Num_of_Ticket) FROM visit AS T3)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.40752291679382324,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What are the average and maximum number of tickets bought in all visits?",
      "gold_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
      "generated_sql": "SELECT AVG(T1.Num_of_Ticket) ,  MAX(T1.Num_of_Ticket) FROM visit AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4472520351409912,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What is the total ticket expense of the visitors whose membership level is 1?",
      "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
      "generated_sql": "SELECT SUM(T2.Total_spent) \nFROM visit AS T1 \nJOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID \nWHERE T2.Level_of_membership  =  1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3166167736053467,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
      "gold_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "museum_visit",
      "question": "Find the number of visitors who did not visit any museum opened after 2010.",
      "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
      "generated_sql": "SELECT COUNT(T1.ID) \nFROM visitor AS T1 \nLEFT JOIN visit AS T2 ON T1.ID = T2.visitor_ID \nLEFT JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID \nWHERE T3.Open_Year > 2010",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5144863128662109,
      "error": null
    },
    {
      "db_id": "museum_visit",
      "question": "How many museums were opened after 2013 or before 2008?",
      "gold_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
      "generated_sql": "SELECT COUNT(*) \nFROM museum \nWHERE Open_Year < 2008 OR Open_Year > 2013",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.49202442169189453,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of players.",
      "gold_sql": "SELECT count(*) FROM players",
      "generated_sql": "SELECT COUNT(*) FROM players",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3059356212615967,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many players are there?",
      "gold_sql": "SELECT count(*) FROM players",
      "generated_sql": "SELECT COUNT(*) FROM players",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2932322025299072,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of matches.",
      "gold_sql": "SELECT count(*) FROM matches",
      "generated_sql": "SELECT COUNT(*) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2563648223876953,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Count the number of matches.",
      "gold_sql": "SELECT count(*) FROM matches",
      "generated_sql": "SELECT COUNT(*) FROM matches",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24820399284362793,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "List the first name and birth date of all players from the country with code USA.",
      "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "generated_sql": "SELECT T1.first_name ,  T1.birth_date \nFROM players AS T1 \nWHERE T1.country_code  =  \"USA\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3536369800567627,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names and birth dates of players from the USA?",
      "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "generated_sql": "SELECT T1.first_name ,  T1.birth_date \nFROM players AS T1 \nWHERE T1.country_code  =  \"USA\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.45661234855651855,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the average age of losers and winners of all matches.",
      "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "generated_sql": "SELECT AVG(CASE WHEN loser_id IS NOT NULL THEN winner_age ELSE loser_age END) AS avg_age_of_losers, \n       AVG(CASE WHEN winner_id IS NOT NULL THEN winner_age ELSE loser_age END) AS avg_age_of_winners\nFROM matches",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5990874767303467,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the average ages of losers and winners across matches?",
      "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "generated_sql": "SELECT \n    AVG(CASE WHEN loser_id IS NOT NULL THEN winner_age ELSE NULL END) AS avg_winner_age,\n    AVG(CASE WHEN winner_id IS NOT NULL THEN winner_age ELSE NULL END) AS avg_loser_age\nFROM \n    matches;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4049971103668213,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the average rank of winners in all matches.",
      "gold_sql": "SELECT avg(winner_rank) FROM matches",
      "generated_sql": "SELECT AVG(T2.winner_rank) \nFROM matches AS T1 \nJOIN players AS T2 ON T1.winner_id = T2.player_id \nWHERE T1.winner_rank IS NOT NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.7299652099609375,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the average rank for winners in all matches?",
      "gold_sql": "SELECT avg(winner_rank) FROM matches",
      "generated_sql": "SELECT AVG(T2.winner_rank) \nFROM matches AS T1 \nJOIN players AS T2 ON T1.winner_id = T2.player_id \nWHERE T2.hand = 'R' AND T1.round = 'F'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.47605037689208984,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the highest rank of losers in all matches.",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT MAX(T2.loser_rank) FROM matches AS T1 JOIN players AS T2 ON T1.loser_id = T2.player_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5232813358306885,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the best rank of losers across all matches?",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "generated_sql": "SELECT T2.loser_rank \nFROM matches AS T1 \nJOIN players AS T2 ON T1.loser_id = T2.player_id \nJOIN rankings AS T3 ON T2.player_id = T3.player_id \nWHERE T3.ranking = ( SELECT MIN(T4.ranking) \n                     FROM rankings AS T4 \n                     WHERE T4.player_id = T2.player_id )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.7443082332611084,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "find the number of distinct country codes of all players.",
      "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
      "generated_sql": "SELECT COUNT(DISTINCT T1.country_code) \nFROM players AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41657209396362305,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many distinct countries do players come from?",
      "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
      "generated_sql": "SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.23333191871643066,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of distinct name of losers.",
      "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
      "generated_sql": "SELECT COUNT(DISTINCT T2.loser_name) \nFROM matches AS T1 \nJOIN players AS T2 ON T1.loser_id = T2.player_id;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.33901262283325195,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many different loser names are there?",
      "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
      "generated_sql": "SELECT COUNT(DISTINCT loser_name) \nFROM matches;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33026552200317383,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the name of tourney that has more than 10 matches.",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "generated_sql": "SELECT T1.tourney_name \nFROM matches AS T1 \nJOIN tourneys AS T2 ON T1.tourney_id = T2.id \nWHERE T1.match_num > 10;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.32353711128234863,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of tournaments that have more than 10 matches?",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "generated_sql": "SELECT DISTINCT T1.tourney_name \nFROM matches AS T1 \nJOIN tournaments AS T2 ON T1.tourney_id = T2.tourney_id \nWHERE T1.match_num > 10",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.35221362113952637,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "List the names of all winners who played in both 2013 and 2016.",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of players who won in both 2013 and 2016?",
      "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "List the number of all matches who played in years of 2013 or 2016.",
      "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE year IN (2013, 2016)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6023962497711182,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many matches were played in 2013 or 2016?",
      "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "generated_sql": "SELECT COUNT(*) \nFROM matches \nWHERE year IN (2013, 2016);",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5129568576812744,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the oldest player.",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "generated_sql": "SELECT T1.first_name ,  T1.country_code\nFROM players AS T1\nJOIN rankings AS T2 ON T1.player_id  =  T2.player_id\nORDER BY T2.ranking_date DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7501463890075684,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name and country code of the oldest player?",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code\nFROM players AS T1\nORDER BY T1.birth_date\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41024160385131836,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "generated_sql": "SELECT T1.first_name, T1.last_name \nFROM players AS T1 \nORDER BY T1.birth_date;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.39666032791137695,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all players, sorted by birth date?",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "generated_sql": "SELECT T1.first_name ,  T1.last_name FROM players AS T1 ORDER BY T1.birth_date",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4701073169708252,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT T1.first_name ,  T1.last_name \nFROM players AS T1 \nWHERE T1.hand  =  'L' \nORDER BY T1.birth_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3600432872772217,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all left handed players, in order of birth date?",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "generated_sql": "SELECT T1.first_name ,  T1.last_name \nFROM players AS T1 \nWHERE T1.hand  =  'L' \nORDER BY T1.birth_date;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4317135810852051,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the player who did the most number of tours.",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name ,  T1.country_code\nFROM players AS T1\nJOIN rankings AS T2 ON T1.player_id  =  T2.player_id\nWHERE T2.tours  =  ( SELECT MAX(tours) FROM rankings );",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8059370517730713,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name and country code of the player with the most tours?",
      "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name ,  T1.country_code\nFROM players AS T1\nJOIN rankings AS T2 ON T1.player_id  =  T2.player_id\nWHERE T2.tours  =  ( SELECT MAX(tours) FROM rankings );",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.690589427947998,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the year that has the most number of matches.",
      "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.year \nFROM matches AS T1 \nGROUP BY T1.year \nORDER BY COUNT(T1.year) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4183840751647949,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Which year had the most matches?",
      "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.year \nFROM matches AS T1 \nGROUP BY T1.year \nORDER BY COUNT(T1.year) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.515556812286377,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank points of the winner who won the most times.",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T1.rank_points\nFROM players AS T1\nJOIN (\n  SELECT winner_id, MAX(winner_rank_points) as max_rank_points\n  FROM matches\n  GROUP BY winner_id\n) AS T2 ON T1.player_id = T2.winner_id\nORDER BY T2.max_rank_points DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4685335159301758,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T3.ranking_points\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.winner_id\nJOIN rankings AS T3 ON T1.player_id = T3.player_id\nWHERE T3.ranking = 1\nORDER BY T3.ranking_points DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4529421329498291,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.winner_id\nJOIN rankings AS T3 ON T1.player_id = T3.player_id\nWHERE T2.tourney_name = \"Australian Open\"\nORDER BY T3.ranking_points DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.4203968048095703,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
      "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.winner_id\nJOIN rankings AS T3 ON T1.player_id = T3.player_id\nWHERE T2.tourney_name = \"Australian Open\"\nORDER BY T3.ranking_points DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5962517261505127,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
      "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "generated_sql": "SELECT T1.loser_name ,  T1.winner_name\nFROM matches AS T1\nWHERE T1.minutes  =  (SELECT MAX(minutes) FROM matches)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5628933906555176,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of the winner and loser who played in the longest match?",
      "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.last_name\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.loser_id\nJOIN matches AS T3 ON T1.player_id = T3.winner_id\nWHERE T2.minutes > T3.minutes",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5448713302612305,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the average ranking for each player and their first name.",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT \n    T1.first_name, \n    AVG(T2.ranking) AS average_ranking\nFROM \n    players AS T1\nJOIN \n    rankings AS T2 ON T1.player_id = T2.player_id\nGROUP BY \n    T1.first_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5035176277160645,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their average rankings?",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT T1.first_name ,  AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3536458015441895,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the total ranking points for each player and their first name.",
      "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT \n    p.first_name, \n    SUM(r.ranking_points) AS total_ranking_points\nFROM \n    players p\nJOIN \n    rankings r ON p.player_id = r.player_id\nGROUP BY \n    p.first_name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.559222936630249,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their total ranking points?",
      "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "generated_sql": "SELECT T1.first_name ,  SUM(T3.ranking_points) AS total_ranking_points\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id  =  T2.loser_id OR T1.player_id  =  T2.winner_id\nJOIN rankings AS T3 ON T1.player_id  =  T3.player_id\nGROUP BY T1.first_name;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.2547121047973633,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "find the number of players for each country.",
      "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "generated_sql": "SELECT T1.country_code ,  COUNT(*) FROM players AS T1 GROUP BY T1.country_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34862565994262695,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many players are from each country?",
      "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "generated_sql": "SELECT T1.country_code ,  COUNT(*) FROM players AS T1 GROUP BY T1.country_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3727114200592041,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "find the code of the country where has the greatest number of players.",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.country_code \nFROM players AS T1 \nJOIN rankings AS T2 ON T1.player_id = T2.player_id \nGROUP BY T1.country_code \nORDER BY COUNT(T1.player_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9659802913665771,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the code of the country with the most players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.country_code \nFROM players AS T1 \nJOIN rankings AS T2 ON T1.player_id  =  T2.player_id \nGROUP BY T1.country_code \nORDER BY COUNT(T1.player_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0559258460998535,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the codes of countries that have more than 50 players.",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "generated_sql": "SELECT T1.country_code \nFROM players AS T1 \nJOIN matches AS T2 ON T1.player_id  =  T2.loser_id \nGROUP BY T1.country_code \nHAVING COUNT(T1.player_id)  >  50",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.34023427963256836,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the codes of countries with more than 50 players?",
      "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "generated_sql": "SELECT T1.country_code \nFROM players AS T1 \nJOIN matches AS T2 ON T1.player_id  =  T2.loser_id \nGROUP BY T1.country_code \nHAVING COUNT(T1.player_id)  >  50",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7190053462982178,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the total number of tours for each ranking date.",
      "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "generated_sql": "SELECT \n    T1.ranking_date, \n    COUNT(T1.player_id) AS total_tours\nFROM \n    rankings AS T1\nGROUP BY \n    T1.ranking_date;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5960743427276611,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many total tours were there for each ranking date?",
      "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "generated_sql": "SELECT \n    T1.ranking_date, \n    COUNT(T1.player_id) AS total_tours\nFROM \n    rankings AS T1\nGROUP BY \n    T1.ranking_date;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1622099876403809,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of matches happened in each year.",
      "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "generated_sql": "SELECT T1.year \nFROM matches AS T1 \nGROUP BY T1.year \nORDER BY T1.year ASC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2931811809539795,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many matches were played in each year?",
      "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "generated_sql": "SELECT T1.year \nFROM matches AS T1 \nGROUP BY T1.year \nORDER BY T1.year;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4464588165283203,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank of the 3 youngest winners across all matches.",
      "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.ranking \nFROM players AS T1 \nJOIN rankings AS T2 ON T1.player_id = T2.player_id \nJOIN matches AS T3 ON T1.player_id = T3.loser_id \nWHERE T3.year = (SELECT MAX(year) FROM matches) \nORDER BY T2.ranking \nLIMIT 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.5774595737457275,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What are the names and ranks of the three youngest winners across all matches?",
      "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.ranking\nFROM players AS T1\nJOIN rankings AS T2 ON T1.player_id = T2.player_id\nJOIN (\n  SELECT winner_id, MIN(winner_age) AS min_age\n  FROM matches\n  GROUP BY winner_id\n  ORDER BY min_age ASC\n  LIMIT 3\n) AS T3 ON T1.player_id = T3.winner_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.49620842933654785,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many different winners both participated in the WTA Championships and were left handed?",
      "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "generated_sql": "SELECT COUNT(DISTINCT T1.player_id)\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.loser_id OR T1.player_id = T2.winner_id\nWHERE T1.hand = 'L'\nINTERSECT\nSELECT COUNT(DISTINCT T1.player_id)\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.loser_id OR T1.player_id = T2.winner_id\nJOIN tournaments AS T3 ON T2.tourney_id = T3.tourney_id\nWHERE T3.tourney_name = 'WTA Championships';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.47281765937805176,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of left handed winners who participated in the WTA Championships.",
      "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "generated_sql": "SELECT COUNT(*)\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.loser_id OR T1.player_id = T2.winner_id\nWHERE T1.hand = 'L'\nAND T2.tourney_name = 'WTA Championships';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4844930171966553,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date\nFROM players AS T1\nJOIN (\n  SELECT winner_id, MAX(winner_rank_points) AS max_rank_points\n  FROM matches\n  GROUP BY winner_id\n) AS T2 ON T1.player_id = T2.winner_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7667026519775391,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date \nFROM players AS T1 \nJOIN (\n  SELECT player_id, MAX(winner_rank_points) AS max_rank_points \n  FROM matches \n  GROUP BY player_id\n) AS T2 \nON T1.player_id = T2.player_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4948554039001465,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "Find the number of players for each hand type.",
      "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "generated_sql": "SELECT T1.hand ,  COUNT(*) FROM players AS T1 GROUP BY T1.hand",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4201316833496094,
      "error": null
    },
    {
      "db_id": "wta_1",
      "question": "How many players are there for each hand type?",
      "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "generated_sql": "SELECT T1.hand ,  COUNT(*) FROM players AS T1 GROUP BY T1.hand",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5076534748077393,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "How many ships ended up being 'Captured'?",
      "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
      "generated_sql": "SELECT COUNT(*) \nFROM ship \nWHERE disposition_of_ship = 'Captured'",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5681629180908203,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
      "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
      "generated_sql": "SELECT name, tonnage \nFROM ship \nORDER BY name DESC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5469627380371094,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "List the name, date and result of each battle.",
      "gold_sql": "SELECT name ,  date FROM battle",
      "generated_sql": "SELECT T1.name, T1.date, T1.result \nFROM battle AS T1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.920473575592041,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What is maximum and minimum death toll caused each time?",
      "gold_sql": "SELECT max(killed) ,  min(killed) FROM death",
      "generated_sql": "SELECT MAX(killed) ,  MIN(killed) FROM death",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4167213439941406,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What is the average number of injuries caused each time?",
      "gold_sql": "SELECT avg(injured) FROM death",
      "generated_sql": "SELECT AVG(T2.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4035201072692871,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
      "gold_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
      "generated_sql": "SELECT T2.note ,  T2.killed ,  T2.injured \nFROM death AS T1 \nJOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id \nWHERE T2.tonnage  =  't'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4476749897003174,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
      "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
      "generated_sql": "SELECT T1.name ,  T1.result \nFROM battle AS T1 \nWHERE T1.bulgarian_commander != 'Boril'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4497361183166504,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
      "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
      "generated_sql": "SELECT DISTINCT T1.id, T1.name \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nWHERE T2.ship_type = 'Brig'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.651054859161377,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
      "gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
      "generated_sql": "SELECT T1.id ,  T1.name \nFROM battle AS T1 \nJOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id \nGROUP BY T1.id \nHAVING SUM(T2.killed)  >  10",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7470293045043945,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What is the ship id and name that caused most total injuries?",
      "gold_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.id, T1.name \nFROM ship AS T1 \nJOIN death AS T2 ON T1.id = T2.caused_by_ship_id \nGROUP BY T1.id, T1.name \nORDER BY SUM(T2.injured) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3580491542816162,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
      "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
      "generated_sql": "SELECT DISTINCT T1.name \nFROM battle AS T1 \nJOIN ship AS T2 ON T1.id = T2.lost_in_battle \nJOIN death AS T3 ON T2.id = T3.caused_by_ship_id \nWHERE T1.bulgarian_commander = 'Kaloyan' AND T1.latin_commander = 'Baldwin I'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.37293386459350586,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "How many different results are there for the battles?",
      "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle",
      "generated_sql": "SELECT COUNT(DISTINCT result) FROM battle",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2574474811553955,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "How many battles did not lose any ship with tonnage '225'?",
      "gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
      "generated_sql": "SELECT COUNT(*) \nFROM battle \nWHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.25942564010620117,
      "error": null
    },
    {
      "db_id": "battle_death",
      "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
      "gold_sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "battle_death",
      "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
      "gold_sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "battle_death",
      "question": "What are the notes of the death events which has substring 'East'?",
      "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
      "generated_sql": "SELECT T1.note \nFROM death AS T1 \nWHERE T1.note LIKE '%East%'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41117382049560547,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "what are all the addresses including line 1 and line 2?",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "generated_sql": "SELECT T1.line_1, T1.line_2 FROM Addresses AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7701559066772461,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first and second line for all addresses?",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "generated_sql": "SELECT T1.line_1 ,  T1.line_2 FROM Addresses AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5621278285980225,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many courses in total are listed?",
      "gold_sql": "SELECT count(*) FROM Courses",
      "generated_sql": "SELECT COUNT(*) FROM Courses",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4729344844818115,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many courses are there?",
      "gold_sql": "SELECT count(*) FROM Courses",
      "generated_sql": "SELECT COUNT(*) FROM Courses",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6699178218841553,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How is the math course described?",
      "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
      "generated_sql": "SELECT T2.course_description \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id = T2.course_id \nWHERE T1.course_name = 'math';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.38791441917419434,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the descriptions for all the math courses?",
      "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
      "generated_sql": "SELECT T1.course_description \nFROM Courses AS T1 \nWHERE T1.course_name = 'math'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.427980899810791,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the zip code of the address in the city Port Chelsea?",
      "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
      "generated_sql": "SELECT T1.zip_postcode\nFROM Addresses AS T1\nWHERE T1.city = \"Port Chelsea\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4079751968383789,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the zip code for Port Chelsea?",
      "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
      "generated_sql": "SELECT T1.zip_postcode \nFROM Addresses AS T1 \nWHERE T1.city = \"Port Chelsea\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32242417335510254,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which department offers the most number of degrees? List department name and id.",
      "gold_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.department_name ,  T1.department_id \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id \nGROUP BY T1.department_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4187929630279541,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name and id of the department with the most number of degrees ?",
      "gold_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
      "generated_sql": "SELECT T1.department_name ,  T1.department_id \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id \nGROUP BY T1.department_id \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6406629085540771,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many departments offer any degree?",
      "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT T1.department_id) \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 ON T1.department_id = T2.department_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6563611030578613,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different departments offer degrees?",
      "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
      "generated_sql": "SELECT DISTINCT T1.department_name \nFROM Departments AS T1 \nJOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.307863712310791,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different degree names are offered?",
      "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
      "generated_sql": "SELECT DISTINCT T2.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Students AS T2 ON T1.degree_program_id  =  T2.student_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.437441349029541,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different degrees are offered?",
      "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
      "generated_sql": "SELECT COUNT(DISTINCT T1.degree_program_id) \nFROM Degree_Programs AS T1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.118091106414795,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many degrees does the engineering department offer?",
      "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
      "generated_sql": "SELECT T2.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 ON T1.department_id = T2.department_id \nWHERE T2.department_name = 'engineering';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.474881649017334,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many degrees does the engineering department have?",
      "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
      "generated_sql": "SELECT T3.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Departments AS T2 ON T1.department_id = T2.department_id \nJOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id \nWHERE T2.department_name = 'engineering';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4565155506134033,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions of all the sections?",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "generated_sql": "SELECT T1.section_name ,  T1.section_description FROM Sections AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32039380073547363,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions for all the sections?",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "generated_sql": "SELECT T1.section_name ,  T1.section_description FROM Sections AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3399841785430908,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and id of courses having at most 2 sections?",
      "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
      "generated_sql": "SELECT DISTINCT T1.course_id ,  T1.course_name \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id  =  T2.course_id \nGROUP BY T1.course_id \nHAVING COUNT(T2.section_id)  <=  2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5317256450653076,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and ids of every course with less than 2 sections?",
      "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
      "generated_sql": "SELECT DISTINCT T1.course_id ,  T1.course_name \nFROM Courses AS T1 \nJOIN Sections AS T2 ON T1.course_id  =  T2.course_id \nWHERE T2.section_id NOT IN (SELECT section_id FROM Sections WHERE section_name IN (SELECT section_name FROM Sections GROUP BY section_name HAVING COUNT(section_name)  >=  2))",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.47419023513793945,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List the section_name in reversed lexicographical order.",
      "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "generated_sql": "SELECT section_name\nFROM Sections\nORDER BY section_name DESC;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8988726139068604,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names of the sections in reverse alphabetical order?",
      "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "generated_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.46654224395751953,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the semester which most student registered in? Show both the name and the id.",
      "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T3.semester_name ,  T3.semester_id\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id\nJOIN Semesters AS T3 ON T2.semester_id  =  T3.semester_id\nGROUP BY T3.semester_id\nORDER BY COUNT(T1.student_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7141625881195068,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "For each semester, what is the name and id of the one with the most students registered?",
      "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n  T1.semester_name,\n  T1.semester_id,\n  T2.student_id,\n  T2.first_name,\n  T2.last_name\nFROM \n  Semesters AS T1\n  JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id\n  JOIN Students AS T3 ON T2.student_id = T3.student_id\nGROUP BY \n  T1.semester_name, T1.semester_id, T2.student_id, T2.first_name, T2.last_name\nORDER BY \n  COUNT(T2.student_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.7161264419555664,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the description of the department whose name has the substring the computer?",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "generated_sql": "SELECT T2.department_description \nFROM Departments AS T1 \nJOIN Student_Enrolment AS T2 ON T1.department_id = T2.degree_program_id \nJOIN Students AS T3 ON T2.student_id = T3.student_id \nWHERE T3.first_name || ' ' || T3.last_name LIKE '%the computer%';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6741764545440674,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the department description for the one whose name has the word computer?",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "generated_sql": "SELECT T2.department_description \nFROM Departments AS T1 \nJOIN Students AS T2 ON T1.department_id  =  T2.current_address_id \nWHERE T2.first_name LIKE \"%computer%\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.9073035717010498,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
      "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nWHERE T2.degree_program_id IN (\n  SELECT T3.degree_program_id\n  FROM Degree_Programs AS T3\n  GROUP BY T3.degree_program_id\n  HAVING COUNT(T3.degree_program_id) = 2\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5644392967224121,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
      "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "generated_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nWHERE T3.degree_summary_name = 'Master' AND T2.semester_id IN (SELECT semester_id FROM Semesters WHERE semester_name = 'spring 2010' OR semester_name = 'summer 2010' OR semester_name = 'fall 2010') AND T2.degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master' AND degree_summary_name = 'Master' AND degree_summary_name = 'Master')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8336889743804932,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id\nWHERE T3.degree_summary_name = 'Bachelor';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7274761199951172,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
      "generated_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id \nWHERE T3.degree_summary_name  =  \"Bachelors\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5568068027496338,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the kind of program which most number of students are enrolled in?",
      "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T3.degree_summary_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T3.degree_program_id = T2.degree_program_id \nGROUP BY T3.degree_summary_name \nORDER BY COUNT(T1.student_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40964221954345703,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the degree summary name that has the most number of students enrolled?",
      "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T3.degree_summary_name \nFROM Students AS T1 \nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id \nJOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id \nGROUP BY T3.degree_summary_name \nORDER BY COUNT(T1.student_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5440781116485596,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
      "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.degree_program_id, T1.degree_summary_name\nFROM Degree_Programs AS T1\nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id\nGROUP BY T1.degree_program_id, T1.degree_summary_name\nORDER BY COUNT(T2.student_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40305042266845703,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the program id and the summary of the degree that has the most students enrolled?",
      "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.degree_program_id, T1.degree_summary_name \nFROM Degree_Programs AS T1 \nJOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id \nGROUP BY T1.degree_program_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4176158905029297,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n  S.student_id, \n  S.first_name, \n  S.middle_name, \n  S.last_name, \n  COUNT(SE.student_enrolment_id) AS num_enrollments\nFROM \n  Students S\nJOIN \n  Student_Enrolment SE ON S.student_id = SE.student_id\nGROUP BY \n  S.student_id, S.first_name, S.middle_name, S.last_name\nORDER BY \n  num_enrollments DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7064929008483887,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
      "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT \n  T1.first_name, \n  T1.middle_name, \n  T1.last_name, \n  T1.student_id, \n  COUNT(T3.student_course_id) AS num_enrollments\nFROM \n  Students AS T1\n  JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\n  JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id\nGROUP BY \n  T1.student_id\nORDER BY \n  COUNT(T3.student_course_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7506606578826904,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which semesters do not have any student enrolled? List the semester name.",
      "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
      "generated_sql": "SELECT T1.semester_name \nFROM Semesters AS T1 \nWHERE T1.semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9047355651855469,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name of the semester with no students enrolled?",
      "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
      "generated_sql": "SELECT T1.semester_name \nFROM Semesters AS T1 \nLEFT JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id \nWHERE T2.student_id IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5864009857177734,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are all the course names of the courses which ever have students enrolled in?",
      "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
      "generated_sql": "SELECT DISTINCT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.621131420135498,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names of all courses that have some students enrolled?",
      "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
      "generated_sql": "SELECT DISTINCT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id \nJOIN Students AS T3 ON T2.student_enrolment_id  =  (SELECT student_enrolment_id FROM Student_Enrolment WHERE student_id  =  T3.student_id)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.600776195526123,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What's the name of the course with most number of enrollments?",
      "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.course_name\nFROM Courses AS T1\nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id\nJOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id\nGROUP BY T1.course_name\nORDER BY COUNT(T3.student_enrolment_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3128151893615723,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the name of the course with the most students enrolled?",
      "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.course_name \nFROM Courses AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id \nJOIN Students AS T3 ON T2.student_enrolment_id = (SELECT student_enrolment_id FROM Student_Enrolment WHERE student_id = (SELECT student_id FROM Students ORDER BY (SELECT COUNT(*) FROM Student_Enrolment_Courses WHERE student_enrolment_id = Student_Enrolment.student_enrolment_id) DESC LIMIT 1)) \nGROUP BY T1.course_name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.3139889240264893,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date and id of the transcript with at least 2 course results.",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.transcript_date ,  T1.transcript_id\nFROM Transcripts AS T1\nJOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id\nGROUP BY T1.transcript_id\nHAVING COUNT(T2.student_course_id)  >=  2;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9653768539428711,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the date and id of the transcript with at least 2 courses listed?",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.transcript_date ,  T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id \nJOIN Student_Enrolment_Courses AS T3 ON T2.student_course_id  =  T3.student_course_id \nWHERE T3.student_enrolment_id IN (SELECT student_enrolment_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Students WHERE student_id  >=  2)) \nGROUP BY T1.transcript_id \nHAVING COUNT(T3.student_enrolment_id)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.149411678314209,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
      "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
      "generated_sql": "SELECT T1.cell_mobile_number \nFROM Students AS T1 \nWHERE T1.first_name  =  \"Timmothy\" AND T1.last_name  =  \"Ward\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1556971073150635,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the mobile phone number of the student named Timmothy Ward ?",
      "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
      "generated_sql": "SELECT T1.cell_mobile_number\nFROM Students AS T1\nWHERE T1.first_name = \"Timmothy\" AND T1.last_name = \"Ward\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.1963412761688232,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is the first student to register? List the first name, middle name and last name.",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nORDER BY T1.date_first_registered\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4223933219909668,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name of the first student to register?",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nORDER BY T1.date_first_registered\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7105402946472168,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name \nFROM Students AS T1 \nWHERE T1.date_first_registered  =  (SELECT MIN(date_first_registered) \n                                    FROM Students)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.542961835861206,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first, middle, and last name of the earliest school graduate?",
      "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nWHERE T2.student_enrolment_id = (\n  SELECT T3.student_enrolment_id\n  FROM Student_Enrolment AS T3\n  JOIN Student_Enrolment_Courses AS T4 ON T3.student_enrolment_id = T4.student_enrolment_id\n  JOIN Courses AS T5 ON T4.course_id = T5.course_id\n  ORDER BY T5.course_id\n  LIMIT 1\n);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0181317329406738,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Whose permanent address is different from his or her current address? List his or her first name.",
      "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nJOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id \nWHERE T2.line_1 != T3.line_1 OR T2.line_2 != T3.line_2 OR T2.line_3 != T3.line_3 OR T2.city != T3.city OR T2.zip_postcode != T3.zip_postcode OR T2.state_province_county != T3.state_province_county OR T2.country != T3.country OR T2.other_address_details != T3.other_address_details;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4827115535736084,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first name of the student whose permanent address is different from his or her current one?",
      "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nJOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id \nWHERE T2.line_1 != T3.line_1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.49677062034606934,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Which address holds the most number of students currently? List the address id and all lines.",
      "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3\nFROM Addresses AS T1\nJOIN Students AS T2 ON T1.address_id = T2.current_address_id\nGROUP BY T1.address_id\nORDER BY COUNT(T2.student_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6323733329772949,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the id, line 1, and line 2 of the address with the most students?",
      "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.id, T1.line_1, T1.line_2 \nFROM Addresses AS T1 \nJOIN Students AS T2 ON T1.address_id = T2.current_address_id \nGROUP BY T1.address_id \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.9041569232940674,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "On average, when were the transcripts printed?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(T1.transcript_date) \nFROM Transcripts AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7068734169006348,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the average transcript date?",
      "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
      "generated_sql": "SELECT AVG(T1.transcript_date) \nFROM Transcripts AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4469563961029053,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "When is the first transcript released? List the date and details.",
      "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date, T1.other_details\nFROM Transcripts AS T1\nWHERE T1.transcript_date = (\n  SELECT MIN(T2.transcript_date)\n  FROM Transcripts AS T2\n);",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0949549674987793,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the earliest date of a transcript release, and what details can you tell me?",
      "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
      "generated_sql": "SELECT \n    MIN(T1.transcript_date) AS earliest_transcript_date,\n    T1.transcript_date,\n    T2.student_id,\n    T3.first_name,\n    T3.last_name\nFROM \n    Transcripts AS T1\nJOIN \n    Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id\nJOIN \n    Student_Enrolment_Courses AS T3 ON T2.student_course_id = T3.student_course_id\nJOIN \n    Student_Enrolment AS T4 ON T3.student_enrolment_id = T4.student_enrolment_id\nJOIN \n    Students AS T5 ON T4.student_id = T5.student_id\nGROUP BY \n    T1.transcript_date, T2.student_id, T3.first_name, T3.last_name\nORDER BY \n    T1.transcript_date ASC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.012216329574585,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many transcripts are released?",
      "gold_sql": "SELECT count(*) FROM Transcripts",
      "generated_sql": "SELECT COUNT(*) FROM Transcripts",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.8496589660644531,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many transcripts are listed?",
      "gold_sql": "SELECT count(*) FROM Transcripts",
      "generated_sql": "SELECT COUNT(*) FROM Transcripts",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2456848621368408,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the last transcript release date?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT T3.transcript_date\nFROM Transcripts AS T1\nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id\nORDER BY T3.transcript_date DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6636679172515869,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "When was the last transcript released?",
      "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date \nFROM Transcripts AS T1 \nORDER BY T1.transcript_date DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.749863862991333,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
      "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT COUNT(DISTINCT T1.student_enrolment_id) ,  T1.student_enrolment_id\nFROM Student_Enrolment AS T1\nJOIN Transcript_Contents AS T2 ON T1.student_enrolment_id  =  T2.student_course_id\nGROUP BY T1.student_enrolment_id\nORDER BY COUNT(DISTINCT T1.student_enrolment_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3568360805511475,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
      "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT COUNT(T1.student_course_id) ,  T2.course_name ,  T2.course_id \nFROM Transcript_Contents AS T1 \nJOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id \nJOIN Courses AS T3 ON T2.course_id  =  T3.course_id \nGROUP BY T2.course_id \nORDER BY COUNT(T1.student_course_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.069288730621338,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date of the transcript which shows the least number of results, also list the id.",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date, T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id \nWHERE (SELECT COUNT(*) FROM Transcript_Contents) - (SELECT COUNT(*) FROM Transcript_Contents WHERE transcript_id = T1.transcript_id) = (SELECT MIN(COUNT(*)) FROM Transcript_Contents GROUP BY transcript_id)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4749469757080078,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the date and id of the transcript with the least number of results?",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.transcript_date ,  T1.transcript_id \nFROM Transcripts AS T1 \nJOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id \nWHERE T2.student_course_id  =  (SELECT student_course_id \n                                FROM Transcript_Contents \n                                GROUP BY student_course_id \n                                ORDER BY COUNT(*) ASC \n                                LIMIT 1);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44109463691711426,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
      "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
      "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "How many different addresses do the students currently live?",
      "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
      "generated_sql": "SELECT COUNT(DISTINCT T1.current_address_id) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5702526569366455,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the different addresses that have students living there?",
      "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
      "generated_sql": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details\nFROM Addresses AS T1\nJOIN Students AS T2 ON T1.address_id = T2.current_address_id\nWHERE T2.student_id IS NOT NULL;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.604221820831299,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List all the student details in reversed lexicographical order.",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nORDER BY T1.first_name DESC, T1.middle_name DESC, T1.last_name DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.7544286251068115,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What other details can you tell me about students in reverse alphabetical order?",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "generated_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name \nFROM Students AS T1 \nORDER BY T1.last_name DESC, T1.first_name DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8254742622375488,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Describe the section h.",
      "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
      "generated_sql": "SELECT T2.section_name \nFROM Sections AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nWHERE T1.section_name = 'h';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.34566783905029297,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the description for the section named h?",
      "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
      "generated_sql": "SELECT T2.section_description \nFROM Sections AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nWHERE T1.section_name = 'h'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.8383851051330566,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
      "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nWHERE T1.permanent_address_id IN (\n  SELECT address_id \n  FROM Addresses \n  WHERE country = 'Haiti'\n) \nOR T1.cell_mobile_number = '09700166582';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6063363552093506,
      "error": null
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
      "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
      "generated_sql": "SELECT T1.first_name \nFROM Students AS T1 \nJOIN Addresses AS T2 ON T1.current_address_id = T2.address_id \nWHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6611714363098145,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all cartoons in alphabetical order.",
      "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
      "generated_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4062166213989258,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the titles of the cartoons sorted alphabetically?",
      "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
      "generated_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8535873889923096,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List all cartoon directed by \"Ben Jones\".",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
      "generated_sql": "SELECT T1.Title \nFROM Cartoon AS T1 \nWHERE T1.Directed_by  =  \"Ben Jones\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4834766387939453,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the names of all cartoons directed by Ben Jones?",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
      "generated_sql": "SELECT T1.Title \nFROM Cartoon AS T1 \nWHERE T1.Directed_by  =  \"Ben Jones\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4586222171783447,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons were written by \"Joseph Kuhr\"?",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "generated_sql": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = \"Joseph Kuhr\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.33231306076049805,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the number of cartoones written by Joseph Kuhr?",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "generated_sql": "SELECT COUNT(*) \nFROM Cartoon \nWHERE Written_by = \"Joseph Kuhr\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6754703521728516,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "list all cartoon titles and their directors ordered by their air date",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT T1.Title, T1.Directed_by \nFROM Cartoon AS T1 \nORDER BY T1.Original_air_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0111629962921143,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the name and directors of all the cartoons that are ordered by air date?",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "generated_sql": "SELECT T1.Title ,  T1.Directed_by FROM Cartoon AS T1 ORDER BY T1.Original_air_date",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9005050659179688,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
      "generated_sql": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Directed_by IN (\"Ben Jones\", \"Brandon Vietti\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4769871234893799,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
      "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
      "generated_sql": "SELECT DISTINCT T1.Title \nFROM Cartoon AS T1 \nWHERE T1.Directed_by IN ('Ben Jones', 'Brandon Vietti');",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3843555450439453,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
      "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Country, COUNT(T2.id) AS Number_of_TV_Channels\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nGROUP BY T1.Country\nORDER BY COUNT(T2.id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6468117237091064,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the country with the most number of TV Channels and how many does it have?",
      "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
      "generated_sql": "SELECT T1.Country, COUNT(T1.id) AS total_channels\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nGROUP BY T1.Country\nORDER BY COUNT(T1.id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6406598091125488,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the number of different series names and contents in the TV Channel table.",
      "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
      "generated_sql": "SELECT DISTINCT T1.series_name ,  T1.Content \nFROM TV_Channel AS T1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.29018449783325195,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "How many different series and contents are listed in the TV Channel table?",
      "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
      "generated_sql": "SELECT DISTINCT T1.series_name ,  T1.Content \nFROM TV_Channel AS T1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.24417424201965332,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T2.Content \nFROM TV_series AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Series_name  =  \"Sky Radio\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4661273956298828,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the content of the series Sky Radio?",
      "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Content \nFROM TV_Channel AS T1 \nWHERE T1.series_name = \"Sky Radio\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9227826595306396,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
      "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Package_Option\nFROM TV_Channel AS T1\nWHERE T1.series_name = \"Sky Radio\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.32586145401000977,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
      "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Package_Option\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T2.Channel  =  T1.id\nWHERE T2.Series_name  =  \"Sky Radio\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.32788944244384766,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "How many TV Channel using language English?",
      "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
      "generated_sql": "SELECT T1.id \nFROM TV_Channel AS T1 \nWHERE T1.Language = 'English'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.44907164573669434,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "How many TV Channels use the English language?",
      "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
      "generated_sql": "SELECT T1.Language \nFROM TV_Channel AS T1 \nWHERE T1.Language = 'English'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3222804069519043,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Language, COUNT(T2.id) AS num_channels\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel\nGROUP BY T1.Language\nORDER BY num_channels ASC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3658792972564697,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
      "generated_sql": "SELECT T1.Language, COUNT(T1.id) AS ChannelCount\nFROM TV_Channel AS T1\nGROUP BY T1.Language\nORDER BY ChannelCount ASC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7287037372589111,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List each language and the number of TV Channels using it.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
      "generated_sql": "SELECT \n  T1.Language, \n  COUNT(T2.id) AS num_channels\nFROM \n  TV_Channel AS T1\nJOIN \n  TV_series AS T2 ON T1.id = T2.Channel\nGROUP BY \n  T1.Language",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.333996057510376,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "For each language, list the number of TV Channels that use it.",
      "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
      "generated_sql": "SELECT \n    T1.Language, \n    COUNT(T2.id) AS num_channels\nFROM \n    TV_Channel AS T1\nJOIN \n    TV_series AS T2 ON T1.id = T2.Channel\nGROUP BY \n    T1.Language",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4548146724700928,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
      "generated_sql": "SELECT T2.series_name \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Title  =  \"The Rise of the Blue Beetle!\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5834217071533203,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
      "generated_sql": "SELECT T2.series_name \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Title  =  \"The Rise of the Blue Beetle\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33129286766052246,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
      "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T1.Title \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T2.series_name  =  \"Sky Radio\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5611171722412109,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
      "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T3.Title \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T2.Channel  =  T1.id \nJOIN Cartoon AS T3 ON T3.Channel  =  T1.id \nWHERE T1.series_name  =  \"Sky Radio\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6186463832855225,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the Episode of all TV series sorted by rating.",
      "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id  =  T2.Channel \nORDER BY T2.Rating;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39108848571777344,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are all of the episodes ordered by ratings?",
      "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id  =  T2.Channel \nORDER BY T2.Rating DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7106058597564697,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
      "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
      "generated_sql": "SELECT T1.Episode, T1.Rating\nFROM TV_series AS T1\nORDER BY T1.Rating DESC\nLIMIT 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.36448049545288086,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
      "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
      "generated_sql": "SELECT T1.Episode, T1.Rating\nFROM TV_series AS T1\nORDER BY T1.Rating DESC\nLIMIT 3;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6813421249389648,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is minimum and maximum share of TV series?",
      "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
      "generated_sql": "SELECT MIN(T2.Share), MAX(T2.Share)\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id = T2.Channel",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6119780540466309,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the maximum and minimum share for the TV series?",
      "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
      "generated_sql": "SELECT MAX(T2.Share) ,  MIN(T2.Share)\nFROM TV_Channel AS T1\nJOIN TV_series AS T2 ON T1.id  =  T2.Channel\nWHERE T1.Content  =  \"music\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.697288990020752,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Air_Date \nFROM TV_series AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Episode  =  \"A Love of a Lifetime\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.34453678131103516,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "When did the episode \"A Love of a Lifetime\" air?",
      "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id  =  T2.Channel \nWHERE T2.Episode  =  \"A Love of a Lifetime\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42624735832214355,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Weekly_Rank \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id  =  T2.Channel \nWHERE T2.Episode  =  \"A Love of a Lifetime\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3701176643371582,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.Weekly_Rank \nFROM TV_series AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Episode  =  \"A Love of a Lifetime\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.397219181060791,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.series_name \nFROM TV_series AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Episode  =  \"A Love of a Lifetime\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3190743923187256,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
      "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
      "generated_sql": "SELECT T2.series_name \nFROM TV_series AS T1 \nJOIN TV_Channel AS T2 ON T1.Channel  =  T2.id \nWHERE T1.Episode  =  \"A Love of a Lifetime\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4073019027709961,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
      "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id  =  T2.Channel \nWHERE T1.series_name  =  \"Sky Radio\";",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30629801750183105,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the episode for the TV series named \"Sky Radio\"?",
      "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
      "generated_sql": "SELECT T2.Episode \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id  =  T2.Channel \nWHERE T1.series_name  =  \"Sky Radio\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3073701858520508,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "Find the number of cartoons directed by each of the listed directors.",
      "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
      "generated_sql": "SELECT T1.Directed_by ,  COUNT(*) FROM Cartoon AS T1 GROUP BY T1.Directed_by",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39498019218444824,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons did each director create?",
      "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
      "generated_sql": "SELECT T1.Directed_by ,  COUNT(T1.id) FROM Cartoon AS T1 GROUP BY T1.Directed_by",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42075014114379883,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "Find the production code and channel of the most recently aired cartoon .",
      "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
      "generated_sql": "SELECT T2.production_code ,  T2.channel \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.channel  =  T2.id \nORDER BY T1.original_air_date DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.45383763313293457,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the produdction code and channel of the most recent cartoon ?",
      "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
      "generated_sql": "SELECT T2.production_code ,  T2.channel \nFROM Cartoon AS T1 \nJOIN TV_Channel AS T2 ON T1.channel  =  T2.id \nORDER BY T1.original_air_date DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3190152645111084,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "Find the package choice and series name of the TV channel that has high definition TV.",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "generated_sql": "SELECT T1.Package_Option, T1.series_name\nFROM TV_Channel AS T1\nWHERE T1.Hight_definition_TV = 'yes';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3246123790740967,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "generated_sql": "SELECT T1.Package_Option, T1.series_name\nFROM TV_Channel AS T1\nWHERE T1.Hight_definition_TV = \"yes\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.536480188369751,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
      "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SELECT T2.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T2.Channel  =  T1.id \nWHERE T2.Written_by  =  \"Todd Casey\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.7142667770385742,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
      "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SELECT DISTINCT T1.Country \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id  =  T2.Channel \nWHERE T2.Written_by  =  \"Todd Casey\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7645747661590576,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
      "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "What are the countries that are not playing cartoons written by Todd Casey?",
      "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "generated_sql": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country\nFROM TV_Channel AS T1\nWHERE T1.Language != \"English\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.46117210388183594,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "generated_sql": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country\nFROM TV_Channel AS T1\nWHERE T1.Language != \"English\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6214296817779541,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "find id of the tv channels that from the countries where have more than two tv channels.",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "generated_sql": "SELECT T1.id \nFROM TV_Channel AS T1 \nJOIN (SELECT Country, COUNT(id) as count FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2) AS T2 \nON T1.Country = T2.Country",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.221792221069336,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of all tv channels that have more than 2 TV channels?",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "generated_sql": "SELECT DISTINCT T1.id \nFROM TV_Channel AS T1 \nJOIN TV_series AS T2 ON T1.id = T2.Channel \nGROUP BY T1.id \nHAVING COUNT(T1.id) > 2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3611483573913574,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "tvshow",
      "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
      "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
      "generated_sql": "SELECT T1.Package_Option \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T2.Channel  =  T1.id \nWHERE T2.Directed_by  !=  \"Ben Jones\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3514704704284668,
      "error": null
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
      "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
      "generated_sql": "SELECT DISTINCT T1.Package_Option \nFROM TV_Channel AS T1 \nJOIN Cartoon AS T2 ON T1.id  =  T2.Channel \nWHERE T2.Directed_by  !=  \"Ben Jones\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2308573722839355,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "How many poker players are there?",
      "gold_sql": "SELECT count(*) FROM poker_player",
      "generated_sql": "SELECT COUNT(*) FROM poker_player",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8170998096466064,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Count the number of poker players.",
      "gold_sql": "SELECT count(*) FROM poker_player",
      "generated_sql": "SELECT COUNT(*) FROM poker_player",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1013147830963135,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "List the earnings of poker players in descending order.",
      "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "generated_sql": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3848905563354492,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the earnings of poker players, ordered descending by value?",
      "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
      "generated_sql": "SELECT Earnings \nFROM poker_player \nORDER BY Earnings DESC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5558481216430664,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "List the final tables made and the best finishes of poker players.",
      "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
      "generated_sql": "SELECT \n  T1.Name, \n  T2.Final_Table_Made, \n  T2.Best_Finish\nFROM \n  people AS T1 \nJOIN \n  poker_player AS T2 ON T1.People_ID = T2.People_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5124776363372803,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the final tables made and best finishes for all poker players?",
      "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
      "generated_sql": "SELECT \n  T1.Name, \n  T2.Final_Table_Made, \n  T2.Best_Finish\nFROM \n  people AS T1 \nJOIN \n  poker_player AS T2 ON T1.People_ID = T2.People_ID",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8173937797546387,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players?",
      "gold_sql": "SELECT avg(Earnings) FROM poker_player",
      "generated_sql": "SELECT AVG(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5099577903747559,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the average earnings across all poker players.",
      "gold_sql": "SELECT avg(Earnings) FROM poker_player",
      "generated_sql": "SELECT AVG(T1.Earnings) FROM poker_player AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3286285400390625,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the money rank of the poker player with the highest earnings?",
      "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
      "generated_sql": "SELECT Money_Rank\nFROM poker_player\nORDER BY Earnings DESC\nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7972002029418945,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the money rank of the player with the greatest earnings.",
      "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
      "generated_sql": "SELECT Money_Rank\nFROM poker_player\nORDER BY Earnings DESC\nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6128454208374023,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
      "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
      "generated_sql": "SELECT MAX(T1.Final_Table_Made) \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings < 200000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3211703300476074,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
      "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
      "generated_sql": "SELECT MAX(T1.Final_Table_Made) \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nWHERE T1.Earnings < 200000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8068923950195312,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2917163372039795,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the names of all the poker players.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.416837215423584,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players whose earnings is higher than 300000?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nWHERE T1.Earnings  >  300000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.3356685638427734,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Give the names of poker players who have earnings above 300000.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nWHERE T1.Earnings  >  300000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4035778045654297,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "List the names of poker players ordered by the final tables made in ascending order.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nORDER BY T1.Final_Table_Made ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3822948932647705,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nORDER BY T1.Final_Table_Made ASC;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.842332124710083,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the birth date of the poker player with the lowest earnings?",
      "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
      "generated_sql": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.382796049118042,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the birth date of the poker player with the lowest earnings.",
      "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
      "generated_sql": "SELECT T2.Birth_Date \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Earnings ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5535597801208496,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the money rank of the tallest poker player?",
      "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "generated_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5009889602661133,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the money rank of the poker player with the greatest height.",
      "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
      "generated_sql": "SELECT T2.Money_Rank \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID = T2.People_ID \nORDER BY T1.Height DESC \nLIMIT 1;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40438032150268555,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players with height higher than 200?",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "generated_sql": "SELECT AVG(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4083271026611328,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Give average earnings of poker players who are taller than 200.",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "generated_sql": "SELECT AVG(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.613905668258667,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of poker players in descending order of earnings?",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nORDER BY T1.Earnings DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4069645404815674,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the names of poker players sorted by their earnings descending.",
      "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nORDER BY T1.Earnings DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41930627822875977,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are different nationalities of people and the corresponding number of people from each nation?",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "generated_sql": "SELECT DISTINCT T1.Nationality ,  COUNT(*) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID GROUP BY T1.Nationality",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.806222677230835,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "How many people are there of each nationality?",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "generated_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8892018795013428,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What is the most common nationality of people?",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nORDER BY COUNT(People_ID) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.0558679103851318,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Give the nationality that is most common across all people.",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Nationality \nFROM people AS T1 \nGROUP BY T1.Nationality \nORDER BY COUNT(T1.People_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.5349845886230469,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the nationalities that are shared by at least two people?",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T1.Nationality \nFROM people AS T1 \nJOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID \nGROUP BY T1.Nationality \nHAVING COUNT(T1.Nationality)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7258017063140869,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Return the nationalities for which there are two or more people.",
      "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "generated_sql": "SELECT T2.Nationality \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nGROUP BY T2.Nationality \nHAVING COUNT(T2.People_ID)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7198529243469238,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "List the names and birth dates of people in ascending alphabetical order of name.",
      "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
      "generated_sql": "SELECT T2.Name ,  T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Name ASC",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3157522678375244,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
      "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
      "generated_sql": "SELECT T2.Name ,  T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Name ASC",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2799389362335205,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Show names of people whose nationality is not \"Russia\".",
      "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "generated_sql": "SELECT T1.Name \nFROM people AS T1 \nWHERE T1.Nationality != \"Russia\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3373572826385498,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of people who are not from Russia?",
      "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
      "generated_sql": "SELECT T1.Name \nFROM people AS T1 \nWHERE T1.Nationality != \"Russia\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.638031005859375,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "List the names of people that are not poker players.",
      "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "generated_sql": "SELECT T1.Name \nFROM people AS T1 \nWHERE T1.People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4279806613922119,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "What are the names of people who do not play poker?",
      "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
      "generated_sql": "SELECT T2.Name \nFROM poker_player AS T1 \nJOIN people AS T2 ON T1.People_ID  =  T2.People_ID \nWHERE T1.Final_Table_Made  =  0",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.27811598777770996,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "How many distinct nationalities are there?",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Nationality) \nFROM people AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6681802272796631,
      "error": null
    },
    {
      "db_id": "poker_player",
      "question": "Count the number of different nationalities.",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Nationality) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4761512279510498,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "How many states are there?",
      "gold_sql": "SELECT count(*) FROM area_code_state",
      "generated_sql": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6494910717010498,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "List the contestant numbers and names, ordered by contestant name descending.",
      "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
      "generated_sql": "SELECT T1.contestant_number ,  T1.contestant_name FROM CONTESTANTS AS T1 ORDER BY T1.contestant_name DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7293856143951416,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "List the vote ids, phone numbers and states of all votes.",
      "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
      "generated_sql": "SELECT vote_id, phone_number, state \nFROM VOTES",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5505213737487793,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What are the maximum and minimum values of area codes?",
      "gold_sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
      "generated_sql": "SELECT MAX(T1.area_code) AS max_area_code, MIN(T1.area_code) AS min_area_code \nFROM AREA_CODE_STATE AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5588533878326416,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What is last date created of votes from the state 'CA'?",
      "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
      "generated_sql": "SELECT MAX(T2.created) \nFROM VOTES AS T1 \nJOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state \nWHERE T2.state = 'CA'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4882802963256836,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
      "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
      "generated_sql": "SELECT T1.contestant_name \nFROM CONTESTANTS AS T1 \nWHERE T1.contestant_name != 'Jessie Alloway'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7413251399993896,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What are the distinct states and create time of all votes?",
      "gold_sql": "SELECT DISTINCT state ,  created FROM votes",
      "generated_sql": "SELECT DISTINCT T1.state ,  T1.created \nFROM AREA_CODE_STATE AS T1 \nJOIN VOTES AS T2 ON T1.state  =  T2.state",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5609738826751709,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
      "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.contestant_number ,  T1.contestant_name \nFROM CONTESTANTS AS T1 \nJOIN VOTES AS T2 ON T1.contestant_number  =  T2.contestant_number \nGROUP BY T1.contestant_number \nHAVING COUNT(T2.vote_id)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.973172664642334,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
      "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
      "generated_sql": "SELECT T1.contestant_number ,  T1.contestant_name \nFROM CONTESTANTS AS T1 \nJOIN VOTES AS T2 ON T1.contestant_number  =  T2.contestant_number \nGROUP BY T1.contestant_number \nORDER BY COUNT(T2.vote_id) ASC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47144293785095215,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What are the number of votes from state 'NY' or 'CA'?",
      "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
      "generated_sql": "SELECT COUNT(*) \nFROM VOTES \nWHERE state IN ('NY', 'CA')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34287071228027344,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "How many contestants did not get voted?",
      "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
      "generated_sql": "SELECT COUNT(*) \nFROM CONTESTANTS \nWHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3049161434173584,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What is the area code in which the most voters voted?",
      "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.area_code \nFROM AREA_CODE_STATE AS T1 \nJOIN VOTES AS T2 ON T1.state = T2.state \nGROUP BY T1.area_code \nORDER BY COUNT(T2.vote_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4372599124908447,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
      "gold_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
      "generated_sql": "SELECT V.created, V.state, V.phone_number \nFROM VOTES AS V \nJOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number \nWHERE C.contestant_name = 'Tabatha Gehling'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7223465442657471,
      "error": null
    },
    {
      "db_id": "voter_1",
      "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
      "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "voter_1",
      "question": "Return the names of the contestants whose names contain the substring 'Al' .",
      "gold_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
      "generated_sql": "SELECT T1.contestant_name \nFROM CONTESTANTS AS T1 \nWHERE T1.contestant_name LIKE '%Al%'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28484487533569336,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the names of all the countries that became independent after 1950?",
      "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.IndepYear > 1950",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6050260066986084,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the names of the nations that were founded after 1950.",
      "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN country AS T2 ON T1.IndepYear  >  T2.IndepYear \nWHERE T2.IndepYear  =  ( SELECT MIN(IndepYear) \n                       FROM country \n                       WHERE IndepYear  >  1950 )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5161223411560059,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many countries have a republic as their form of government?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(T1.Code) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language  =  \"Republic\" AND T2.IsOfficial  =  \"T\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43601512908935547,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many countries have governments that are republics?",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT COUNT(T1.Code) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language  =  \"English\" AND T1.GovernmentForm  =  \"Republic\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4083428382873535,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total surface area of the countries in the Caribbean region?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
      "generated_sql": "SELECT SUM(T2.SurfaceArea) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Region = T2.Region \nWHERE T1.Region = 'Caribbean';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.47115635871887207,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How much surface area do the countires in the Carribean cover together?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
      "generated_sql": "SELECT SUM(T2.SurfaceArea) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Continent = T2.Continent \nJOIN country AS T3 ON T3.Continent = T2.Continent \nWHERE T1.Region = 'Caribbean' AND T2.Region = 'Caribbean' AND T3.Region = 'Caribbean'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5670795440673828,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which continent is Anguilla in?",
      "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
      "generated_sql": "SELECT T2.Continent \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Name  =  \"Anguilla\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.8672876358032227,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the continent name which Anguilla belongs to?",
      "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
      "generated_sql": "SELECT T2.Continent \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Name  =  \"Anguilla\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4054441452026367,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which region is the city Kabul located in?",
      "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
      "generated_sql": "SELECT T2.Region \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Name  =  \"Kabul\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3095874786376953,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What region is Kabul in?",
      "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
      "generated_sql": "SELECT T2.Region \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Name  =  \"Kabul\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.29821276664733887,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which language is the most popular in Aruba?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Name  =  \"Aruba\" \nORDER BY T2.Percentage DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8253283500671387,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What language is predominantly spoken in Aruba?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Name  =  \"Aruba\" AND T2.IsOfficial  =  \"T\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3374311923980713,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the population and life expectancies in Brazil?",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "generated_sql": "SELECT T2.LifeExpectancy, T2.Population \nFROM country AS T1 \nJOIN country AS T2 ON T1.Code = T2.Code \nWHERE T1.Name = 'Brazil';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.37349724769592285,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give me Brazil\u2019s population and life expectancies.",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "generated_sql": "SELECT c.LifeExpectancy, c.Population\nFROM country c\nWHERE c.Name = 'Brazil';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33359861373901367,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the region and population of Angola?",
      "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
      "generated_sql": "SELECT T2.Region ,  T2.Population FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Name  =  \"Angola\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3832356929779053,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What region does Angola belong to and what is its population?",
      "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
      "generated_sql": "SELECT T2.Region, T2.Population\nFROM country AS T1\nJOIN city AS T2 ON T2.CountryCode  =  T1.Code\nWHERE T1.Name  =  \"Angola\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4078388214111328,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
      "generated_sql": "SELECT AVG(T2.LifeExpectancy) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Region = T2.Region \nWHERE T1.Region = 'Central Africa';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3059210777282715,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How long is the people\u2019s average life expectancy in Central Africa?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
      "generated_sql": "SELECT T2.LifeExpectancy \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.Continent = 'Central Africa'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.40932154655456543,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the name of country that has the shortest life expectancy in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN country AS T2 ON T1.LifeExpectancy < T2.LifeExpectancy \nWHERE T1.Continent = 'Asia'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.514348030090332,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the name of the country in Asia with the lowest life expectancy.",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nWHERE T1.Continent = 'Asia' \nORDER BY T1.LifeExpectancy ASC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 3.3863275051116943,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total population and maximum GNP in Asia?",
      "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
      "generated_sql": "SELECT SUM(T1.Population) AS TotalPopulation, MAX(T2.GNP) AS MaxGNP\nFROM city AS T1\nJOIN country AS T2 ON T1.CountryCode = T2.Code\nWHERE T2.Continent = 'Asia'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5640335083007812,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Asia, and what is the largest GNP among them?",
      "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
      "generated_sql": "SELECT \n  COUNT(*) AS population_count, \n  MAX(T2.GNP) AS largest_GNP\nFROM \n  city AS T1\nJOIN \n  country AS T2 ON T1.CountryCode = T2.Code\nWHERE \n  T2.Continent = 'Asia';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5478184223175049,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the average life expectancy in African countries that are republics?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT AVG(T2.LifeExpectancy) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Continent = T2.Continent \nWHERE T1.GovernmentForm = 'Republic' AND T1.Continent = 'Africa'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 2.55879807472229,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the average life expectancy for countries in Africa which are republics?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
      "generated_sql": "SELECT AVG(T2.LifeExpectancy) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Continent = T2.Continent \nWHERE T1.GovernmentForm = 'Republic' AND T1.Continent = 'Africa'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7119519710540771,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total surface area of the continents Asia and Europe?",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "generated_sql": "SELECT SUM(T2.SurfaceArea) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Continent = T2.Continent \nWHERE T1.Name IN ('Asia', 'Europe')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8164513111114502,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the total surface area covered by countries in Asia or Europe.",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "generated_sql": "SELECT SUM(T2.SurfaceArea) \nFROM country AS T1 \nJOIN country AS T2 ON T1.Continent = 'Asia' OR T1.Continent = 'Europe'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4104952812194824,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Gelderland district?",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "generated_sql": "SELECT COUNT(*) \nFROM city \nWHERE District = 'Gelderland'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3050696849822998,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total population of Gelderland district?",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "generated_sql": "SELECT SUM(T1.Population) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  \"Gelderland\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8164162635803223,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the average GNP and total population in all nations whose government is US territory?",
      "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
      "generated_sql": "SELECT AVG(T2.GNP), SUM(T2.Population)\nFROM country AS T1\nJOIN country AS T2 ON T1.GovernmentForm = 'US Territory' AND T1.Capital = T2.Capital\nWHERE T1.GovernmentForm = 'US Territory';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.859215259552002,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the mean GNP and total population of nations which are considered US territory.",
      "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
      "generated_sql": "SELECT \n    AVG(T2.GNP) AS mean_GNP,\n    AVG(T2.Population) AS total_population\nFROM \n    country AS T1\nJOIN \n    country AS T2 ON T1.Code = T2.Code\nWHERE \n    T1.GovernmentForm = 'US Territory';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5777580738067627,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many unique languages are spoken in the world?",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3308680057525635,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct languages used around the world?",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3785834312438965,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many type of governments are in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.GovernmentForm) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Continent  =  \"Africa\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6705904006958008,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many different forms of governments are there in Africa?",
      "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
      "generated_sql": "SELECT DISTINCT T2.GovernmentForm \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.Continent = 'Africa'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4396324157714844,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of languages used in Aruba?",
      "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
      "generated_sql": "SELECT COUNT(T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Name  =  \"Aruba\";",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.932513952255249,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many languages are spoken in Aruba?",
      "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Name  =  \"Aruba\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.92214035987854,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many official languages does Afghanistan have?",
      "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(T2.Language) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T2.Name  =  \"Afghanistan\" AND T1.IsOfficial  =  \"T\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4072432518005371,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many official languages are spoken in Afghanistan?",
      "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(T2.Language) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T2.Name  =  \"Afghanistan\" AND T1.IsOfficial  =  \"T\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5266914367675781,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is name of the country that speaks the largest number of languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Percentage  =  ( SELECT MAX(Percentage) FROM countrylanguage )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6983859539031982,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the name of the nation that uses the greatest amount of languages.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Name \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nGROUP BY T2.Name \nORDER BY COUNT(T1.Language) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.818436861038208,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which continent has the most diverse languages?",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Continent \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nGROUP BY T2.Continent \nORDER BY COUNT(T1.Language) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5910289287567139,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which continent speaks the most languages?",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Continent \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nGROUP BY T2.Continent \nORDER BY COUNT(T2.Language) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4834928512573242,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many countries speak both English and Dutch?",
      "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What is the number of nations that use English and Dutch?",
      "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What are the names of nations speak both English and French?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of nations that speak both English and French.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What are the names of nations where both English and French are official languages?",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries with English and French as official languages.",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct continents where Chinese is spoken?",
      "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Continent) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.Language  =  \"Chinese\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4577450752258301,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many continents speak Chinese?",
      "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
      "generated_sql": "SELECT COUNT(T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Continent  =  \"Asia\" AND T2.Language  =  \"Chinese\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4073970317840576,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the regions that use English or Dutch?",
      "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
      "generated_sql": "SELECT DISTINCT T2.Region \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.45847225189208984,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which regions speak Dutch or English?",
      "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
      "generated_sql": "SELECT T2.Region \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language  =  \"Dutch\" OR T2.Language  =  \"English\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.31013989448547363,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the countries where either English or Dutch is the official language ?",
      "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
      "generated_sql": "SELECT DISTINCT T2.Name \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language IN ('English', 'Dutch')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3427155017852783,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which countries have either English or Dutch as an official language?",
      "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
      "generated_sql": "SELECT DISTINCT T2.Name \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.Language IN ('English', 'Dutch')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30394864082336426,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which language is the most popular on the Asian continent?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Continent  =  \"Asia\" \nGROUP BY T2.Language \nORDER BY SUM(T2.Percentage) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9836118221282959,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the language that is used by the largest number of Asian nations?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nJOIN ( SELECT T1.CountryCode ,  COUNT(T1.Language) AS count FROM countrylanguage AS T1 GROUP BY T1.CountryCode ) AS T3 ON T2.CountryCode  =  T3.CountryCode \nWHERE T3.count  =  ( SELECT MAX(count) FROM ( SELECT T1.CountryCode ,  COUNT(T1.Language) AS count FROM countrylanguage AS T1 GROUP BY T1.CountryCode ) AS T4 )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.620136022567749,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which languages are spoken by only one country in republic governments?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.GovernmentForm  =  'Republic' \nGROUP BY T2.Language \nHAVING COUNT(T1.Code)  =  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5165145397186279,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What languages are only used by a single country with a republic government?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.GovernmentForm  =  \"Republic\" \nGROUP BY T2.Language \nHAVING COUNT(T1.Code)  =  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5175833702087402,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Find the city with the largest population that uses English.",
      "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode \nWHERE T2.Language  =  \"English\" \nORDER BY T1.Population DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.237884521484375,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the most populace city that speaks English?",
      "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode \nWHERE T2.Language  =  \"English\" \nORDER BY T1.Population DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.4811103343963623,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Find the name, population and expected life length of asian country with the largest area?",
      "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.Population, T1.LifeExpectancy \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.Continent = 'Asia' \nAND T1.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.0208444595336914,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
      "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.Population, T1.LifeExpectancy \nFROM country AS T1 \nWHERE T1.Continent = 'Asia' \nORDER BY T1.SurfaceArea DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1293103694915771,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is average life expectancy in the countries where English is not the official language?",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
      "generated_sql": "SELECT AVG(T2.LifeExpectancy) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.IsOfficial  =  'F'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6296930313110352,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the mean life expectancy of countries in which English is not the official language.",
      "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
      "generated_sql": "SELECT AVG(T2.LifeExpectancy) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.IsOfficial  =  'F'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3879103660583496,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of people living in the nations that do not use English?",
      "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
      "generated_sql": "SELECT COUNT(T1.ID) \nFROM city AS T1 \nJOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode \nWHERE T2.IsOfficial  =  'F'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4500107765197754,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many people live in countries that do not speak English?",
      "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
      "generated_sql": "SELECT COUNT(T1.ID) \nFROM city AS T1 \nJOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode \nWHERE T2.Language  !=  'English'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4292147159576416,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the official language spoken in the country whose head of state is Beatrix?",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.HeadOfState  =  \"Beatrix\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.46544504165649414,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
      "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT T2.Language \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.HeadOfState  =  \"Beatrix\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40143275260925293,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
      "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.IndepYear  <  1930;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8089253902435303,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
      "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
      "generated_sql": "SELECT COUNT(DISTINCT T2.Language) \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.IndepYear  <  1930;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5103902816772461,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the countries that have greater surface area than any country in Europe?",
      "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
      "generated_sql": "SELECT DISTINCT T1.SurfaceArea \nFROM country AS T1 \nWHERE T1.SurfaceArea > (SELECT MAX(T2.SurfaceArea) \n                        FROM country AS T2 \n                        WHERE T2.Continent = 'Europe')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7029876708984375,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which countries have greater area than that of any country in Europe?",
      "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM country AS T1 \nJOIN country AS T2 ON T1.SurfaceArea > T2.SurfaceArea \nWHERE T2.Continent = 'Europe'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5923748016357422,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the African countries that have a  population less than any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.Continent = 'Africa' \nAND T1.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3110213279724121,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which African countries have a smaller population than that of any country in Asia?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN country AS T2 ON T1.Population < T2.Population \nJOIN city AS T3 ON T3.CountryCode = T2.Code \nJOIN city AS T4 ON T4.CountryCode = T1.Code \nWHERE T2.Continent = 'Asia' AND T1.Continent = 'Africa'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7058279514312744,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which Asian countries have a population that is larger than any country in Africa?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nWHERE T1.Continent = 'Asia' \nAND T1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.43194150924682617,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN country AS T2 ON T1.Population > T2.Population \nJOIN city AS T3 ON T3.CountryCode = T1.Code \nJOIN city AS T4 ON T4.CountryCode = T2.Code \nWHERE T1.Continent = 'Asia' AND T2.Continent = 'Africa'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9847848415374756,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes for countries that do not speak English?",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Return the country codes for countries that do not speak English.",
      "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes of countries where people use languages other than English?",
      "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
      "generated_sql": "SELECT T1.Code \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language  !=  'English'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4287254810333252,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the country codes for countries in which people speak langauges that are not English.",
      "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
      "generated_sql": "SELECT T1.Code \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T2.Language  !=  'English'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4077460765838623,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
      "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
      "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "world_1",
      "question": "Which cities are in European countries where English is not the official language?",
      "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nJOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode \nWHERE T2.Continent  =  \"Europe\" AND T3.IsOfficial  =  \"F\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5150437355041504,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the names of cities in Europe for which English is not the official language?",
      "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nJOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode \nWHERE T3.Language  =  'English' AND T3.IsOfficial  =  'F' AND T2.Continent  =  'Europe'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8002028465270996,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
      "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM city AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nJOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode \nWHERE T3.Language  =  \"Chinese\" AND T2.Continent  =  \"Asia\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42212963104248047,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
      "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM city AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nJOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode \nWHERE T2.Continent  =  \"Asia\" AND T3.Language  =  \"Chinese\" AND T3.IsOfficial  =  \"T\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.40674376487731934,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the name, independence year, and surface area of the country with the smallest population?",
      "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea \nFROM country AS T1 \nWHERE T1.Population = (SELECT MIN(Population) FROM country)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.349118709564209,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
      "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea \nFROM country AS T1 \nJOIN city AS T2 ON T2.CountryCode = T1.Code \nWHERE T2.Population = (SELECT MIN(Population) FROM city)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3561131954193115,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the population, name and leader of the country with the largest area?",
      "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT T1.Population, T1.Name, T1.HeadOfState \nFROM country AS T1 \nWHERE T1.SurfaceArea = ( SELECT MAX(T2.SurfaceArea) \n                         FROM country AS T2 )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33121585845947266,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the name, population, and head of state for the country that has the largest area.",
      "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name, T1.Population, T1.HeadOfState \nFROM country AS T1 \nWHERE T1.SurfaceArea = (SELECT MAX(T2.SurfaceArea) FROM country AS T2)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4883615970611572,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
      "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
      "generated_sql": "SELECT T1.Name, T2.Percentage \nFROM country AS T1 \nJOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode \nGROUP BY T1.Name \nHAVING COUNT(T2.Language)  >=  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.41552305221557617,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
      "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
      "generated_sql": "SELECT T1.Name, COUNT(T2.Language) AS NumberOfLanguages\nFROM country AS T1\nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode\nGROUP BY T1.Name\nHAVING COUNT(T2.Language) > 2;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5119068622589111,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
      "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
      "generated_sql": "SELECT \n  c.District, \n  COUNT(c.ID) AS num_cities\nFROM \n  city c\nWHERE \n  c.Population > (SELECT AVG(Population) FROM city)\nGROUP BY \n  c.District",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5130405426025391,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "How many cities in each district have a population that is above the average population across all cities?",
      "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
      "generated_sql": "SELECT T1.District, T1.Population \nFROM city AS T1 \nJOIN city AS T2 ON T1.District = T2.District \nWHERE T1.Population > (SELECT AVG(Population) FROM city)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3394937515258789,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
      "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
      "generated_sql": "SELECT \n  T2.GovernmentForm, \n  T1.Population \nFROM \n  city AS T1 \nJOIN \n  country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE \n  T2.LifeExpectancy  >  72\nGROUP BY \n  T2.GovernmentForm",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42037010192871094,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
      "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
      "generated_sql": "SELECT DISTINCT T1.GovernmentForm ,  SUM(T1.Population) AS TotalPopulation\nFROM country AS T1\nWHERE T1.LifeExpectancy  >  72\nGROUP BY T1.GovernmentForm;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7684493064880371,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
      "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
      "generated_sql": "SELECT \n    c.Continent, \n    AVG(c.LifeExpectancy) AS average_life_expectancy, \n    SUM(c.Population) AS total_population\nFROM \n    country c\nGROUP BY \n    c.Continent\nHAVING \n    AVG(c.LifeExpectancy) < 72;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8009414672851562,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
      "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
      "generated_sql": "SELECT DISTINCT T1.Continent ,  T1.Population ,  T1.LifeExpectancy\nFROM country AS T1\nWHERE T1.LifeExpectancy < 72;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3299863338470459,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the names and areas of countries with the top 5 largest area?",
      "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "generated_sql": "SELECT T2.Name, T2.SurfaceArea \nFROM country AS T1 \nJOIN country AS T2 ON T1.SurfaceArea < T2.SurfaceArea \nORDER BY T2.SurfaceArea DESC \nLIMIT 5;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6008095741271973,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the names and surface areas of the 5 largest countries.",
      "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
      "generated_sql": "SELECT T2.Name, T2.SurfaceArea \nFROM country AS T1 \nJOIN country AS T2 ON T1.SurfaceArea < T2.SurfaceArea \nWHERE T1.SurfaceArea IN (SELECT SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5189566612243652,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are names of countries with the top 3 largest population?",
      "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
      "generated_sql": "SELECT T2.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nORDER BY T2.Population DESC \nLIMIT 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4080629348754883,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the names of the 3 most populated countries.",
      "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nORDER BY T2.Population DESC \nLIMIT 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.50998854637146,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the nations with the 3 lowest populations?",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nORDER BY T2.Population ASC \nLIMIT 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40955305099487305,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the names of the 3 countries with the fewest people.",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code = T2.CountryCode \nGROUP BY T1.Name \nORDER BY T2.Population ASC \nLIMIT 3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.409712553024292,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "how many countries are in Asia?",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nWHERE Continent = 'Asia'",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4068624973297119,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries in Asia.",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "generated_sql": "SELECT COUNT(*) \nFROM country \nWHERE Continent = 'Asia';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30493688583374023,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
      "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
      "generated_sql": "SELECT T2.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Continent  =  \"Europe\" AND T2.Population  =  80000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4182314872741699,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
      "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
      "generated_sql": "SELECT T1.Name \nFROM country AS T1 \nJOIN city AS T2 ON T1.Code  =  T2.CountryCode \nWHERE T1.Continent  =  \"Europe\" AND T2.Population  =  80000;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.470839262008667,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
      "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
      "generated_sql": "SELECT \n    SUM(T1.Population) AS TotalPopulation,\n    AVG(T1.SurfaceArea) AS AverageArea\nFROM \n    country AS T1\nJOIN \n    country AS T2 ON T1.Continent = T2.Continent\nWHERE \n    T1.SurfaceArea > 3000 AND T2.Continent = 'North America';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5838484764099121,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
      "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
      "generated_sql": "SELECT \n    SUM(T1.Population) AS TotalPopulation,\n    AVG(T2.SurfaceArea) AS AverageSurfaceArea\nFROM \n    country AS T1\nJOIN \n    country AS T2 ON T1.Continent = T2.Continent\nWHERE \n    T1.Continent = 'North America'\n    AND T2.SurfaceArea > 3000;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3685269355773926,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the cities whose population is between 160000 and 900000?",
      "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nWHERE T1.Population BETWEEN 160000 AND 900000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3127105236053467,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the names of cities that have a population between 160000 and 900000 .",
      "gold_sql": "select name from city where population between 160000 and 900000",
      "generated_sql": "SELECT T1.Name \nFROM city AS T1 \nWHERE T1.Population BETWEEN 160000 AND 900000",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6110479831695557,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Which language is spoken by the largest number of countries?",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nGROUP BY T2.Language \nORDER BY COUNT(T2.Code) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.33159351348876953,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Give the language that is spoken in the most countries.",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T2.Language \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nGROUP BY T2.Language \nORDER BY COUNT(T2.Code) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5790224075317383,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the language spoken by the largest percentage of people in each country?",
      "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
      "generated_sql": "SELECT T2.Language \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nGROUP BY T2.Code \nORDER BY T1.Percentage DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.40731024742126465,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
      "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
      "generated_sql": "SELECT \n  c.Code, \n  cl.Language, \n  cl.Percentage\nFROM \n  country c\nJOIN \n  countrylanguage cl ON c.Code = cl.CountryCode\nORDER BY \n  cl.Percentage DESC;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3380558490753174,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT COUNT(T1.CountryCode) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.Language  =  \"Spanish\" \nGROUP BY T1.CountryCode \nORDER BY T1.Percentage DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.32751917839050293,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT COUNT(T2.CountryCode) \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.Language  =  \"Spanish\" AND T1.IsOfficial  =  \"T\";",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4463777542114258,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT T2.Code \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.Language  =  \"Spanish\" \nORDER BY T1.Percentage DESC",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4201540946960449,
      "error": null
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "generated_sql": "SELECT T2.Code \nFROM countrylanguage AS T1 \nJOIN country AS T2 ON T1.CountryCode  =  T2.Code \nWHERE T1.Language  =  \"Spanish\" AND T1.IsOfficial  =  \"T\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4074268341064453,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "How many conductors are there?",
      "gold_sql": "SELECT count(*) FROM conductor",
      "generated_sql": "SELECT COUNT(*) \nFROM conductor;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2667515277862549,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of conductors.",
      "gold_sql": "SELECT count(*) FROM conductor",
      "generated_sql": "SELECT COUNT(*) FROM conductor",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6524710655212402,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "List the names of conductors in ascending order of age.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nORDER BY T1.Age ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6139528751373291,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors, ordered by age?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nORDER BY T1.Age;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4474494457244873,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors whose nationalities are not \"USA\"?",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nWHERE T1.Nationality != \"USA\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.777057409286499,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Return the names of conductors that do not have the nationality \"USA\".",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nWHERE T1.Nationality != \"USA\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9561343193054199,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "generated_sql": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID \nORDER BY T2.Year_of_Work DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5660169124603271,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "generated_sql": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nORDER BY T1.Year_of_Founded DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5778319835662842,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What is the average attendance of shows?",
      "gold_sql": "SELECT avg(Attendance) FROM SHOW",
      "generated_sql": "SELECT AVG(T2.Attendance) \nFROM performance AS T1 \nJOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.278653621673584,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Return the average attendance across all shows.",
      "gold_sql": "SELECT avg(Attendance) FROM SHOW",
      "generated_sql": "SELECT AVG(T2.Attendance) FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID  =  T2.Show_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.38269591331481934,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
      "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "generated_sql": "SELECT MAX(CAST(REPLACE(SUBSTR(T1.Share, INSTR(T1.Share, '%') + 1) AS REAL) * 100 AS REAL)) AS max_share,\n       MIN(CAST(REPLACE(SUBSTR(T1.Share, INSTR(T1.Share, '%') + 1) AS REAL) * 100 AS REAL)) AS min_share\nFROM performance AS T1\nWHERE T1.Type != 'Live final'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5143563747406006,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
      "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "generated_sql": "SELECT MAX(CAST(REPLACE(SUBSTR(T1.Share, INSTR(T1.Share, '%') + 1) AS REAL) * 100 AS REAL)) , \nMIN(CAST(REPLACE(SUBSTR(T1.Share, INSTR(T1.Share, '%') + 1) AS REAL) * 100 AS REAL)) \nFROM performance AS T1 \nWHERE T1.Type != \"Live final\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5087864398956299,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "How many different nationalities do conductors have?",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Nationality) \nFROM conductor AS T1 \nJOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5090336799621582,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of different nationalities of conductors.",
      "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
      "generated_sql": "SELECT COUNT(DISTINCT T1.Nationality) \nFROM conductor AS T1 \nJOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6127939224243164,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "List names of conductors in descending order of years of work.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nORDER BY T1.Year_of_Work DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4079627990722656,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nORDER BY T1.Year_of_Work DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3467233180999756,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "List the name of the conductor with the most years of work.",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nORDER BY T1.Year_of_Work DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3689134120941162,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has worked the greatest number of years?",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN performance AS T2 ON T1.Conductor_ID  =  T2.Orchestra_ID \nGROUP BY T1.Name \nORDER BY COUNT(T1.Name) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.510948896408081,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Show the names of conductors and the orchestras they have conducted.",
      "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "generated_sql": "SELECT T1.Name ,  T2.Orchestra \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.5322728157043457,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
      "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "generated_sql": "SELECT T1.Name ,  T2.Orchestra \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4085423946380615,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Show the names of conductors that have conducted more than one orchestras.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.36651182174682617,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors who have conducted at more than one orchestra?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Orchestra_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.664452075958252,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Show the name of the conductor that has conducted the most number of orchestras.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nGROUP BY T1.Name \nORDER BY COUNT(*) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5025866031646729,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has conducted the most orchestras?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM conductor AS T1 \nJOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nGROUP BY T1.Name \nORDER BY COUNT(T2.Orchestra_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9174370765686035,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
      "generated_sql": "SELECT T2.Name \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nWHERE T1.Year_of_Founded  >  2008",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4108867645263672,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
      "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
      "generated_sql": "SELECT T2.Name \nFROM orchestra AS T1 \nJOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID \nWHERE T1.Year_of_Founded  >  2008;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41831111907958984,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Please show the different record companies and the corresponding number of orchestras.",
      "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
      "generated_sql": "SELECT DISTINCT T1.Record_Company ,  COUNT(T2.Performance_ID) \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nGROUP BY T1.Record_Company",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.48816657066345215,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "How many orchestras does each record company manage?",
      "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
      "generated_sql": "SELECT T1.Record_Company ,  COUNT(T2.Orchestra_ID) AS num_orchestras \nFROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nGROUP BY T1.Record_Company",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5521583557128906,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Please show the record formats of orchestras in ascending order of count.",
      "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "generated_sql": "SELECT T1.Major_Record_Format \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Major_Record_Format \nORDER BY COUNT(T1.Major_Record_Format) ASC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6011335849761963,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the major record formats of orchestras, sorted by their frequency?",
      "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
      "generated_sql": "SELECT T1.Major_Record_Format \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID \nGROUP BY T1.Major_Record_Format \nORDER BY COUNT(T1.Major_Record_Format) DESC",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8025834560394287,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "List the record company shared by the most number of orchestras.",
      "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nGROUP BY T1.Record_Company \nORDER BY COUNT(T2.Performance_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6015453338623047,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What is the record company used by the greatest number of orchestras?",
      "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Record_Company \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nGROUP BY T1.Record_Company \nORDER BY COUNT(T2.Performance_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4197664260864258,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "List the names of orchestras that have no performance.",
      "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "generated_sql": "SELECT T1.Orchestra \nFROM orchestra AS T1 \nLEFT JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nWHERE T2.Orchestra_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34564709663391113,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are the orchestras that do not have any performances?",
      "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
      "generated_sql": "SELECT T1.Orchestra \nFROM orchestra AS T1 \nLEFT JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nWHERE T2.Performance_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.28725337982177734,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
      "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "orchestra",
      "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
      "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "orchestra",
      "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(T1.Orchestra_ID) \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nWHERE T1.Major_Record_Format  =  \"CD\" OR T1.Major_Record_Format  =  \"DVD\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.38774824142456055,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Count the number of orchestras that have CD or DVD as their record format.",
      "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
      "generated_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format IN ('CD', 'DVD')",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30563807487487793,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "Show the years in which orchestras that have given more than one performance are founded.",
      "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nGROUP BY T1.Orchestra_ID \nHAVING COUNT(T2.Performance_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29344987869262695,
      "error": null
    },
    {
      "db_id": "orchestra",
      "question": "What are years of founding for orchestras that have had more than a single performance?",
      "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Year_of_Founded \nFROM orchestra AS T1 \nJOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID \nGROUP BY T1.Year_of_Founded \nHAVING COUNT(T2.Performance_ID)  >  1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.42017340660095215,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are there?",
      "gold_sql": "SELECT count(*) FROM Highschooler",
      "generated_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade = 9",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2713937759399414,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Count the number of high schoolers.",
      "gold_sql": "SELECT count(*) FROM Highschooler",
      "generated_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade = 9",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.22310924530029297,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names and grades of each high schooler.",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT T1.name ,  T1.grade\nFROM Highschooler AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4239187240600586,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names and grades for each high schooler?",
      "gold_sql": "SELECT name ,  grade FROM Highschooler",
      "generated_sql": "SELECT T1.name ,  T1.grade\nFROM Highschooler AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30567193031311035,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show all the grades of the high schoolers.",
      "gold_sql": "SELECT grade FROM Highschooler",
      "generated_sql": "SELECT T1.grade FROM Highschooler AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.26764392852783203,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What is the grade of each high schooler?",
      "gold_sql": "SELECT grade FROM Highschooler",
      "generated_sql": "SELECT T1.grade\nFROM Highschooler AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34688901901245117,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What grade is Kyle in?",
      "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT T1.grade\nFROM Highschooler AS T1\nJOIN Likes AS T2 ON T1.ID = T2.student_id\nWHERE T1.name = \"Kyle\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30544495582580566,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Return the grade for the high schooler named Kyle.",
      "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT T1.grade\nFROM Highschooler AS T1\nWHERE T1.name = \"Kyle\";",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4085075855255127,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of all high schoolers in grade 10.",
      "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nWHERE T1.grade = 10;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6132493019104004,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names of all high schoolers in grade 10?",
      "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
      "generated_sql": "SELECT name \nFROM Highschooler \nWHERE grade = 10;",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.303910493850708,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the ID of the high schooler named Kyle.",
      "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT T1.id FROM Highschooler AS T1 WHERE T1.name  =  \"Kyle\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2874481678009033,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What is Kyle's id?",
      "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.id FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.ID  =  T2.ID WHERE T1.name  =  \"Kyle\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5345714092254639,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are there in grade 9 or 10?",
      "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade IN (9, 10)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.39325857162475586,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Count the number of high schoolers in grades 9 or 10.",
      "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
      "generated_sql": "SELECT COUNT(*) \nFROM Highschooler \nWHERE grade IN (9, 10)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.8416612148284912,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the number of high schoolers for each grade.",
      "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
      "generated_sql": "SELECT T1.grade, COUNT(*) as number_of_highschoolers\nFROM Highschooler AS T1\nGROUP BY T1.grade",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24615025520324707,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many high schoolers are in each grade?",
      "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
      "generated_sql": "SELECT T1.grade, COUNT(*) FROM Highschooler AS T1 GROUP BY T1.grade",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5945823192596436,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Which grade has the most high schoolers?",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.grade \nFROM Highschooler AS T1 \nGROUP BY T1.grade \nORDER BY COUNT(T1.ID) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.30820155143737793,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Return the grade that has the greatest number of high schoolers.",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.grade\nFROM Highschooler AS T1\nJOIN (\n  SELECT grade, COUNT(*) as count\n  FROM Highschooler\n  GROUP BY grade\n) AS T2\nON T1.grade = T2.grade\nWHERE T2.count = (\n  SELECT MAX(count)\n  FROM (\n    SELECT grade, COUNT(*) as count\n    FROM Highschooler\n    GROUP BY grade\n  ) AS T3\n);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4986915588378906,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show me all grades that have at least 4 students.",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
      "generated_sql": "SELECT T1.grade\nFROM Highschooler AS T1\nJOIN (\n  SELECT grade\n  FROM Highschooler\n  GROUP BY grade\n  HAVING COUNT(*) >= 4\n) AS T2 ON T1.grade = T2.grade",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.30112552642822266,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Which grades have 4 or more high schoolers?",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
      "generated_sql": "SELECT DISTINCT T1.grade\nFROM Highschooler AS T1\nJOIN Friend AS T2 ON T1.ID = T2.student_id\nGROUP BY T1.grade\nHAVING COUNT(T2.student_id) >= 4",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.45595383644104004,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the student IDs and numbers of friends corresponding to each.",
      "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
      "generated_sql": "SELECT T1.student_id ,  COUNT(T2.student_id) FROM Friend AS T1 JOIN Friend AS T2 ON T1.student_id  =  T2.student_id WHERE T1.student_id  <  T2.student_id GROUP BY T1.student_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3027923107147217,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many friends does each student have?",
      "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
      "generated_sql": "SELECT T1.name ,  COUNT(T2.student_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3475377559661865,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high school students and their corresponding number of friends.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name ,  COUNT(T2.student_id) AS num_friends\nFROM Highschooler AS T1\nJOIN Friend AS T2 ON T1.ID  =  T2.student_id\nGROUP BY T1.name\nHAVING COUNT(T2.student_id)  >  0;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3381354808807373,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names of the high schoolers and how many friends does each have?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name ,  COUNT(T2.student_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3410818576812744,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What is the name of the high schooler who has the greatest number of friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID  =  T2.student_id \nGROUP BY T1.name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3596363067626953,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Return the name of the high school student with the most friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID  =  T2.student_id \nGROUP BY T1.name \nORDER BY COUNT(T2.student_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.4092283248901367,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high schoolers who have at least 3 friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID  =  T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T2.student_id)  >=  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.610856294631958,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have 3 or more friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID  =  T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T2.student_id)  >=  3",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6134727001190186,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of all of the high schooler Kyle's friends.",
      "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.friend_id  =  T2.ID \nWHERE T1.student_id  =  (SELECT ID FROM Highschooler WHERE name  =  \"Kyle\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.602461576461792,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Return the names of friends of the high school student Kyle.",
      "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT T2.name \nFROM Friend AS T1 \nJOIN Highschooler AS T2 ON T1.friend_id  =  T2.ID \nWHERE T1.student_id  =  (SELECT ID FROM Highschooler WHERE name  =  \"Kyle\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.48098301887512207,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many friends does the high school student Kyle have?",
      "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9609823226928711,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Count the number of friends Kyle has.",
      "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = 1510",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6630969047546387,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show ids of all students who do not have any friends.",
      "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the ids of high school students who do not have friends?",
      "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Show names of all high school students who do not have any friends.",
      "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have no friends?",
      "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
      "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the ids of students who both have friends and are liked?",
      "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Show name of all students who have some friends and also are liked by someone else.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who both have friends and are liked?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "network_1",
      "question": "Count the number of likes for each student id.",
      "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
      "generated_sql": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.2129824161529541,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many likes correspond to each student id?",
      "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
      "generated_sql": "SELECT T1.student_id ,  COUNT(T2.liked_id) FROM Likes AS T1 JOIN Likes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4515855312347412,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name ,  COUNT(T2.student_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id)  >  0",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5159764289855957,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
      "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
      "generated_sql": "SELECT T1.name ,  COUNT(T2.student_id) FROM Highschooler AS T1 LEFT JOIN Likes AS T2 ON T1.ID  =  T2.student_id WHERE T1.grade  =  9 GROUP BY T1.name",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8013458251953125,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What is the name of the high schooler who has the greatest number of likes?",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2715449333190918,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Give the name of the student with the most likes.",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2682623863220215,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of students who have at least 2 likes.",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 ON T1.ID = T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T2.student_id) >= 2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39169979095458984,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have 2 or more likes?",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Likes AS T2 ON T1.ID  =  T2.student_id \nGROUP BY T1.name \nHAVING COUNT(T2.student_id)  >=  2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.6152305603027344,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID  =  T2.student_id \nJOIN Friend AS T3 ON T1.ID  =  T3.student_id \nWHERE T2.friend_id  =  T3.friend_id AND T1.grade  >  5 GROUP BY T1.name HAVING COUNT(T1.name)  >=  2",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4064640998840332,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.name \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID  =  T2.student_id \nJOIN Friend AS T3 ON T1.ID  =  T3.friend_id \nWHERE T1.grade  >  5 AND T2.student_id  =  T3.student_id GROUP BY T1.name HAVING COUNT(T2.student_id)  >=  2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.39296555519104004,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "How many likes does Kyle have?",
      "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.31809306144714355,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Return the number of likes that the high schooler named Kyle has.",
      "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
      "generated_sql": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.616753339767456,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Find the average grade of all students who have some friends.",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT AVG(T1.grade) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.2957160472869873,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What is the average grade of students who have friends?",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT AVG(T1.grade) \nFROM Highschooler AS T1 \nJOIN Friend AS T2 ON T1.ID = T2.student_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.33435559272766113,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "Find the minimum grade of students who have no friends.",
      "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT MIN(T1.grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.29067063331604004,
      "error": null
    },
    {
      "db_id": "network_1",
      "question": "What is the lowest grade of students who do not have any friends?",
      "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "generated_sql": "SELECT T1.grade \nFROM Highschooler AS T1 \nLEFT JOIN Friend AS T2 ON T1.ID = T2.student_id \nWHERE T2.student_id IS NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.418992280960083,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which states have both owners and professionals living there?",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the states where both owners and professionals live.",
      "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of the dogs who have gone through any treatments?",
      "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT AVG(T2.age) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4841468334197998,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the average age of the dogs who went through treatments.",
      "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT AVG(T2.age) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.48204636573791504,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
      "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
      "generated_sql": "SELECT DISTINCT T1.professional_id ,  T1.last_name ,  T1.cell_number\nFROM Professionals AS T1\nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id\nWHERE T2.dog_id IN (\n  SELECT T3.dog_id\n  FROM Dogs AS T3\n  WHERE T3.state  =  \"Indiana\"\n  UNION\n  SELECT T3.dog_id\n  FROM Dogs AS T3\n  JOIN Treatments AS T4 ON T3.dog_id  =  T4.dog_id\n  GROUP BY T3.dog_id\n  HAVING COUNT(T4.treatment_id)  >  2\n)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.635627269744873,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
      "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
      "generated_sql": "SELECT DISTINCT T1.professional_id ,  T1.last_name ,  T1.cell_number\nFROM Professionals AS T1\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(*)  >  2\n) AS T2 ON T1.professional_id  =  T2.professional_id\nUNION\nSELECT DISTINCT T1.professional_id ,  T1.last_name ,  T1.cell_number\nFROM Professionals AS T1\nJOIN Owners AS T2 ON T1.state  =  T2.state",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2348668575286865,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
      "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
      "generated_sql": "SELECT T1.name \nFROM Dogs AS T1 \nWHERE T1.dog_id NOT IN (\n  SELECT T2.dog_id \n  FROM Treatments AS T2 \n  WHERE T2.cost_of_treatment > 1000\n);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 5.579981327056885,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
      "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
      "generated_sql": "SELECT T1.name \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id \nWHERE T2.cost_of_treatment  <=  1000;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 3.029301166534424,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which first names are used for professionals or owners but are not used as dog names?",
      "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
      "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
      "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id, T1.first_name, T1.last_name\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5096650123596191,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id, T1.first_name, T1.last_name\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6135401725769043,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
      "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(T2.treatment_id)  >=  2;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2443571090698242,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
      "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(T2.treatment_id)  >=  2;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5992100238800049,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the name of the breed with the most dogs?",
      "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.breed_name \nFROM Breeds AS T1 \nJOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code \nGROUP BY T1.breed_name \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6474297046661377,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which breed do the most dogs have? Give me the breed name.",
      "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.breed_name\nFROM Breeds AS T1\nJOIN Dogs AS T2 ON T1.breed_code = T2.breed_code\nGROUP BY T1.breed_name\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3766152858734131,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
      "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id ,  T2.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id \nGROUP BY T1.owner_id \nORDER BY COUNT(T2.dog_id) DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.44527745246887207,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id ,  T2.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id \nJOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id \nWHERE T3.cost_of_treatment  =  (SELECT MAX(cost_of_treatment) FROM Treatments);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6763780117034912,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the description of the treatment type that costs the least money in total?",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "generated_sql": "SELECT T3.treatment_type_description \nFROM Treatment_Types AS T1 \nJOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code \nJOIN (SELECT treatment_type_code, MIN(cost_of_treatment) as min_cost \n      FROM Treatments \n      GROUP BY treatment_type_code) AS T4 ON T1.treatment_type_code = T4.treatment_type_code \nJOIN T2 ON T2.treatment_type_code = T4.treatment_type_code \nWHERE T4.min_cost = (SELECT MIN(cost_of_treatment) \n                     FROM Treatments);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.8074491024017334,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Give me the description of the treatment type whose total cost is the lowest.",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "generated_sql": "SELECT T3.treatment_type_description \nFROM Treatment_Types AS T3 \nJOIN Treatments AS T2 ON T3.treatment_type_code = T2.treatment_type_code \nWHERE T2.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6514263153076172,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id ,  T1.zip_code\nFROM Owners AS T1\nJOIN (\n  SELECT T2.owner_id ,  SUM(T3.cost_of_treatment) AS total_cost\n  FROM Dogs AS T1\n  JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\n  JOIN Charges AS T3 ON T2.treatment_type_code  =  T3.charge_type\n  GROUP BY T2.owner_id\n) AS T4 ON T1.owner_id  =  T4.owner_id\nORDER BY T4.total_cost DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.786738395690918,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "generated_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY SUM(T2.cost_of_treatment) DESC LIMIT 1",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.35257458686828613,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT T1.professional_id ,  T1.cell_number\nFROM Professionals AS T1\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(*)  >=  2\n) AS T2 ON T1.professional_id  =  T2.professional_id",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4672870635986328,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "generated_sql": "SELECT DISTINCT T1.professional_id ,  T1.cell_number \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id \nGROUP BY T1.professional_id \nHAVING COUNT(DISTINCT T2.treatment_type_code)  >=  2",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3844594955444336,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "generated_sql": "SELECT T1.first_name ,  T1.last_name \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id \nWHERE T2.cost_of_treatment  <  ( SELECT AVG(cost_of_treatment) FROM Treatments )",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8670222759246826,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "generated_sql": "SELECT T2.first_name, T2.last_name\nFROM Treatments AS T1\nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id\nWHERE T1.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9088366031646729,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the date of each treatment, together with the first name of the professional who operated it.",
      "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SELECT T2.date_of_treatment ,  T3.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id \nJOIN Professionals AS T3 ON T2.professional_id  =  T3.professional_id \nWHERE T1.treatment_type_code  =  \"WALK\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.6452224254608154,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the date and the operating professional's first name of each treatment?",
      "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
      "generated_sql": "SELECT T2.date_of_treatment ,  T3.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id JOIN Owners AS T3 ON T2.first_name  =  T3.first_name WHERE T1.treatment_type_code  =  \"WALK\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.220078706741333,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the cost of each treatment and the corresponding treatment type description.",
      "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
      "generated_sql": "SELECT T3.treatment_type_description ,  T2.cost_of_treatment\nFROM Treatments AS T1\nJOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\nJOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.6228830814361572,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the cost and treatment type description of each treatment?",
      "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
      "generated_sql": "SELECT T3.treatment_type_description ,  T2.cost_of_treatment\nFROM Treatments AS T1\nJOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\nJOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5971789360046387,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List each owner's first name, last name, and the size of his for her dog.",
      "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T2.size_description\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3563535213470459,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each owner's first name, last name, and the size of their dog?",
      "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT \n  T1.first_name, \n  T1.last_name, \n  T2.size_description\nFROM \n  Owners AS T1\nJOIN \n  Dogs AS T2 ON T1.owner_id = T2.owner_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4012157917022705,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List pairs of the owner's first name and the dogs's name.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name ,  T1.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4620387554168701,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each owner's first name and their dogs's name?",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
      "generated_sql": "SELECT T1.first_name ,  T1.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.5520555973052979,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "generated_sql": "SELECT T1.name ,  T3.date_of_treatment \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code \nWHERE T1.breed_code  =  (SELECT breed_code FROM Breeds ORDER BY COUNT(DISTINCT dog_id) ASC LIMIT 1)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6132237911224365,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "generated_sql": "SELECT T1.name ,  T1.date_of_treatment \nFROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id \nWHERE T1.breed_code IN (SELECT breed_code FROM Breeds WHERE breed_name  =  \"Eskimo\")",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4250681400299072,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
      "generated_sql": "SELECT T1.first_name ,  T1.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id \nWHERE T1.state  =  \"Virginia\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.3205890655517578,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
      "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
      "generated_sql": "SELECT T1.first_name ,  T2.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id \nWHERE T1.state  =  \"Virginia\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5419774055480957,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
      "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "generated_sql": "SELECT T1.date_arrived ,  T1.date_departed \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id \nWHERE T2.treatment_type_code  =  \"WALK\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8588852882385254,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
      "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "generated_sql": "SELECT T1.date_arrived ,  T1.date_departed \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5442295074462891,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the last name of the owner owning the youngest dog.",
      "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
      "generated_sql": "SELECT T2.last_name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nWHERE T2.age = (SELECT MIN(age) FROM Dogs);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6061253547668457,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Who owns the youngest dog? Give me his or her last name.",
      "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
      "generated_sql": "SELECT T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  (SELECT MIN(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 1.0998120307922363,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
      "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "generated_sql": "SELECT T1.email_address \nFROM Professionals AS T1 \nJOIN Owners AS T2 ON T1.state = T2.state \nWHERE T2.state IN ('Hawaii', 'Wisconsin')",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.861762285232544,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
      "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "generated_sql": "SELECT T2.email_address \nFROM Professionals AS T1 \nJOIN Owners AS T2 ON T1.state  =  T2.state \nWHERE T1.state  =  \"Hawaii\" OR T1.state  =  \"Wisconsin\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.9002797603607178,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the arriving date and the departing date of all the dogs?",
      "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
      "generated_sql": "SELECT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 2.1699678897857666,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the arrival date and the departure date for all the dogs.",
      "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
      "generated_sql": "SELECT T1.date_arrived ,  T1.date_departed \nFROM Dogs AS T1 \nWHERE T1.date_departed IS NOT NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 4.344873428344727,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs went through any treatments?",
      "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(*) \nFROM Treatments AS T1 \nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.2631328105926514,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Count the number of dogs that went through a treatment.",
      "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9387369155883789,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How many professionals have performed any treatment to dogs?",
      "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT T1.professional_id) \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.dog_id IN (SELECT dog_id FROM Dogs WHERE breed_code IN (SELECT breed_code FROM Breeds WHERE breed_name = 'Dog'))",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.597726583480835,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of professionals who have ever treated dogs.",
      "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
      "generated_sql": "SELECT COUNT(DISTINCT T2.professional_id) \nFROM Dogs AS T1 \nJOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code \nWHERE T3.treatment_type_description  =  \"Dog\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 1.3465988636016846,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
      "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "generated_sql": "SELECT T1.role_code, T1.street, T1.city, T1.state\nFROM Professionals AS T1\nJOIN Cities AS T2 ON T1.city = T2.city_name\nWHERE T2.city_name LIKE '%West%';",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.33342432975769043,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
      "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "generated_sql": "SELECT T1.role_code ,  T1.street ,  T1.city ,  T1.state\nFROM Professionals AS T1\nWHERE T1.city LIKE '%West%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5713174343109131,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
      "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T1.email_address\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nJOIN Breeds AS T3 ON T2.breed_code = T3.breed_code\nWHERE T3.breed_name LIKE '%North%'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5096778869628906,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
      "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
      "generated_sql": "SELECT T1.first_name, T1.last_name, T1.email_address\nFROM Owners AS T1\nWHERE T1.state LIKE '%North%';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6120636463165283,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs have an age below the average?",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
      "generated_sql": "SELECT T1.age \nFROM Dogs AS T1 \nWHERE T1.age < (SELECT AVG(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5389347076416016,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Count the number of dogs of an age below the average.",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37976598739624023,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does the most recent treatment cost?",
      "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "generated_sql": "SELECT T3.cost_of_treatment\nFROM Treatments AS T1\nJOIN Dogs AS T2 ON T1.dog_id = T2.dog_id\nJOIN Professionals AS T3 ON T1.professional_id = T3.professional_id\nORDER BY T1.date_of_treatment DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.8204700946807861,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Show me the cost of the most recently performed treatment.",
      "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "generated_sql": "SELECT T3.cost_of_treatment\nFROM Treatments AS T1\nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id\nJOIN Dogs AS T3 ON T1.dog_id = T3.dog_id\nORDER BY T1.date_of_treatment DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6260600090026855,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How many dogs have not gone through any treatment?",
      "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(dog_id) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4953427314758301,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the number of dogs that have not received any treatment .",
      "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
      "generated_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5772373676300049,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How many owners temporarily do not have any dogs?",
      "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
      "generated_sql": "SELECT COUNT(T1.owner_id) \nFROM Owners AS T1 \nLEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nWHERE T2.dog_id IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.37221503257751465,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of owners who do not own any dogs at this moment.",
      "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
      "generated_sql": "SELECT COUNT(T1.owner_id) \nFROM Owners AS T1 \nLEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nWHERE T2.owner_id IS NULL;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5390863418579102,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How many professionals did not operate any treatment on dogs?",
      "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(T1.professional_id) \nFROM Professionals AS T1 \nLEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.treatment_id IS NULL AND T1.role_code = 'Employee'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.45096397399902344,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the number of professionals who have not treated any dogs.",
      "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
      "generated_sql": "SELECT COUNT(T1.professional_id) \nFROM Professionals AS T1 \nLEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nWHERE T2.treatment_id IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.41561222076416016,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
      "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
      "generated_sql": "SELECT \n  D.name, \n  D.age, \n  D.weight\nFROM \n  Dogs D\nWHERE \n  D.abandoned_yn = '1';",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6060891151428223,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
      "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
      "generated_sql": "SELECT T1.name ,  T1.age ,  T1.weight \nFROM Dogs AS T1 \nWHERE T1.abandoned_yn  =  \"1\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6058223247528076,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of all the dogs?",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "generated_sql": "SELECT AVG(T1.age) FROM Dogs AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1335742473602295,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Compute the average age of all the dogs.",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "generated_sql": "SELECT AVG(T1.age) FROM Dogs AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.408550500869751,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the age of the oldest dog?",
      "gold_sql": "SELECT max(age) FROM Dogs",
      "generated_sql": "SELECT T2.age \nFROM Dogs AS T1 \nJOIN Owners AS T2 ON T1.owner_id = T2.owner_id \nWHERE T1.age = (SELECT MAX(age) FROM Dogs);",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6423046588897705,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Tell me the age of the oldest dog.",
      "gold_sql": "SELECT max(age) FROM Dogs",
      "generated_sql": "SELECT T1.age \nFROM Dogs AS T1 \nWHERE T1.age = (SELECT MAX(age) FROM Dogs)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.38063478469848633,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does each charge type costs? List both charge type and amount.",
      "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
      "generated_sql": "SELECT T1.charge_type ,  T1.charge_amount\nFROM Charges AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4058370590209961,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List each charge type and its amount.",
      "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
      "generated_sql": "SELECT T1.charge_type ,  T1.charge_amount\nFROM Charges AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.715031623840332,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "How much does the most expensive charge type costs?",
      "gold_sql": "SELECT max(charge_amount) FROM Charges",
      "generated_sql": "SELECT T2.charge_amount \nFROM Charges AS T1 \nJOIN (SELECT MAX(charge_amount) AS max_amount FROM Charges) AS T3 \nON T1.charge_amount = T3.max_amount;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.409578800201416,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the charge amount of the most expensive charge type?",
      "gold_sql": "SELECT max(charge_amount) FROM Charges",
      "generated_sql": "SELECT T1.charge_amount\nFROM Charges AS T1\nORDER BY T1.charge_amount DESC\nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4278562068939209,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the email, cell phone and home phone of all the professionals.",
      "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "generated_sql": "SELECT T1.email_address ,  T1.cell_number ,  T1.home_phone FROM Professionals AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4890177249908447,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the email, cell phone and home phone of each professional?",
      "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "generated_sql": "SELECT T1.email_address ,  T1.cell_number ,  T1.home_phone \nFROM Professionals AS T1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5114719867706299,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are all the possible breed type and size type combinations?",
      "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "generated_sql": "SELECT DISTINCT T1.breed_code ,  T2.size_description \nFROM Breeds AS T1 \nJOIN Sizes AS T2 ON T1.breed_code  =  T2.size_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.40757274627685547,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the distinct breed type and size type combinations for dogs.",
      "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "generated_sql": "SELECT DISTINCT T1.breed_code ,  T2.size_description \nFROM Breeds AS T1 \nJOIN Sizes AS T2 ON T1.breed_code  =  T2.size_code \nJOIN Dogs AS T3 ON T1.breed_code  =  T3.breed_code \nJOIN Sizes AS T4 ON T3.size_code  =  T4.size_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5108754634857178,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "List the first name of all the professionals along with the description of the treatment they have done.",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "generated_sql": "SELECT T1.first_name ,  T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id \nJOIN Treatment_Types AS T3 ON T3.treatment_type_code  =  T2.treatment_type_code;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.5563628673553467,
      "error": null
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each professional's first name and description of the treatment they have performed?",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "generated_sql": "SELECT T2.first_name ,  T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id \nJOIN Treatment_Types AS T3 ON T3.treatment_type_code  =  T2.treatment_type_code",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.6194922924041748,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "How many singers are there?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.4408438205718994,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What is the count of singers?",
      "gold_sql": "SELECT count(*) FROM singer",
      "generated_sql": "SELECT COUNT(*) FROM singer",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5131509304046631,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "List the name of singers in ascending order of net worth.",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "generated_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.6394743919372559,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the names of singers ordered by ascending net worth?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "generated_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7821230888366699,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the birth year and citizenship of singers?",
      "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
      "generated_sql": "SELECT T1.Birth_Year ,  T1.Citizenship FROM singer AS T1 WHERE T1.Name  =  'singer'",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.9572594165802002,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the birth years and citizenships of the singers?",
      "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
      "generated_sql": "SELECT T1.Birth_Year ,  T1.Citizenship FROM singer AS T1 WHERE T1.Singer_ID IN (SELECT T2.Singer_ID FROM song AS T2)",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.7779948711395264,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "List the name of singers whose citizenship is not \"France\".",
      "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nWHERE T1.Citizenship != \"France\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3847084045410156,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers who are not French citizens?",
      "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nWHERE T1.Citizenship != \"France\"",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3364105224609375,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show the name of singers whose birth year is either 1948 or 1949?",
      "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nWHERE T1.Birth_Year IN (1948, 1949)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5885813236236572,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
      "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nWHERE T1.Birth_Year IN (1948, 1949)",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.24421977996826172,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What is the name of the singer with the largest net worth?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nORDER BY T1.Net_Worth_Millions DESC \nLIMIT 1;",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7564432621002197,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What is the name of the singer who is worth the most?",
      "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
      "generated_sql": "SELECT T1.Name FROM singer AS T1 ORDER BY T1.Net_Worth_Millions DESC LIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.34682726860046387,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show different citizenship of singers and the number of singers of each citizenship.",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT T1.Citizenship ,  COUNT(*) FROM singer AS T1 GROUP BY T1.Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3156721591949463,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, how many singers are from that country?",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT T1.Citizenship ,  COUNT(T2.Name) FROM singer AS T1 JOIN singer AS T2 ON T1.Citizenship  =  T2.Citizenship GROUP BY T1.Citizenship",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.3057990074157715,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Please show the most common citizenship of singers.",
      "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_sql": "SELECT T1.Citizenship \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nGROUP BY T1.Citizenship \nORDER BY COUNT(T1.Singer_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.528179407119751,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What is the most common singer citizenship ?",
      "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
      "generated_sql": "SELECT T1.Citizenship \nFROM singer AS T1 \nGROUP BY T1.Citizenship \nORDER BY COUNT(T1.Singer_ID) DESC \nLIMIT 1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5298078060150146,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
      "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT DISTINCT T1.Citizenship ,  MAX(T1.Net_Worth_Millions) FROM singer AS T1 GROUP BY T1.Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.47298359870910645,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, what is the maximum net worth?",
      "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
      "generated_sql": "SELECT T1.Citizenship ,  MAX(T1.Net_Worth_Millions) FROM singer AS T1 GROUP BY T1.Citizenship",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7249922752380371,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show titles of songs and names of singers.",
      "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "generated_sql": "SELECT T1.Title ,  T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.9430022239685059,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the song titles and singer names?",
      "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "generated_sql": "SELECT T1.Title ,  T2.Name \nFROM song AS T1 \nJOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.2318742275238037,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show distinct names of singers that have songs with sales more than 300000.",
      "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T2.Sales  >  300000",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3273169994354248,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "what are the different names of the singers that have sales more than 300000?",
      "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
      "generated_sql": "SELECT DISTINCT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T2.Sales  >  300000",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.45989441871643066,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show the names of singers that have more than one song.",
      "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Song_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.7174646854400635,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What are the names of the singers that have more than one songs?",
      "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nJOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nGROUP BY T1.Name \nHAVING COUNT(T2.Song_ID)  >  1",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3450896739959717,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show the names of singers and the total sales of their songs.",
      "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "generated_sql": "SELECT T1.Name, SUM(T2.Sales) AS Total_Sales\nFROM singer AS T1\nJOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID\nGROUP BY T1.Name",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5157594680786133,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "For each singer name, what is the total sales for their songs?",
      "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "generated_sql": "SELECT T1.Name ,  SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.5411438941955566,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "List the name of singers that do not have any song.",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "generated_sql": "SELECT T1.Name \nFROM singer AS T1 \nLEFT JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T2.Singer_ID IS NULL",
      "exact_match": false,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1568965911865234,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "What is the sname of every sing that does not have any song?",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "generated_sql": "SELECT T1.sname \nFROM song AS T1 \nLEFT JOIN singer AS T2 ON T1.Singer_ID  =  T2.Singer_ID \nWHERE T1.Singer_ID IS NULL",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0.4262080192565918,
      "error": null
    },
    {
      "db_id": "singer",
      "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
      "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "singer",
      "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
      "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
      "generated_sql": "SKIPPED - Too complex",
      "exact_match": false,
      "exec_match": false,
      "execution_success": false,
      "time_taken": 0,
      "error": "Skipped due to complexity"
    },
    {
      "db_id": "real_estate_properties",
      "question": "How many available features are there in total?",
      "gold_sql": "SELECT count(*) FROM Other_Available_Features",
      "generated_sql": "SELECT COUNT(*) FROM Other_Available_Features",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 1.1217527389526367,
      "error": null
    },
    {
      "db_id": "real_estate_properties",
      "question": "What is the feature type name of feature AirCon?",
      "gold_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
      "generated_sql": "SELECT T2.feature_type_name \nFROM Other_Available_Features AS T1 \nJOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code \nWHERE T1.feature_name  =  \"AirCon\"",
      "exact_match": true,
      "exec_match": true,
      "execution_success": true,
      "time_taken": 0.3895115852355957,
      "error": null
    },
    {
      "db_id": "real_estate_properties",
      "question": "Show the property type descriptions of properties belonging to that code.",
      "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
      "generated_sql": "SELECT T2.property_type_description \nFROM Properties AS T1 \nJOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code \nWHERE T1.property_type_code  =  \"House\"",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.412992000579834,
      "error": null
    },
    {
      "db_id": "real_estate_properties",
      "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
      "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
      "generated_sql": "SELECT DISTINCT T1.property_name \nFROM Properties AS T1 \nJOIN Other_Property_Features AS T2 ON T1.property_id  =  T2.property_id \nJOIN Other_Available_Features AS T3 ON T2.feature_id  =  T3.feature_id \nJOIN Ref_Feature_Types AS T4 ON T3.feature_type_code  =  T4.feature_type_code \nJOIN Ref_Property_Types AS T5 ON T1.property_type_code  =  T5.property_type_code \nWHERE T5.property_type_description IN ('House', 'Apartment') AND T4.feature_type_name IN ('Amenity', 'Security') AND T1.room_count  >  1;",
      "exact_match": false,
      "exec_match": false,
      "execution_success": true,
      "time_taken": 0.8626856803894043,
      "error": null
    }
  ],
  "has_gold_sql": true,
  "few_shot_examples": [
    {
      "question": "Who performed the song named \"Le Pop\"?",
      "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\""
    },
    {
      "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
      "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
      "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
      "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"
    }
  ]
}