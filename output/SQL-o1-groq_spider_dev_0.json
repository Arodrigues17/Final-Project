[
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nHow many singers do we have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM singer;",
        "prediction": "SELECT COUNT(DISTINCT Singer_ID) FROM singer;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the total number of singers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM singer;",
        "prediction": "SELECT COUNT(DISTINCT Singer_ID) FROM singer;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow name, country, age for all singers ordered by age from the oldest to the youngest.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , country , age FROM singer ORDER BY age DESC;",
        "prediction": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names, countries, and ages for every singer in descending order of age?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , country , age FROM singer ORDER BY age DESC;",
        "prediction": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the average, minimum, and maximum age of all singers from France?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France';",
        "prediction": "SELECT AVG(Age), MIN(Age), MIN(Age) FROM singer WHERE Country = 'France';"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the average, minimum, and maximum age for all French singers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France';",
        "prediction": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France';"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow the name and the release year of the song by the youngest singer.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1;",
        "prediction": "SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names and release years for all the songs of the youngest singer?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1;",
        "prediction": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = ( SELECT MIN(Age) FROM singer);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are all distinct countries where singers above age 20 are from?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT country FROM singer WHERE age > 20;",
        "prediction": "SELECT DISTINCT Country FROM singer WHERE Age > 20;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are  the different countries with singers above age 20?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT country FROM singer WHERE age > 20;",
        "prediction": "SELECT DISTINCT Country FROM singer WHERE Age > 20;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow all countries and the number of singers in each country.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country , count(*) FROM singer GROUP BY country;",
        "prediction": "SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nHow many singers are from each country?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country , count(*) FROM singer GROUP BY country;",
        "prediction": "SELECT Country, COUNT(*) FROM singer GROUP BY Country;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nList all song names by singers above the average age.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer);",
        "prediction": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are all the song names by singers who are older than average?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer);",
        "prediction": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow location and name for all stadiums with a capacity between 5000 and 10000.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
        "prediction": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the locations and names of all stations with capacity between 5000 and 10000?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
        "prediction": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the maximum capacity and the average of all stadiums ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select max(capacity), average from stadium;",
        "prediction": "SELECT MAX(Capacity), AVG(Capacity);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the average and maximum capacities for all stadiums ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select avg(capacity) , max(capacity) from stadium;",
        "prediction": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the name and capacity for the stadium with highest average attendance?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1;",
        "prediction": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the name and capacity for the stadium with the highest average attendance?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1;",
        "prediction": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nHow many concerts are there in year 2014 or 2015?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015;",
        "prediction": "SELECT COUNT(DISTINCT concert_Name) FROM concert WHERE Year IN ('2014', '2015');"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nHow many concerts occurred in 2014 or 2015?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015;",
        "prediction": "SELECT COUNT(DISTINCT Year) FROM concert WHERE Year IN ('2014', '2015');"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow the stadium name and the number of concerts in each stadium.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id;",
        "prediction": "SELECT s.Name, COUNT(c.concert_ID) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nFor each stadium, how many concerts play there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id;",
        "prediction": "SELECT s.Location, COUNT(c.concert_ID) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Location;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow the stadium name and capacity with most number of concerts in year 2014 or after.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the name and capacity of the stadium with the most concerts after 2013 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1;",
        "prediction": "SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhich year has most number of concerts?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT Year, COUNT(concert_ID) as num_concerts GROUP BY Year ORDER BY num_concerts DESC LIMIT 1;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the year that had the most concerts?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT Year, COUNT(*) as num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow the stadium names without any concert.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
        "prediction": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names of the stadiums without any concerts?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
        "prediction": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow countries where a singer above age 40 and a singer below 30 are from.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30;",
        "prediction": "SELECT DISTINCT s.Country FROM singer AS s WHERE s.Age > 40 INTERSECT SELECT s.Country FROM singer AS s WHERE s.Age < 30;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow names for all stadiums except for stadiums having a concert in year 2014.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014;",
        "prediction": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names of all stadiums that did not have a concert in 2014?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nShow the name and theme for all concerts and the number of singers in each concert.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names , themes , and number of singers for every concert ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nList singer names and number of concerts for each singer.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names of the singers and number of concerts for each person?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nList all singer names in concerts in year 2014.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names of the singers who performed in a concert in 2014?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nwhat is the name and nation of the singer who have a song having 'Hey' in its name?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nFind the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nFind the number of concerts happened in the stadium with the highest capacity .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE stadium (Stadium_ID NUMBER, Location TEXT, Name TEXT, Capacity NUMBER, Highest NUMBER, Lowest NUMBER, Average NUMBER, PRIMARY KEY(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)); CREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age NUMBER, Is_male OTHERS, PRIMARY KEY(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)); CREATE TABLE concert (concert_ID NUMBER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY(concert_ID, concert_Name, Theme, Stadium_ID, Year), FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)); CREATE TABLE singer_in_concert (concert_ID NUMBER, Singer_ID TEXT, PRIMARY KEY(concert_ID, Singer_ID), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID), FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID));\n\nSample rows of each table:\nstadium: [(1, 'Raith Rovers', \"Stark's Park\", 10104, 4812, 1294, 2106), (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477), (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864)]\nsinger: [(1, 'Joe Sharp', 'Netherlands', 'You', '1992', 52, 'F'), (2, 'Timbaland', 'United States', 'Dangerous', '2008', 32, 'T'), (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T')]\nconcert: [(1, 'Auditions', 'Free choice', '1', '2014'), (2, 'Super bootcamp', 'Free choice 2', '2', '2014'), (3, 'Home Visits', 'Bleeding Love', '2', '2015')]\nsinger_in_concert: [(1, '2'), (1, '3'), (1, '5')]\n\nQuestion:\nWhat are the number of concerts that occurred in the stadium with the largest capacity ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the number of pets whose weight is heavier than 10.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM pets WHERE weight > 10;",
        "prediction": "SELECT COUNT(*) FROM Pets WHERE weight > 10;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nHow many pets have a greater weight than 10?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM pets WHERE weight > 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the weight of the youngest dog.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nHow much does the youngest dog weigh?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the maximum weight for each type of pet. List the maximum weight and pet type.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(weight) , petType FROM pets GROUP BY petType;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nList the maximum weight and type for each type of pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(weight) , petType FROM pets GROUP BY petType;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind number of pets owned by students who are older than 20.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nHow many pets are owned by students that have an age greater than 20?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the number of dog pets that are raised by female students (with sex F).\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nHow many dog pets are raised by female students?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the number of distinct type of pets.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT pettype) FROM pets;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nHow many different types of pet are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT pettype) FROM pets;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the first name of students who have cat or dog pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat are the first names of every student who has a cat or dog as a pet?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the first name of students who have both cat and dog pets .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat are the students' first names who have both cats and dogs as pets?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the major and age of students who do not have a cat pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat major is every student who does not own a cat as a pet, and also how old are they?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the id of students who do not have a cat pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat are the ids of the students who do not own cats as pets?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the first name and age of students who have a dog but do not have a cat as a pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the first name of every student who has a dog but does not have a cat?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the type and weight of the youngest pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat type of pet is the youngest animal, and how much does it weigh?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the id and weight of all pets whose age is older than 1.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT petid , weight FROM pets WHERE pet_age > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the id and weight of every pet who is older than 1?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT petid , weight FROM pets WHERE pet_age > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the average and maximum age for each type of pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the average and maximum age for each pet type?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the average weight for each pet type.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the average weight for each type of pet?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the first name and age of students who have a pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat are the different first names and ages of the students who do have pets?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the id of the pet owned by student whose last name is ‘Smith’.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the id of the pet owned by the student whose last name is 'Smith'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the number of pets for each student who has any pet and student id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFor students who have pets , how many pets does each student have ? list their ids instead of names .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the first name and gender of student who have more than one pet.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the first name and gender of the all the students who have more than one pet?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the last name of the student who has a cat that is age 3.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the last name of the student who has a cat that is 3 years old?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nFind the average age of students who do not have any pet .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select avg(age) from student where stuid not in (select stuid from has_pet);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)); CREATE TABLE Has_Pet (StuID NUMBER, PetID NUMBER, PRIMARY KEY(StuID, PetID), FOREIGN KEY (StuID) REFERENCES Student(StuID), FOREIGN KEY (PetID) REFERENCES Pets(PetID)); CREATE TABLE Pets (PetID NUMBER, PetType TEXT, pet_age NUMBER, weight NUMBER, PRIMARY KEY(PetID, PetType, pet_age, weight));\n\nSample rows of each table:\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\nHas_Pet: [(1001, 2001), (1002, 2002), (1002, 2003)]\nPets: [(2001, 'cat', 3, 12.0), (2002, 'dog', 2, 13.4), (2003, 'dog', 1, 9.3)]\n\nQuestion:\nWhat is the average age for all students who do not own any pets ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select avg(age) from student where stuid not in (select stuid from has_pet);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many continents are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CONTINENTS;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of continents?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CONTINENTS;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many countries does each continent have? List the continent id, continent name and the number of countries.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFor each continent, list its id, name, and how many countries it has?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many countries are listed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM COUNTRIES;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many countries exist?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM COUNTRIES;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many models does each car maker produce? List maker full name, id and the number.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the full name of each car maker, along with its id and how many models it produces?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich model of the car has the minimum horsepower?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the model of the car with the smallest amount of horsepower?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFind the model of the car whose weight is below the average weight.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the model for the car with a weight smaller than the average?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFind the name of the makers that produced some cars in the year of 1970?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the name of the different car makers who produced a car in 1970?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFind the make and production time of the cars that were produced in the earliest year?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the maker of the carr produced in the earliest year and what year was it?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich distinct car models are the produced after 1980?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the different models for the cards produced after 1980?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many car makers are there in each continents? List the continent name and the count.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the name of each continent and how many car makers are there in each one?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich of the countries has the most car makers? List the country name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the name of the country with the most car makers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many car models are produced by each maker ? Only list the count and the maker full name .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of car models that are produced by each maker and what is the id and full name of each maker?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the accelerate of the car make amc hornet sportabout (sw)?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow much does the car accelerate that makes amc hornet sportabout (sw)?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many car makers are there in france?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of makers of care in France?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many car models are produced in the usa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the count of the car models produced in the United States?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average miles per gallon(mpg) of the cars with 4 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average miles per gallon of all the cards with 4 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the smallest weight of the car produced with 8 cylinders on 1974 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select min(weight) from cars_data where cylinders = 8 and year = 1974;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the minimum weight of the car with 8 cylinders produced in 1974 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select min(weight) from cars_data where cylinders = 8 and year = 1974;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are all the makers and models?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Maker , Model FROM MODEL_LIST;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the makers and models?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Maker , Model FROM MODEL_LIST;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the countries having at least one car maker? List name and id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the names and ids of all countries with at least one car maker?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of the cars with horsepower more than 150?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of cars with a horsepower greater than 150?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average weight of cars each year?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average weight and year for each year?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich countries in europe have at least 3 car manufacturers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the names of all European countries with at least 3 manufacturers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the maximum horsepower and the make of the car models with 3 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the largest amount of horsepower for the models with 3 cylinders and what make is it?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich model saves the most gasoline? That is to say, have the maximum miles per gallon.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the car model with the highest mpg ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average horsepower of the cars before 1980?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average horsepower for all cars produced before 1980 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select avg(horsepower) from cars_data where year < 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average edispl of the cars of model volvo?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the average edispl for all volvos?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the maximum accelerate for different number of cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the maximum accelerate for all the different cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich model has the most version(make) of cars?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat model has the most different versions?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many cars have more than 4 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of cars with more than 4 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nhow many cars were produced in 1980?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nIn 1980, how many cars were made?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many car models were produced by the maker with full name American Motor Company?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of car models created by the car maker American Motor Company?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich makers designed more than 3 car models? List full name and the id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the names and ids of all makers with more than 3 models?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich distinctive models are produced by maker with the full name General Motors or weighing more than 3500?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the different models created by either the car maker General Motors or weighed more than 3500?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nIn which years cars were produced weighing no less than 3000 and no more than 4000 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select distinct year from cars_data where weight between 3000 and 4000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select distinct year from cars_data where weight between 3000 and 4000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the horsepower of the car with the largest accelerate?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the horsepower of the car with the greatest accelerate?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFor model volvo, how many cylinders does the car with the least accelerate have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFor a volvo model, how many cylinders does the version with least accelerate have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many cars have a larger accelerate than the car with the largest horsepower?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of cars with a greater accelerate than the one with the most horsepower?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many countries has more than 2 car makers ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of countries with more than 2 car makers ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nHow many cars has over 6 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the number of carsw ith over 6 cylinders?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFor the cars with 4 cylinders, which model has the largest horsepower?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nFor all of the 4 cylinder cars, which model has the most horsepower?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nAmong the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nAmong the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select max(mpg) from cars_data where cylinders = 8 or year < 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select max(mpg) from cars_data where cylinders = 8 or year < 1980;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich models are lighter than 3500 but not built by the 'Ford Motor Company'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the name of the countries where there is not a single car maker?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the names of the countries with no car makers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhich are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE continents (ContId NUMBER, Continent TEXT, PRIMARY KEY(ContId, Continent)); CREATE TABLE countries (CountryId NUMBER, CountryName TEXT, Continent NUMBER, PRIMARY KEY(CountryId, CountryName, Continent), FOREIGN KEY (Continent) REFERENCES continents(ContId)); CREATE TABLE car_makers (Id NUMBER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY(Id, Maker, FullName, Country), FOREIGN KEY (Country) REFERENCES countries(CountryId)); CREATE TABLE model_list (ModelId NUMBER, Maker NUMBER, Model TEXT, PRIMARY KEY(ModelId, Maker, Model), FOREIGN KEY (Maker) REFERENCES car_makers(Id)); CREATE TABLE car_names (MakeId NUMBER, Model TEXT, Make TEXT, PRIMARY KEY(MakeId, Model, Make), FOREIGN KEY (Model) REFERENCES model_list(Model)); CREATE TABLE cars_data (Id NUMBER, MPG TEXT, Cylinders NUMBER, Edispl NUMBER, Horsepower TEXT, Weight NUMBER, Accelerate NUMBER, Year NUMBER, PRIMARY KEY(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year), FOREIGN KEY (Id) REFERENCES car_names(MakeId));\n\nSample rows of each table:\ncontinents: [(1, 'america'), (2, 'europe'), (3, 'asia')]\ncountries: [(1, 'usa', 1), (2, 'germany', 2), (3, 'france', 2)]\ncar_makers: [(1, 'amc', 'American Motor Company', '1'), (2, 'volkswagen', 'Volkswagen', '2'), (3, 'bmw', 'BMW', '2')]\nmodel_list: [(1, 1, 'amc'), (2, 2, 'audi'), (3, 3, 'bmw')]\ncar_names: [(1, 'chevrolet', 'chevrolet chevelle malibu'), (2, 'buick', 'buick skylark 320'), (3, 'plymouth', 'plymouth satellite')]\ncars_data: [(1, '18', 8, 307.0, '130', 3504, 12.0, 1970), (2, '15', 8, 350.0, '165', 3693, 11.5, 1970), (3, '18', 8, 318.0, '150', 3436, 11.0, 1970)]\n\nQuestion:\nWhat are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich country does Airline \"JetBlue Airways\" belong to?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat country is Jetblue Airways affiliated with?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the abbreviation of Airline \"JetBlue Airways\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich abbreviation corresponds to Jetblue Airways?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nList all airline names and their abbreviations in \"USA\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are the airline names and abbreviations for airlines in the USA?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nList the airport code and name in the city of Anthony.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the airport code and airport name corresonding to the city Anthony.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many airlines do we have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the total number of airlines?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many airports do we have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRPORTS;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the number of  airports.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRPORTS;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights do we have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the number of flights.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airline has abbreviation 'UAL'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the airline with abbreviation 'UAL'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many airlines are from USA?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the number of airlines in the USA.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich city and country is the Alton airport at?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the city and country for the Alton airport.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the airport name for airport 'AKO'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the name of the airport with code 'AKO'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are airport names at City 'Aberdeen'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are the names of airports in Aberdeen?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights depart from 'APG'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nCount the number of flights departing from 'APG'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights have destination ATO?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nCount the number of flights into ATO.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights depart from City Aberdeen?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the number of flights departing from Aberdeen.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights arriving in Aberdeen city?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the number of flights arriving in Aberdeen.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights fly from Aberdeen to Ashley?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights does airline 'JetBlue Airways' have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the number of Jetblue Airways flights.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many 'United Airlines' flights go to Airport 'ASY'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nCount the number of United Airlines flights arriving in ASY Airport.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many 'United Airlines' flights depart from Airport 'AHD'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nReturn the number of United Airlines flights leaving from AHD Airport.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many United Airlines flights go to City 'Aberdeen'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nCount the number of United Airlines flights that arrive in Aberdeen.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich city has most number of arriving flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich city has the most frequent destination airport?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich city has most number of departing flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich city is the most frequent source airport?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the code of airport that has the highest number of flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the airport code of the airport with the most flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the code of airport that has fewest number of flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the code of the airport with the least flights.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airline has most number of flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat airline serves the most flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind the abbreviation and country of the airline that has fewest number of flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat is the abbreviation of the airilne has the fewest flights and what country is it in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are airlines that have some flight departing from airport 'AHD'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airlines have a flight with source airport AHD?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are airlines that have flights arriving at airport 'AHD'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airlines have a flight with destination airport AHD?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind all airlines that have flights from both airports 'APG' and 'CVO'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airlines have departing flights from both APG and CVO airports?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind all airlines that have flights from airport 'CVO' but not from 'APG'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airlines have departures from CVO but not from APG airports?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind all airlines that have at least 10 flights.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airlines have at least 10 flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind all airlines that have fewer than 200 flights.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airlines have less than 200 flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are flight numbers of Airline \"United Airlines\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich flight numbers correspond to United Airlines flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are flight numbers of flights departing from Airport \"APG\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the flight numbers of flights leaving from APG.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are flight numbers of flights arriving at Airport \"APG\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the flight numbers of flights landing at APG.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are flight numbers of flights departing from City \"Aberdeen \"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the flight numbers of flights leaving from Aberdeen.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhat are flight numbers of flights arriving at City \"Aberdeen\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nGive the flight numbers of flights arriving in Aberdeen.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind the number of flights landing in the city of Aberdeen or Abilene.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nHow many flights land in Aberdeen or Abilene?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nFind the name of airports which do not have any flight in and out.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE airlines (uid NUMBER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY(uid, Airline, Abbreviation, Country)); CREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY(City, AirportCode, AirportName, Country, CountryAbbrev)); CREATE TABLE flights (Airline NUMBER, FlightNo NUMBER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY(Airline, FlightNo, SourceAirport, DestAirport), FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode), FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode));\n\nSample rows of each table:\nairlines: [(1, 'United Airlines', 'UAL', 'USA'), (2, 'US Airways', 'USAir', 'USA'), (3, 'Delta Airlines', 'Delta', 'USA')]\nairports: [('Aberdeen ', 'APG', 'Phillips AAF ', 'United States ', 'US '), ('Aberdeen ', 'ABR', 'Municipal ', 'United States ', 'US'), ('Abilene ', 'DYS', 'Dyess AFB ', 'United States ', 'US')]\nflights: [(1, 28, ' APG', ' ASY'), (1, 29, ' ASY', ' APG'), (1, 44, ' CVO', ' ACV')]\n\nQuestion:\nWhich airports do not have departing or arriving flights?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nHow many employees are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM employee;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nCount the number of employees\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM employee;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nSort employee names by their age in ascending order.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM employee ORDER BY age;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nList the names of employees and sort in ascending order of age.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM employee ORDER BY age;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat is the number of employees from each city?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , city FROM employee GROUP BY city;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nCount the number of employees for each city.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , city FROM employee GROUP BY city;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich cities do more than one employee under age 30 come from?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the cities that have more than one employee under age 30.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the number of shops in each location.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nHow many shops are there in each location?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the manager name and district of the shop whose number of products is the largest.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat are the manager name and district of the shop that sells the largest number of products?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nfind the minimum and maximum number of products of all stores.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(Number_products) , max(Number_products) FROM shop;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat are the minimum and maximum number of products across all the shops?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(Number_products) , max(Number_products) FROM shop;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nReturn the name, location and district of all shops in descending order of number of products.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nSort all the shops by number products in descending order, and return the name, location and district of each shop.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the names of stores whose number products is more than the average number of products.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich shops' number products is above the average? Give me the shop names.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nfind the name of employee who was awarded the most times in the evaluation.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich employee received the most awards in evaluations? Give me the employee name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the name of the employee who got the highest one time bonus.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich employee received the biggest bonus? Give me the employee name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the names of employees who never won any award in the evaluation.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat are the names of the employees who never received any evaluation?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat is the name of the shop that is hiring the largest number of employees?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich shop has the most employees? Give me the shop name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the name of the shops that do not hire any employee.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich shops run with no employees? Find the shop names\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the number of employees hired in each shop; show the shop name as well.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFor each shop, return the number of employees working there and the name of the shop.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat is total bonus given in all evaluations?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(bonus) FROM evaluation;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the total amount of bonus given in all the evaluations.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(bonus) FROM evaluation;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nGive me all the information about hiring.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT * FROM hiring;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhat is all the information about hiring?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT * FROM hiring;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nWhich district has both stores with less than 3000 products and stores with more than 10000 products?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nFind the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nHow many different store locations are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT LOCATION) FROM shop;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE employee (Employee_ID NUMBER, Name TEXT, Age NUMBER, City TEXT, PRIMARY KEY(Employee_ID, Name, Age, City)); CREATE TABLE shop (Shop_ID NUMBER, Name TEXT, Location TEXT, District TEXT, Number_products NUMBER, Manager_name TEXT, PRIMARY KEY(Shop_ID, Name, Location, District, Number_products, Manager_name)); CREATE TABLE hiring (Shop_ID NUMBER, Employee_ID NUMBER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY(Shop_ID, Employee_ID, Start_from, Is_full_time), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID), FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)); CREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus NUMBER, PRIMARY KEY(Employee_ID, Year_awarded, Bonus), FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID));\n\nSample rows of each table:\nemployee: [(1, 'George Chuter', 23, 'Bristol'), (2, 'Lee Mears', 29, 'Bath'), (3, 'Mark Regan', 43, 'Bristol')]\nshop: [(1, 'FC Haka', 'Valkeakoski', 'Tehtaan kenttä', 3516, 'Olli Huttunen'), (2, 'HJK', 'Helsinki', 'Finnair Stadium', 10770, 'Antti Muurinen'), (3, 'FC Honka', 'Espoo', 'Tapiolan Urheilupuisto', 6000, 'Mika Lehkosuo')]\nhiring: [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F')]\nevaluation: [('1', '2011', 3000.0), ('2', '2015', 3200.0), ('1', '2016', 2900.0)]\n\nQuestion:\nCount the number of distinct store locations.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT LOCATION) FROM shop;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many documents do we have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of documents.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nList document IDs, document names, and document descriptions for all documents.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id , document_name , document_description FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids, names, and descriptions for all documents?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id , document_name , document_description FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the document name and template id for document with description with the letter 'w' in it?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the names and template ids for documents that contain the letter w in their description.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the document id, template id and description for document named \"Robbin CV\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the document id, template id, and description for the document with the name Robbin CV.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many different templates do all document use?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT template_id) FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of different templates used for documents.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT template_id) FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many documents are using the template with type code 'PPT'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of documents that use the PPT template type.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all template ids and number of documents using each template.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id , count(*) FROM Documents GROUP BY template_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are all different template ids used for documents, and how many times were each of them used?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id , count(*) FROM Documents GROUP BY template_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the id and type code for the template used by the most documents?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the id and type code of the template that is used for the greatest number of documents.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow ids for all templates that are used by more than one document.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the template ids of any templates used in more than a single document?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow ids for all templates not used by any document.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids for templates that are not used in any documents?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many templates do we have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of templates.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow template ids, version numbers, and template type codes for all templates.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id , version_number , template_type_code FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids, version numbers, and type codes for each template?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id , version_number , template_type_code FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all distinct template type codes for all templates.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT template_type_code FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the different template type codes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT template_type_code FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids of templates with template type code PP or PPT?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the ids of templates that have the code PP or PPT.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many templates have template type code CV?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of templates of the type CV.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the version number and template type code for the template with version number later than 5?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the version numbers and template type codes of templates with a version number greater than 5.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all template type codes and number of templates for each.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the different template type codes, and how many templates correspond to each?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhich template type code has most number of templates?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the type code of the template type that the most templates belong to.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all template type codes with less than three templates.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the codes of template types that have fewer than 3 templates?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat the smallest version number and its template type code?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(Version_Number) , template_type_code FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the lowest version number, along with its corresponding template type code.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(Version_Number) , template_type_code FROM Templates;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the template type code of the template used by document with the name \"Data base\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the template type code of the template that is used by a document named Data base.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all document names using templates with template type code BK.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the names of documents that use templates with the code BK?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all template type codes and the number of documents using each type.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the different template type codes, and how many documents use each type?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhich template type code is used by most number of documents?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the code of the template type that is most commonly used in documents.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all template type codes that are not used by any document.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the codes of template types that are not used for any document?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all template type codes and descriptions.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code , template_type_description FROM Ref_template_types;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the type codes and descriptions for all template types?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code , template_type_description FROM Ref_template_types;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the template type descriptions for template type code \"AD\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the template type description of the template type with the code AD.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the template type code for template type description \"Book\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the type code of the template type with the description \"Book\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the distinct template type descriptions for the templates ever used by any document?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the different descriptions for templates that have been used in a document.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the template ids with template type description \"Presentation\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the ids corresponding to templates with the description 'Presentation'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many paragraphs in total?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Paragraphs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of paragraphs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Paragraphs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nHow many paragraphs for the document with name 'Summer Show'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nCount the number of paragraphs in the document named 'Summer Show'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow paragraph details for paragraph with text 'Korea ' .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select other_details from paragraphs where paragraph_text like 'korea';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the details for the paragraph that includes the text 'Korea ' ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select other_details from paragraphs where paragraph_text like 'korea';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all paragraph ids and texts for the document with name 'Welcome to NY'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all paragraph texts for the document \"Customer reviews\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the paragraph texts for the document with the name 'Customer reviews'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all document ids and the number of paragraphs in each document. Order by document id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the different document ids along with the number of paragraphs corresponding to each, ordered by id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow all document ids, names and the number of paragraphs in each document.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids and names of each document, as well as the number of paragraphs in each?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nList all document ids with at least two paragraphs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids of documents that have 2 or more paragraphs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the document id and name with greatest number of paragraphs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the id and name of the document with the most paragraphs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the document id with least number of paragraphs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nReturn the id of the document with the fewest paragraphs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat is the document id with 1 to 2 paragraphs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nGive the ids of documents that have between one and two paragraphs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nShow the document id with paragraph text 'Brazil' and 'Ireland'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY(Template_Type_Code, Template_Type_Description)); CREATE TABLE Templates (Template_ID NUMBER, Version_Number NUMBER, Template_Type_Code TEXT, Date_Effective_From TIME, Date_Effective_To TIME, Template_Details TEXT, PRIMARY KEY(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details), FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)); CREATE TABLE Documents (Document_ID NUMBER, Template_ID NUMBER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details), FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)); CREATE TABLE Paragraphs (Paragraph_ID NUMBER, Document_ID NUMBER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details), FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID));\n\nSample rows of each table:\nRef_Template_Types: [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement')]\nTemplates: [(0, 5, 'PP', '2005-11-12 07:09:48', '2008-01-05 14:19:28', ''), (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', ''), (4, 4, 'BK', '2002-03-02 14:39:49', '2001-04-18 09:29:52', '')]\nDocuments: [(0, 7, 'Introduction of OS', 'n', None), (1, 25, 'Understanding DB', 'y', None), (3, 6, 'Summer Show', 'u', None)]\nParagraphs: [(7, 2394, 'Korea', None), (9, 3, 'Somalia', None), (65, 50123, 'Palestinian Territory', None)]\n\nQuestion:\nWhat are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nHow many teachers are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM teacher;",
        "prediction": "SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat is the total count of teachers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM teacher;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nList the names of teachers in ascending order of age.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM teacher ORDER BY Age ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers ordered by ascending age?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM teacher ORDER BY Age ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the age and hometown of teachers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Age , Hometown FROM teacher;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat is the age and hometown of every teacher?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Age , Hometown FROM teacher;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nList the name of teachers whose hometown is not `` Little Lever Urban District '' .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select name from teacher where hometown != \"little lever urban district\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select name from teacher where hometown != \"little lever urban district\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow the name of teachers aged either 32 or 33?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers who are aged either 32 or 33?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat is the hometown of the youngest teacher?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhere is the youngest teacher from?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow different hometown of teachers and the number of teachers from each hometown.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nFor each hometown, how many teachers are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nList the most common hometown of teachers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat is the most commmon hometowns for teachers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow the hometowns shared by at least two teachers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the towns from which at least two teachers come from?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow names of teachers and the courses they are arranged to teach.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat is the name of each teacher and what course they teach?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow the name of the teacher for the math course.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the people who teach math courses?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow names of teachers and the number of courses they teach.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers and how many courses do they teach?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nShow names of teachers that teach at least two courses.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers who teach at least two courses?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nList the names of teachers who have not been arranged to teach courses.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE course (Course_ID NUMBER, Staring_Date TEXT, Course TEXT, PRIMARY KEY(Course_ID, Staring_Date, Course)); CREATE TABLE teacher (Teacher_ID NUMBER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY(Teacher_ID, Name, Age, Hometown)); CREATE TABLE course_arrange (Course_ID NUMBER, Teacher_ID NUMBER, Grade NUMBER, PRIMARY KEY(Course_ID, Teacher_ID, Grade), FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID), FOREIGN KEY (Course_ID) REFERENCES course(Course_ID));\n\nSample rows of each table:\ncourse: [(1, '5 May', 'Language Arts'), (2, '6 May', 'Math'), (3, '7 May', 'Science')]\nteacher: [(1, 'Joseph Huts', '32', 'Blackrod Urban District'), (2, 'Gustaaf Deloor', '29', 'Bolton County Borough'), (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough')]\ncourse_arrange: [(2, 5, 1), (2, 3, 3), (3, 2, 5)]\n\nQuestion:\nWhat are the names of the teachers whose courses have not been arranged?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nHow many visitors below age 30 are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM visitor WHERE age < 30;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nFind the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat is the average age of the visitors whose membership level is not higher than 4?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nFind the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nFind the id and name of the museum that has the most staff members?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nFind the average number of staff working for the museums that were open before 2009.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat are the opening year and staff number of the museum named Plaza Museum?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nfind the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nfind the id, name and age for visitors who visited some museums more than once.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat are the id and name of the museum visited most times?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat is the name of the museum that had no visitor yet?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nFind the name and age of the visitor who bought the most tickets at once.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat are the average and maximum number of tickets bought in all visits?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat is the total ticket expense of the visitors whose membership level is 1?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nWhat is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nFind the number of visitors who did not visit any museum opened after 2010.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE museum (Museum_ID NUMBER, Name TEXT, Num_of_Staff NUMBER, Open_Year TEXT, PRIMARY KEY(Museum_ID, Name, Num_of_Staff, Open_Year)); CREATE TABLE visitor (ID NUMBER, Name TEXT, Level_of_membership NUMBER, Age NUMBER, PRIMARY KEY(ID, Name, Level_of_membership, Age)); CREATE TABLE visit (Museum_ID NUMBER, visitor_ID TEXT, Num_of_Ticket NUMBER, Total_spent NUMBER, PRIMARY KEY(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent), FOREIGN KEY (visitor_ID) REFERENCES visitor(ID), FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID));\n\nSample rows of each table:\nmuseum: [(1, 'Plaza Museum', 62, '2000'), (2, 'Capital Plaza Museum', 25, '2012'), (3, 'Jefferson Development Museum', 18, '2010')]\nvisitor: [(1, 'Gonzalo Higuaín ', 8, 35), (2, 'Guti Midfielder', 5, 28), (3, 'Arjen Robben', 1, 27)]\nvisit: [(1, '5', 20, 320.14), (2, '5', 4, 89.98), (4, '3', 10, 320.44)]\n\nQuestion:\nHow many museums were opened after 2013 or before 2008?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the total number of players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM players;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many players are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM players;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the total number of matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nCount the number of matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nList the first name and birth date of all players from the country with code USA.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the first names and birth dates of players from the USA?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the average age of losers and winners of all matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(loser_age) , avg(winner_age) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the average ages of losers and winners across matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(loser_age) , avg(winner_age) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the average rank of winners in all matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(winner_rank) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the average rank for winners in all matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(winner_rank) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the highest rank of losers in all matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(loser_rank) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the best rank of losers across all matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(loser_rank) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nfind the number of distinct country codes of all players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT country_code) FROM players;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many distinct countries do players come from?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT country_code) FROM players;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the number of distinct name of losers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT loser_name) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many different loser names are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT loser_name) FROM matches;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the name of tourney that has more than 10 matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the names of tournaments that have more than 10 matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nList the names of all winners who played in both 2013 and 2016.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the names of players who won in both 2013 and 2016?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nList the number of all matches who played in years of 2013 or 2016.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many matches were played in 2013 or 2016?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the first names and country codes for players who won both the WTA Championships and the Australian Open?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the first name and country code of the oldest player.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the first name and country code of the oldest player?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nList the first and last name of all players in the order of birth date.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , last_name FROM players ORDER BY birth_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the full names of all players, sorted by birth date?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , last_name FROM players ORDER BY birth_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nList the first and last name of all players who are left / L hand in the order of birth date.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the full names of all left handed players, in order of birth date?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the first name and country code of the player who did the most number of tours.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the first name and country code of the player with the most tours?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the year that has the most number of matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhich year had the most matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the name and rank points of the winner who won the most times.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the name of the winner who has won the most matches, and how many rank points does this player have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the name of the winner who has the highest rank points and participated in the Australian Open tourney.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the name of the winner with the most rank points who participated in the Australian Open tournament?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nfind the names of loser and winner who played in the match with greatest number of minutes.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the names of the winner and loser who played in the longest match?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the average ranking for each player and their first name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the first names of all players, and their average rankings?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the total ranking points for each player and their first name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the first names of all players, and their total ranking points?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nfind the number of players for each country.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , country_code FROM players GROUP BY country_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many players are from each country?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , country_code FROM players GROUP BY country_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nfind the code of the country where has the greatest number of players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the code of the country with the most players?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the codes of countries that have more than 50 players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the codes of countries with more than 50 players?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the total number of tours for each ranking date.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many total tours were there for each ranking date?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the number of matches happened in each year.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many matches were played in each year?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the name and rank of the 3 youngest winners across all matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat are the names and ranks of the three youngest winners across all matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many different winners both participated in the WTA Championships and were left handed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the number of left handed winners who participated in the WTA Championships.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the first name, country code and birth date of the winner who has the highest rank points in all matches.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nWhat is the first name, country code, and birth date of the player with the most winner rank points across all matches?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nFind the number of players for each hand type.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , hand FROM players GROUP BY hand;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE players (player_id NUMBER, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT, PRIMARY KEY(player_id, first_name, last_name, hand, birth_date, country_code)); CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, PRIMARY KEY(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year), FOREIGN KEY (winner_id) REFERENCES players(player_id), FOREIGN KEY (loser_id) REFERENCES players(player_id)); CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, PRIMARY KEY(ranking_date, ranking, player_id, ranking_points, tours), FOREIGN KEY (player_id) REFERENCES players(player_id));\n\nSample rows of each table:\nplayers: [(200001, 'Martina', 'Hingis', 'R', 19800930, 'SUI'), (200002, 'Mirjana', 'Lucic', 'R', 19820309, 'CRO'), (200003, 'Justine', 'Henin', 'R', 19820601, 'BEL')]\nmatches: [(3, 4, 24.626967830300003, '', 'R', 170, 201474, 'POL', 'Agnieszka Radwanska', 4, 5890, 3, 297, 82, 'RR', '6-2 6-4', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 23.6221765914, '', 'L', 183, 201520, 'CZE', 'Petra Kvitova', 6, 4370, 5, 296, 72, 'RR', '6-2 6-3', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013), (3, 4, 25.7577002053, '', 'L', 173, 201493, 'GER', 'Angelique Kerber', 9, 3715, 8, 295, 64, 'RR', '6-3 6-1', 'Hard', 20131021, '2013-W-WT-TUR-01A-2013', 'W', 'WTA Championships', 32.0684462697, '', 'R', 175, 200033, 'USA', 'Serena Williams', 1, 12040, 1, 2013)]\nrankings: [(20000101, 3, 200748, 4378, 13), (20000101, 4, 200033, 3021, 15), (20000101, 28, 200020, 960, 0)]\n\nQuestion:\nHow many players are there for each hand type?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , hand FROM players GROUP BY hand;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nHow many ships ended up being 'Captured'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nList the name and tonnage ordered by in descending alphaetical order for the names.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , tonnage FROM ship ORDER BY name DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nList the name, date and result of each battle.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , date FROM battle;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat is maximum and minimum death toll caused each time?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(killed) , min(killed) FROM death;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat is the average number of injuries caused each time?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(injured) FROM death;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat are the death and injury situations caused by the ship with tonnage 't'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat are the name and results of the battles when the bulgarian commander is not 'Boril'\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat are the different ids and names of the battles that lost any 'Brig' type shipes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat are the ids and names of the battles that led to more than 10 people killed in total.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat is the ship id and name that caused most total injuries?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nHow many different results are there for the battles?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT RESULT) FROM battle;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nHow many battles did not lose any ship with tonnage '225'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nList the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nShow names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE battle (id NUMBER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY(id, name, date, bulgarian_commander, latin_commander, result)); CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship), FOREIGN KEY (lost_in_battle) REFERENCES battle(id)); CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER, note TEXT, killed NUMBER, injured NUMBER, PRIMARY KEY(caused_by_ship_id, id, note, killed, injured), FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));\n\nSample rows of each table:\nbattle: [(1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory'), (2, 'Battle of Serres', 'June 1205', 'Kaloyan', 'Unknown', 'Bulgarian victory'), (3, 'Battle of Rusion', '31 January 1206', 'Kaloyan', 'Thierry de Termond', 'Bulgarian victory')]\nship: [(8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured'), (7, 2, 'Bon Accord', 't', 'Brig', 'English Channel', 'Captured'), (6, 3, 'Mary', 't', 'Brig', 'English Channel', 'Captured')]\ndeath: [(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0)]\n\nQuestion:\nWhat are the notes of the death events which has substring 'East'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT note FROM death WHERE note LIKE '%East%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nwhat are all the addresses including line 1 and line 2?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT line_1 , line_2 FROM addresses;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the first and second line for all addresses?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT line_1 , line_2 FROM addresses;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many courses in total are listed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Courses;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many courses are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Courses;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow is the math course described?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_description FROM Courses WHERE course_name = 'math';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the descriptions for all the math courses?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_description FROM Courses WHERE course_name = 'math';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the zip code of the address in the city Port Chelsea?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the zip code for Port Chelsea?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhich department offers the most number of degrees? List department name and id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the name and id of the department with the most number of degrees ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many departments offer any degree?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT department_id) FROM Degree_Programs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many different departments offer degrees?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT department_id) FROM Degree_Programs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many different degree names are offered?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many different degrees are offered?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many degrees does the engineering department offer?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many degrees does the engineering department have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the names and descriptions of all the sections?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT section_name , section_description FROM Sections;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the names and descriptions for all the sections?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT section_name , section_description FROM Sections;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the names and id of courses having at most 2 sections?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the names and ids of every course with less than 2 sections?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nList the section_name in reversed lexicographical order.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the names of the sections in reverse alphabetical order?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the semester which most student registered in? Show both the name and the id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nFor each semester, what is the name and id of the one with the most students registered?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the description of the department whose name has the substring the computer?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the department description for the one whose name has the word computer?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWho are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWho is enrolled in a Bachelor degree program? List the first name, middle name, last name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the first, middle, and last names for everybody enrolled in a Bachelors program?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nFind the kind of program which most number of students are enrolled in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the degree summary name that has the most number of students enrolled?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nFind the program which most number of students are enrolled in. List both the id and the summary.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the program id and the summary of the degree that has the most students enrolled?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhich student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhich semesters do not have any student enrolled? List the semester name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the name of the semester with no students enrolled?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are all the course names of the courses which ever have students enrolled in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the names of all courses that have some students enrolled?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat's the name of the course with most number of enrollments?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the name of the course with the most students enrolled?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nFind the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the last name of the students who live in North Carolina but have not registered in any degree programs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nShow the date and id of the transcript with at least 2 course results.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the date and id of the transcript with at least 2 courses listed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the phone number of the man with the first name Timmothy and the last name Ward?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the mobile phone number of the student named Timmothy Ward ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWho is the first student to register? List the first name, middle name and last name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the first, middle, and last name of the first student to register?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWho is the earliest graduate of the school? List the first name, middle name and last name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the first, middle, and last name of the earliest school graduate?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhose permanent address is different from his or her current address? List his or her first name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the first name of the student whose permanent address is different from his or her current one?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhich address holds the most number of students currently? List the address id and all lines.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the id, line 1, and line 2 of the address with the most students?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nOn average, when were the transcripts printed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(transcript_date) FROM Transcripts;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the average transcript date?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(transcript_date) FROM Transcripts;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhen is the first transcript released? List the date and details.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the earliest date of a transcript release, and what details can you tell me?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many transcripts are released?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Transcripts;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many transcripts are listed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Transcripts;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the last transcript release date?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhen was the last transcript released?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nShow the date of the transcript which shows the least number of results, also list the id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the date and id of the transcript with the least number of results?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nFind the semester when both Master students and Bachelor students got enrolled in.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the id of the semester that had both Masters and Bachelors students enrolled?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nHow many different addresses do the students currently live?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT current_address_id) FROM Students;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the different addresses that have students living there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT current_address_id) FROM Students;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nList all the student details in reversed lexicographical order.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat other details can you tell me about students in reverse alphabetical order?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nDescribe the section h.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT section_description FROM Sections WHERE section_name = 'h';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat is the description for the section named h?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT section_description FROM Sections WHERE section_name = 'h';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nFind the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)); CREATE TABLE Courses (course_id NUMBER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE Departments (department_id NUMBER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY(department_id, department_name, department_description, other_details)); CREATE TABLE Degree_Programs (degree_program_id NUMBER, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Sections (section_id NUMBER, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY(section_id, course_id, section_name, section_description, other_details), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Semesters (semester_id NUMBER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY(semester_id, semester_name, semester_description, other_details)); CREATE TABLE Students (student_id NUMBER, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, PRIMARY KEY(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details), FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id), FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)); CREATE TABLE Student_Enrolment (student_enrolment_id NUMBER, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, PRIMARY KEY(student_enrolment_id, degree_program_id, semester_id, student_id, other_details), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id), FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)); CREATE TABLE Student_Enrolment_Courses (student_course_id NUMBER, course_id NUMBER, student_enrolment_id NUMBER, PRIMARY KEY(student_course_id, course_id, student_enrolment_id), FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Transcripts (transcript_id NUMBER, transcript_date TIME, other_details TEXT, PRIMARY KEY(transcript_id, transcript_date, other_details)); CREATE TABLE Transcript_Contents (student_course_id NUMBER, transcript_id NUMBER, PRIMARY KEY(student_course_id, transcript_id), FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id), FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id));\n\nSample rows of each table:\nAddresses: [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None)]\nCourses: [(1, 'ds', 'p', None), (2, 'math', 'q', None), (3, 'os', 'v', None)]\nDepartments: [(1, 'computer science', 'error', None), (2, 'history', 'nostrum', None), (3, 'art', 'aliquam', None)]\nDegree_Programs: [(1, 13, 'Master', 'architecto', None), (2, 2, 'Master', 'cumque', None), (3, 13, 'Master', 'placeat', None)]\nSections: [(1, 9, 'a', 'non', None), (2, 2, 'b', 'voluptatem', None), (3, 8, 'c', 'qui', None)]\nSemesters: [(1, 'spring 2010', 'x', None), (2, 'summer 2010', 'g', None), (3, 'fall 2010', 'w', None)]\nStudents: [(1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis')]\nStudent_Enrolment: [(1, 12, 13, 14, None), (2, 4, 2, 9, None), (3, 10, 2, 7, None)]\nStudent_Enrolment_Courses: [(0, 6, 2), (1, 6, 8), (2, 14, 5)]\nTranscripts: [(1, '1988-04-30 01:19:47', None), (2, '1975-10-28 15:16:51', None), (3, '1984-12-19 00:37:21', None)]\nTranscript_Contents: [(0, 2), (96, 8), (76, 9)]\n\nQuestion:\nWhat are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the title of all cartoons in alphabetical order.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM Cartoon ORDER BY title;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the titles of the cartoons sorted alphabetically?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM Cartoon ORDER BY title;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList all cartoon directed by \"Ben Jones\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the names of all cartoons directed by Ben Jones?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nHow many cartoons were written by \"Joseph Kuhr\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the number of cartoones written by Joseph Kuhr?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nlist all cartoon titles and their directors ordered by their air date\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the name and directors of all the cartoons that are ordered by air date?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the titles of all cartoons directed by Ben Jones or Brandon Vietti?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhich country has the most of TV Channels? List the country and number of TV Channels it has.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the country with the most number of TV Channels and how many does it have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the number of different series names and contents in the TV Channel table.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nHow many different series and contents are listed in the TV Channel table?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the content of TV Channel with serial name \"Sky Radio\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the content of the series Sky Radio?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the Package Option of TV Channel with serial name \"Sky Radio\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the Package Options of the TV Channels whose series names are Sky Radio?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nHow many TV Channel using language English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nHow many TV Channels use the English language?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the language used least number of TV Channel. List language and number of TV Channel.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the languages used by the least number of TV Channels and how many channels use it?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList each language and the number of TV Channels using it.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nFor each language, list the number of TV Channels that use it.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the Episode of all TV series sorted by rating.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Episode FROM TV_series ORDER BY rating;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are all of the episodes ordered by ratings?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Episode FROM TV_series ORDER BY rating;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList top 3 highest Rating  TV series. List the TV series's Episode and Rating.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are 3 most highly rated episodes in the TV series table and what were those ratings?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is minimum and maximum share of TV series?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the maximum and minimum share for the TV series?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the air date of TV series with Episode \"A Love of a Lifetime\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhen did the episode \"A Love of a Lifetime\" air?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the weekly rank for the episode \"A Love of a Lifetime\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the name of the series that has the episode \"A Love of a Lifetime\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nList the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the episode for the TV series named \"Sky Radio\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nFind the number of cartoons directed by each of the listed directors.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nHow many cartoons did each director create?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nFind the production code and channel of the most recently aired cartoon .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select production_code , channel from cartoon order by original_air_date desc limit 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the produdction code and channel of the most recent cartoon ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select production_code , channel from cartoon order by original_air_date desc limit 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nFind the package choice and series name of the TV channel that has high definition TV.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the package options and the name of the series for the TV Channel that supports high definition TV?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nwhich countries' tv channels are playing some cartoon written by Todd Casey?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the countries that have cartoons on TV that were written by Todd Casey?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nwhich countries' tv channels are not playing any cartoon written by Todd Casey?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the countries that are not playing cartoons written by Todd Casey?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nFind the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nfind the pixel aspect ratio and nation of the tv channels that do not use English.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat is the pixel aspect ratio and country of origin for all TV channels that do not use English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nfind id of the tv channels that from the countries where have more than two tv channels.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the ids of all tv channels that have more than 2 TV channels?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nfind the id of tv channels that do not play any cartoon directed by Ben Jones.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the ids of the TV channels that do not have any cartoons directed by Ben Jones?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nfind the package option of the tv channel that do not have any cartoon directed by Ben Jones.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)); CREATE TABLE TV_series (id NUMBER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share NUMBER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank NUMBER, Channel TEXT, PRIMARY KEY(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id)); CREATE TABLE Cartoon (id NUMBER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code NUMBER, Channel TEXT, PRIMARY KEY(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel), FOREIGN KEY (Channel) REFERENCES TV_Channel(id));\n\nSample rows of each table:\nTV_Channel: [('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia'), ('703', 'Music Box Italia', 'Italy', 'Italian', 'music', '4:3 / 16:9', 'no', 'no', 'Sky Famiglia')]\nTV_series: [(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707')]\nCartoon: [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (2.0, 'Terror on Dinosaur Island!', 'Brandon Vietti', 'Steven Melching', 'November21,2008', 102.0, '701'), (3.0, 'Evil Under the Sea!', 'Michael Chang', 'Joseph Kuhr', 'December5,2008', 103.0, '703')]\n\nQuestion:\nWhat are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nHow many poker players are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM poker_player;",
        "prediction": "SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nCount the number of poker players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM poker_player;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nList the earnings of poker players in descending order.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the earnings of poker players, ordered descending by value?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nList the final tables made and the best finishes of poker players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Final_Table_Made , Best_Finish FROM poker_player;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the final tables made and best finishes for all poker players?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Final_Table_Made , Best_Finish FROM poker_player;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the average earnings of poker players?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Earnings) FROM poker_player;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the average earnings across all poker players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Earnings) FROM poker_player;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the money rank of the poker player with the highest earnings?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the money rank of the player with the greatest earnings.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the maximum number of final tables made among poker players with earnings less than 200000?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the maximum final tables made across all poker players who have earnings below 200000.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names of poker players?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the names of all the poker players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names of poker players whose earnings is higher than 300000?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nGive the names of poker players who have earnings above 300000.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nList the names of poker players ordered by the final tables made in ascending order.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names of poker players, ordered ascending by the number of final tables they have made?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the birth date of the poker player with the lowest earnings?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the birth date of the poker player with the lowest earnings.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the money rank of the tallest poker player?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the money rank of the poker player with the greatest height.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the average earnings of poker players with height higher than 200?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nGive average earnings of poker players who are taller than 200.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names of poker players in descending order of earnings?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the names of poker players sorted by their earnings descending.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are different nationalities of people and the corresponding number of people from each nation?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nHow many people are there of each nationality?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat is the most common nationality of people?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nGive the nationality that is most common across all people.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the nationalities that are shared by at least two people?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nReturn the nationalities for which there are two or more people.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nList the names and birth dates of people in ascending alphabetical order of name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names and birth dates of people, ordered by their names in alphabetical order?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nShow names of people whose nationality is not \"Russia\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM people WHERE Nationality != \"Russia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names of people who are not from Russia?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM people WHERE Nationality != \"Russia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nList the names of people that are not poker players.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nWhat are the names of people who do not play poker?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nHow many distinct nationalities are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Nationality) FROM people;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE poker_player (Poker_Player_ID NUMBER, People_ID NUMBER, Final_Table_Made NUMBER, Best_Finish NUMBER, Money_Rank NUMBER, Earnings NUMBER, PRIMARY KEY(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings), FOREIGN KEY (People_ID) REFERENCES people(People_ID)); CREATE TABLE people (People_ID NUMBER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height NUMBER, PRIMARY KEY(People_ID, Nationality, Name, Birth_Date, Height));\n\nSample rows of each table:\npoker_player: [(1, 1, 42.0, 1.0, 68.0, 476090.0), (2, 2, 10.0, 2.0, 141.0, 189233.0), (3, 5, 21.0, 1.0, 166.0, 104871.0)]\npeople: [(1, 'Russia', 'Aleksey Ostapenko', 'May 26, 1986', 207.0), (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0), (3, 'Russia', 'Roman Bragin', 'April 17, 1987', 187.0)]\n\nQuestion:\nCount the number of different nationalities.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Nationality) FROM people;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nHow many states are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM area_code_state;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nList the contestant numbers and names, ordered by contestant name descending.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nList the vote ids, phone numbers and states of all votes.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT vote_id , phone_number , state FROM votes;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat are the maximum and minimum values of area codes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(area_code) , min(area_code) FROM area_code_state;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat is last date created of votes from the state 'CA'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(created) FROM votes WHERE state = 'CA';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat are the names of the contestants whose names are not 'Jessie Alloway'\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat are the distinct states and create time of all votes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT state , created FROM votes;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat are the contestant numbers and names of the contestants who had at least two votes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nOf all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat are the number of votes from state 'NY' or 'CA'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nHow many contestants did not get voted?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat is the area code in which the most voters voted?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nWhat are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nList the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE AREA_CODE_STATE (area_code NUMBER, state TEXT, PRIMARY KEY(area_code, state)); CREATE TABLE CONTESTANTS (contestant_number NUMBER, contestant_name TEXT, PRIMARY KEY(contestant_number, contestant_name)); CREATE TABLE VOTES (vote_id NUMBER, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, PRIMARY KEY(vote_id, phone_number, state, contestant_number, created), FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number), FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state));\n\nSample rows of each table:\nAREA_CODE_STATE: [(201, 'NJ'), (202, 'DC'), (203, 'CT')]\nCONTESTANTS: [(1, 'Edwina Burnam'), (2, 'Tabatha Gehling'), (3, 'Kelly Clauss')]\nVOTES: [(1, 7182887233, 'NY', 2, '2018-03-09 19:03:21'), (2, 7148407040, 'NY', 3, '2018-03-09 19:03:36'), (3, 6209222712, 'CA', 3, '2018-03-09 19:03:39')]\n\nQuestion:\nReturn the names of the contestants whose names contain the substring 'Al' .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select contestant_name from contestants where contestant_name like \"%al%\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of all the countries that became independent after 1950?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE IndepYear > 1950;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the names of the nations that were founded after 1950.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE IndepYear > 1950;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many countries have a republic as their form of government?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many countries have governments that are republics?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total surface area of the countries in the Caribbean region?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow much surface area do the countires in the Carribean cover together?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich continent is Anguilla in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Continent FROM country WHERE Name = \"Anguilla\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the continent name which Anguilla belongs to?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Continent FROM country WHERE Name = \"Anguilla\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich region is the city Kabul located in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat region is Kabul in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich language is the most popular in Aruba?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat language is predominantly spoken in Aruba?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the population and life expectancies in Brazil?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive me Brazil’s population and life expectancies.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the region and population of Angola?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Population , Region FROM country WHERE Name = \"Angola\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat region does Angola belong to and what is its population?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Population , Region FROM country WHERE Name = \"Angola\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the average expected life expectancy for countries in the region of Central Africa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow long is the people’s average life expectancy in Central Africa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the name of country that has the shortest life expectancy in Asia?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the name of the country in Asia with the lowest life expectancy.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total population and maximum GNP in Asia?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many people live in Asia, and what is the largest GNP among them?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the average life expectancy in African countries that are republics?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the average life expectancy for countries in Africa which are republics?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total surface area of the continents Asia and Europe?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the total surface area covered by countries in Asia or Europe.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many people live in Gelderland district?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total population of Gelderland district?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the average GNP and total population in all nations whose government is US territory?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the mean GNP and total population of nations which are considered US territory.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many unique languages are spoken in the world?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the number of distinct languages used around the world?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many type of governments are in Africa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many different forms of governments are there in Africa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total number of languages used in Aruba?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many languages are spoken in Aruba?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many official languages does Afghanistan have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many official languages are spoken in Afghanistan?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is name of the country that speaks the largest number of languages?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the name of the nation that uses the greatest amount of languages.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich continent has the most diverse languages?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich continent speaks the most languages?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many countries speak both English and Dutch?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the number of nations that use English and Dutch?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of nations speak both English and French?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the names of nations that speak both English and French.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of nations where both English and French are official languages?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the names of countries with English and French as official languages.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the number of distinct continents where Chinese is spoken?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many continents speak Chinese?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the regions that use English or Dutch?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich regions speak Dutch or English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the countries where either English or Dutch is the official language ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich countries have either English or Dutch as an official language?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich language is the most popular on the Asian continent?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the language that is used by the largest number of Asian nations?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich languages are spoken by only one country in republic governments?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat languages are only used by a single country with a republic government?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nFind the city with the largest population that uses English.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the most populace city that speaks English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nFind the name, population and expected life length of asian country with the largest area?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the name, population, and life expectancy of the largest Asian country by land?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is average life expectancy in the countries where English is not the official language?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the mean life expectancy of countries in which English is not the official language.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total number of people living in the nations that do not use English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many people live in countries that do not speak English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the official language spoken in the country whose head of state is Beatrix?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the official language used in the country the name of whose head of state is Beatrix.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total number of unique official languages spoken in the countries that are founded before 1930?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nFor the countries founded before 1930, what is the total number of distinct official languages?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the countries that have greater surface area than any country in Europe?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich countries have greater area than that of any country in Europe?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the African countries that have a  population less than any country in Asia?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich African countries have a smaller population than that of any country in Asia?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich Asian countries have a population that is larger than any country in Africa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the Asian countries which have a population larger than that of any country in Africa?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\");",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the country codes for countries that do not speak English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the country codes for countries that do not speak English.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the country codes of countries where people use languages other than English?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the country codes for countries in which people speak langauges that are not English.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the codes of the countries that do not speak English and whose government forms are not Republic?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the codes of countries that do not speak English and do not have Republics for governments.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich cities are in European countries where English is not the official language?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of cities in Europe for which English is not the official language?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English');",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich unique cities are in Asian countries where Chinese is the official language ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the different names of cities that are in Asia and for which Chinese is the official language.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the name, independence year, and surface area of the country with the smallest population?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the name, year of independence, and surface area of the country that has the lowest population.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the population, name and leader of the country with the largest area?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the name, population, and head of state for the country that has the largest area.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the country name and the numbers of languages spoken for each country that speaks at least 3 languages.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of countries that speak more than 2 languages, as well as how many languages they speak?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nFind the number of cities in each district whose population is greater than the average population of cities?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nHow many cities in each district have a population that is above the average population across all cities?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nFind the government form name and total population for each government form whose average life expectancy is longer than 72.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nFind the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names and areas of countries with the top 5 largest area?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the names and surface areas of the 5 largest countries.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are names of countries with the top 3 largest population?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the names of the 3 most populated countries.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of the nations with the 3 lowest populations?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the names of the 3 countries with the fewest people.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nhow many countries are in Asia?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM country WHERE continent = \"Asia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nCount the number of countries in Asia.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM country WHERE continent = \"Asia\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the names of the countries that are in the continent of Europe and have a population of 80000?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the names of countries that are in Europe and have a population equal to 80000.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the cities whose population is between 160000 and 900000?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the names of cities that have a population between 160000 and 900000 .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select name from city where population between 160000 and 900000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhich language is spoken by the largest number of countries?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nGive the language that is spoken in the most countries.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the language spoken by the largest percentage of people in each country?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat is the total number of countries where Spanish is spoken by the largest percentage of people?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nCount the number of countries for which Spanish is the predominantly spoken language.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nWhat are the codes of countries where Spanish is spoken by the largest percentage of people?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (ID NUMBER, Name TEXT, CountryCode TEXT, District TEXT, Population NUMBER, PRIMARY KEY(ID, Name, CountryCode, District, Population), FOREIGN KEY (CountryCode) REFERENCES country(Code)); CREATE TABLE sqlite_sequence (name TEXT, seq TEXT, PRIMARY KEY(name, seq)); CREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea NUMBER, IndepYear NUMBER, Population NUMBER, LifeExpectancy NUMBER, GNP NUMBER, GNPOld NUMBER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital NUMBER, Code2 TEXT, PRIMARY KEY(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)); CREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage NUMBER, PRIMARY KEY(CountryCode, Language, IsOfficial, Percentage), FOREIGN KEY (CountryCode) REFERENCES country(Code));\n\nSample rows of each table:\ncity: [(1, 'Kabul', 'AFG', 'Kabol', 1780000), (2, 'Qandahar', 'AFG', 'Qandahar', 237500), (3, 'Herat', 'AFG', 'Herat', 186800)]\nsqlite_sequence: [('city', 4079)]\ncountry: [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW'), ('AFG', 'Afghanistan', 'Asia', 'Southern and Central Asia', 652090.0, 1919, 22720000, 45.9, 5976.0, None, 'Afganistan/Afqanestan', 'Islamic Emirate', 'Mohammad Omar', 1, 'AF'), ('AGO', 'Angola', 'Africa', 'Central Africa', 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, 'Angola', 'Republic', 'José Eduardo dos Santos', 56, 'AO')]\ncountrylanguage: [('ABW', 'Dutch', 'T', 5.3), ('ABW', 'English', 'F', 9.5), ('ABW', 'Papiamento', 'F', 76.7)]\n\nQuestion:\nReturn the codes of countries for which Spanish is the predominantly spoken language.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nHow many conductors are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM conductor;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nCount the number of conductors.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM conductor;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nList the names of conductors in ascending order of age.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor ORDER BY Age ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the names of conductors, ordered by age?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor ORDER BY Age ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the names of conductors whose nationalities are not \"USA\"?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor WHERE Nationality != 'USA';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nReturn the names of conductors that do not have the nationality \"USA\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor WHERE Nationality != 'USA';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the record companies of orchestras in descending order of years in which they were founded?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nReturn the record companies of orchestras, sorted descending by the years in which they were founded.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat is the average attendance of shows?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Attendance) FROM SHOW;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nReturn the average attendance across all shows.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Attendance) FROM SHOW;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the maximum and minimum share of performances whose type is not \"Live final\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nReturn the maximum and minimum shares for performances that do not have the type \"Live final\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nHow many different nationalities do conductors have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Nationality) FROM conductor;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nCount the number of different nationalities of conductors.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Nationality) FROM conductor;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nList names of conductors in descending order of years of work.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the names of conductors, sorted descending by the number of years they have worked?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nList the name of the conductor with the most years of work.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat is the name of the conductor who has worked the greatest number of years?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nShow the names of conductors and the orchestras they have conducted.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the names of conductors as well as the corresonding orchestras that they have conducted?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nShow the names of conductors that have conducted more than one orchestras.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the names of conductors who have conducted at more than one orchestra?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nShow the name of the conductor that has conducted the most number of orchestras.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat is the name of the conductor who has conducted the most orchestras?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nPlease show the name of the conductor that has conducted orchestras founded after 2008.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the names of conductors who have conducted orchestras founded after the year 2008?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nPlease show the different record companies and the corresponding number of orchestras.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nHow many orchestras does each record company manage?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nPlease show the record formats of orchestras in ascending order of count.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the major record formats of orchestras, sorted by their frequency?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nList the record company shared by the most number of orchestras.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat is the record company used by the greatest number of orchestras?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nList the names of orchestras that have no performance.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the orchestras that do not have any performances?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nShow the record companies shared by orchestras founded before 2003 and after 2003.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nFind the number of orchestras whose record format is \"CD\" or \"DVD\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nCount the number of orchestras that have CD or DVD as their record format.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nShow the years in which orchestras that have given more than one performance are founded.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE conductor (Conductor_ID NUMBER, Name TEXT, Age NUMBER, Nationality TEXT, Year_of_Work NUMBER, PRIMARY KEY(Conductor_ID, Name, Age, Nationality, Year_of_Work)); CREATE TABLE orchestra (Orchestra_ID NUMBER, Orchestra TEXT, Conductor_ID NUMBER, Record_Company TEXT, Year_of_Founded NUMBER, Major_Record_Format TEXT, PRIMARY KEY(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format), FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)); CREATE TABLE performance (Performance_ID NUMBER, Orchestra_ID NUMBER, Type TEXT, Date TEXT, Official_ratings_(millions) NUMBER, Weekly_rank TEXT, Share TEXT, PRIMARY KEY(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share), FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)); CREATE TABLE show (Show_ID NUMBER, Performance_ID NUMBER, If_first_show OTHERS, Result TEXT, Attendance NUMBER, PRIMARY KEY(Show_ID, Performance_ID, If_first_show, Result, Attendance), FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID));\n\nSample rows of each table:\nconductor: [(1, 'Antal Doráti', 40, 'USA', 10), (2, 'Igor Stravinsky', 41, 'UK', 11), (3, 'Colin Davis', 42, 'USA', 6)]\norchestra: [(1, 'London Symphony Orchestra', 1, 'Mercury Records', 2003.0, 'CD'), (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP'), (3, 'Royal Concertgebouw Orchestra', 3, 'Philips', 2008.0, 'CD')]\nperformance: [(1, 1, 'Auditions 1', '9 June', 5.2, '12', '22.7%'), (2, 2, 'Auditions 2', '10 June', 6.73, '8', '28.0%'), (3, 3, 'Auditions 3', '11 June', 7.28, '15', '29.4%')]\nshow: [(1, 1, 'Glebe Park', 'T', 1026.0), (2, 2, 'Fir Park', 'T', 695.0), (3, 3, 'St. Mirren Park', 'F', 555.0)]\n\nQuestion:\nWhat are years of founding for orchestras that have had more than a single performance?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many high schoolers are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Highschooler;",
        "prediction": "SELECT COUNT(DISTINCT ID) FROM Highschooler;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nCount the number of high schoolers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Highschooler;",
        "prediction": "SELECT COUNT(*) FROM Highschooler;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names and grades of each high schooler.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , grade FROM Highschooler;",
        "prediction": "SELECT name, grade FROM Highschooler;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names and grades for each high schooler?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , grade FROM Highschooler;",
        "prediction": "SELECT name, grade FROM Highschooler;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow all the grades of the high schoolers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler;",
        "prediction": "SELECT grade FROM Highschooler;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat is the grade of each high schooler?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler;",
        "prediction": "SELECT grade FROM Highschooler;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat grade is Kyle in?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler WHERE name = \"Kyle\";",
        "prediction": "SELECT grade FROM Highschooler WHERE name = 'Kyle';"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nReturn the grade for the high schooler named Kyle.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler WHERE name = \"Kyle\";",
        "prediction": "SELECT grade FROM Highschooler WHERE name = 'Kyle';"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of all high schoolers in grade 10.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Highschooler WHERE grade = 10;",
        "prediction": "SELECT name FROM Highschooler WHERE grade = 10;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of all high schoolers in grade 10?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Highschooler WHERE grade = 10;",
        "prediction": "SELECT name FROM Highschooler WHERE grade = 10;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the ID of the high schooler named Kyle.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
        "prediction": "SELECT ID FROM Highschooler WHERE name = 'Kyle';"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat is Kyle's id?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
        "prediction": "SELECT ID FROM Highschooler WHERE name = 'Kyle';"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many high schoolers are there in grade 9 or 10?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;",
        "prediction": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nCount the number of high schoolers in grades 9 or 10.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the number of high schoolers for each grade.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade , count(*) FROM Highschooler GROUP BY grade;",
        "prediction": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many high schoolers are in each grade?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade , count(*) FROM Highschooler GROUP BY grade;",
        "prediction": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhich grade has the most high schoolers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nReturn the grade that has the greatest number of high schoolers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow me all grades that have at least 4 students.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhich grades have 4 or more high schoolers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;",
        "prediction": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the student IDs and numbers of friends corresponding to each.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id , count(*) FROM Friend GROUP BY student_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many friends does each student have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id , count(*) FROM Friend GROUP BY student_id;",
        "prediction": "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of high school students and their corresponding number of friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of the high schoolers and how many friends does each have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat is the name of the high schooler who has the greatest number of friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nReturn the name of the high school student with the most friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of high schoolers who have at least 3 friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of high schoolers who have 3 or more friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of all of the high schooler Kyle's friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nReturn the names of friends of the high school student Kyle.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many friends does the high school student Kyle have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nCount the number of friends Kyle has.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow ids of all students who do not have any friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the ids of high school students who do not have friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow names of all high school students who do not have any friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of students who have no friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the ids of high schoolers who have friends and are also liked by someone else.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the ids of students who both have friends and are liked?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow name of all students who have some friends and also are liked by someone else.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of high schoolers who both have friends and are liked?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nCount the number of likes for each student id.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id , count(*) FROM Likes GROUP BY student_id;",
        "prediction": "SELECT student_id, COUNT(*) as likes_count FROM Likes GROUP BY student_id;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many likes correspond to each student id?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id , count(*) FROM Likes GROUP BY student_id;",
        "prediction": "SELECT L.liked_id, COUNT(*) FROM Likes L GROUP BY L.liked_id;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of high schoolers who have likes, and numbers of likes for each.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;",
        "prediction": "SELECT H.name, COUNT(L.liked_id) FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of high schoolers who have likes, and how many likes does each have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat is the name of the high schooler who has the greatest number of likes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nGive the name of the student with the most likes.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of students who have at least 2 likes.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of students who have 2 or more likes?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nShow the names of students who have a grade higher than 5 and have at least 2 friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nHow many likes does Kyle have?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\";",
        "prediction": "SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nReturn the number of likes that the high schooler named Kyle has.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nFind the average grade of all students who have some friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat is the average grade of students who have friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nFind the minimum grade of students who have no friends.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Highschooler (ID NUMBER, name TEXT, grade NUMBER, PRIMARY KEY(ID, name, grade)); CREATE TABLE Friend (student_id NUMBER, friend_id NUMBER, PRIMARY KEY(student_id, friend_id), FOREIGN KEY (friend_id) REFERENCES Highschooler(ID), FOREIGN KEY (student_id) REFERENCES Highschooler(ID)); CREATE TABLE Likes (student_id NUMBER, liked_id NUMBER, PRIMARY KEY(student_id, liked_id), FOREIGN KEY (student_id) REFERENCES Highschooler(ID), FOREIGN KEY (liked_id) REFERENCES Highschooler(ID));\n\nSample rows of each table:\nHighschooler: [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9)]\nFriend: [(1510, 1381), (1510, 1689), (1689, 1709)]\nLikes: [(1689, 1709), (1709, 1689), (1782, 1709)]\n\nQuestion:\nWhat is the lowest grade of students who do not have any friends?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich states have both owners and professionals living there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the states where both owners and professionals live.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat is the average age of the dogs who have gone through any treatments?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the average age of the dogs who went through treatments.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich dogs have not cost their owner more than 1000 for treatment ? List the dog names .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the names of the dogs for which the owner has not spend more than 1000 for treatment ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich first names are used for professionals or owners but are not used as dog names?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the first names that are used for professionals or owners but are not used as dog names.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich professional did not operate any treatment on dogs? List the professional's id, role and email.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nGive me the id, role and email of the professionals who did not perform any treatment on dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich owner owns the most dogs? List the owner id, first name and last name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nReturn the owner id, first name and last name of the owner who has the most dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich professionals have done at least two treatments? List the professional's id, role, and first name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the id, role, and first name of the professionals who have performed two or more treatments?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat is the name of the breed with the most dogs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich breed do the most dogs have? Give me the breed name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich owner has paid for the most treatments on his or her dogs? List the owner id and last name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nTell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat is the description of the treatment type that costs the least money in total?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nGive me the description of the treatment type whose total cost is the lowest.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the owner id and zip code of the owner who spent the most money in total for his or her dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich professionals have done at least two types of treatments? List the professional id and cell phone.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the id and cell phone of the professionals who operate two or more types of treatments.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the first name and last name of the professionals who have done treatment with cost below average?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich professionals have operated a treatment that costs less than the average? Give me theor first names and last names.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the date of each treatment, together with the first name of the professional who operated it.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the date and the operating professional's first name of each treatment?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the cost of each treatment and the corresponding treatment type description.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the cost and treatment type description of each treatment?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList each owner's first name, last name, and the size of his for her dog.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are each owner's first name, last name, and the size of their dog?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList pairs of the owner's first name and the dogs's name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are each owner's first name and their dogs's name?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the names of the dogs of the rarest breed and the treatment dates of them.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich dogs are of the rarest breed? Show their names and treatment dates.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the first names of owners living in Virginia and the names of dogs they own.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the arriving date and the departing date of the dogs who have gone through a treatment?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the arriving date and the departing date of the dogs that received a treatment.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the last name of the owner owning the youngest dog.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWho owns the youngest dog? Give me his or her last name.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the arriving date and the departing date of all the dogs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date_arrived , date_departed FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the arrival date and the departure date for all the dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date_arrived , date_departed FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow many dogs went through any treatments?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT dog_id) FROM Treatments;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nCount the number of dogs that went through a treatment.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT dog_id) FROM Treatments;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow many professionals have performed any treatment to dogs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT professional_id) FROM Treatments;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the number of professionals who have ever treated dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT professional_id) FROM Treatments;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the role, street, city and state of the professionals living in a city that contains the substring 'West'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhich owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nReturn the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%';",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow many dogs have an age below the average?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nCount the number of dogs of an age below the average.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow much does the most recent treatment cost?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nShow me the cost of the most recently performed treatment.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow many dogs have not gone through any treatment?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nTell me the number of dogs that have not received any treatment .\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select count(*) from dogs where dog_id not in ( select dog_id from treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow many owners temporarily do not have any dogs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the number of owners who do not own any dogs at this moment.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow many professionals did not operate any treatment on dogs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the number of professionals who have not treated any dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat is the average age of all the dogs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nCompute the average age of all the dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat is the age of the oldest dog?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(age) FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nTell me the age of the oldest dog.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(age) FROM Dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow much does each charge type costs? List both charge type and amount.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT charge_type , charge_amount FROM Charges;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList each charge type and its amount.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT charge_type , charge_amount FROM Charges;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nHow much does the most expensive charge type costs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(charge_amount) FROM Charges;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat is the charge amount of the most expensive charge type?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(charge_amount) FROM Charges;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the email, cell phone and home phone of all the professionals.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT email_address , cell_number , home_phone FROM professionals;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are the email, cell phone and home phone of each professional?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT email_address , cell_number , home_phone FROM professionals;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are all the possible breed type and size type combinations?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT breed_code , size_code FROM dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nFind the distinct breed type and size type combinations for dogs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT breed_code , size_code FROM dogs;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nList the first name of all the professionals along with the description of the treatment they have done.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY(breed_code, breed_name)); CREATE TABLE Charges (charge_id NUMBER, charge_type TEXT, charge_amount NUMBER, PRIMARY KEY(charge_id, charge_type, charge_amount)); CREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY(size_code, size_description)); CREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY(treatment_type_code, treatment_type_description)); CREATE TABLE Owners (owner_id NUMBER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)); CREATE TABLE Dogs (dog_id NUMBER, owner_id NUMBER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, PRIMARY KEY(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (owner_id) REFERENCES Owners(owner_id), FOREIGN KEY (size_code) REFERENCES Sizes(size_code), FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)); CREATE TABLE Professionals (professional_id NUMBER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)); CREATE TABLE Treatments (treatment_id NUMBER, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, PRIMARY KEY(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment), FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code));\n\nSample rows of each table:\nBreeds: [('ESK', 'Eskimo'), ('HUS', 'Husky'), ('BUL', 'Bulldog')]\nCharges: [(1, 'Daily Accommodation', 98), (2, 'Drugs', 322), (3, 'Health Check', 640)]\nSizes: [('SML', 'Small'), ('MED', 'Medium'), ('LGE', 'Large')]\nTreatment_Types: [('EXAM', 'Physical examination'), ('VAC', 'Vaccination'), ('WALK', 'Take for a Walk')]\nOwners: [(1, 'Nora', 'Haley', '0647 Hintz Village Apt. 024', 'Lake Tia', 'Wisconsin', '93165', 'lynn81@example.org', '1-682-845-0116x63235', '478.978.0729'), (2, 'Melisa', 'DuBuque', '1204 Mae Highway Apt. 107', 'Port Reannamouth', 'Virginia', '45244', 'ykris@example.com', '(799)563-0260x454', '(722)768-5439x484'), (3, 'Jaclyn', 'Stoltenberg', '2635 Caitlyn Plains', 'Barrettburgh', 'Vermont', '02647', 'hudson.favian@example.com', '916.976.9480x13851', '481-483-9083x37986')]\nDogs: [(1, 3, '1', 'ESK', 'LGE', 'Kacey', '6', '2012-01-27 05:11:53', '1', '7.57', '2017-09-08 20:10:13', '2018-03-06 16:32:11', '2018-03-25 06:58:44'), (2, 11, '0', 'BUL', 'LGE', 'Hipolito', '9', '2013-02-13 05:15:21', '0', '1.72', '2017-12-22 05:02:02', '2018-03-25 08:12:51', '2018-03-25 02:11:32'), (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46')]\nProfessionals: [(1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904\\nCorneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), (3, 'Employee', 'Olaf', '68589 Bradly Manor\\nNew Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065')]\nTreatments: [(1, 14, 9, 'WALK', '2018-03-19 04:39:54', 567), (2, 4, 10, 'VAC', '2018-03-15 20:25:34', 147), (3, 14, 4, 'EXAM', '2018-03-08 05:26:23', 429)]\n\nQuestion:\nWhat are each professional's first name and description of the treatment they have performed?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nHow many singers are there?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM singer;",
        "prediction": "SELECT COUNT(DISTINCT Singer_ID) FROM singer;"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat is the count of singers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM singer;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nList the name of singers in ascending order of net worth.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the names of singers ordered by ascending net worth?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the birth year and citizenship of singers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Birth_Year , Citizenship FROM singer;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the birth years and citizenships of the singers?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Birth_Year , Citizenship FROM singer;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nList the name of singers whose citizenship is not \"France\".\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer WHERE Citizenship != \"France\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the names of the singers who are not French citizens?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer WHERE Citizenship != \"France\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow the name of singers whose birth year is either 1948 or 1949?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the names of the singers whose birth years are either 1948 or 1949?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat is the name of the singer with the largest net worth?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat is the name of the singer who is worth the most?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow different citizenship of singers and the number of singers of each citizenship.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nFor each citizenship, how many singers are from that country?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nPlease show the most common citizenship of singers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat is the most common singer citizenship ?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "select citizenship from singer group by citizenship order by count(*) desc limit 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow different citizenships and the maximum net worth of singers of each citizenship.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nFor each citizenship, what is the maximum net worth?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow titles of songs and names of singers.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the song titles and singer names?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow distinct names of singers that have songs with sales more than 300000.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nwhat are the different names of the singers that have sales more than 300000?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow the names of singers that have more than one song.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the names of the singers that have more than one songs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow the names of singers and the total sales of their songs.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nFor each singer name, what is the total sales for their songs?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nList the name of singers that do not have any song.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat is the sname of every sing that does not have any song?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nShow the citizenship shared by singers with birth year before 1945 and after 1955.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE singer (Singer_ID NUMBER, Name TEXT, Birth_Year NUMBER, Net_Worth_Millions NUMBER, Citizenship TEXT, PRIMARY KEY(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)); CREATE TABLE song (Song_ID NUMBER, Title TEXT, Singer_ID NUMBER, Sales NUMBER, Highest_Position NUMBER, PRIMARY KEY(Song_ID, Title, Singer_ID, Sales, Highest_Position), FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID));\n\nSample rows of each table:\nsinger: [(1, 'Liliane Bettencourt', 1944.0, 30.0, 'France'), (2, 'Christy Walton', 1948.0, 28.8, 'United States'), (3, 'Alice Walton', 1949.0, 26.3, 'United States')]\nsong: [(1, \"Do They Know It's Christmas\", 1, 1094000.0, 1.0), (2, \"F**k It (I Don't Want You Back)\", 1, 552407.0, 1.0), (3, 'Cha Cha Slide', 2, 351421.0, 1.0)]\n\nQuestion:\nWhat are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT, PRIMARY KEY(feature_type_code, feature_type_name)); CREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT, PRIMARY KEY(property_type_code, property_type_description)); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, PRIMARY KEY(feature_id, feature_type_code, feature_name, feature_description), FOREIGN KEY (feature_type_code) REFERENCES Ref_Feature_Types(feature_type_code)); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, PRIMARY KEY(property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details), FOREIGN KEY (property_type_code) REFERENCES Ref_Property_Types(property_type_code)); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, PRIMARY KEY(property_id, feature_id, property_feature_description), FOREIGN KEY (property_id) REFERENCES Properties(property_id), FOREIGN KEY (feature_id) REFERENCES Other_Available_Features(feature_id));\n\nSample rows of each table:\nRef_Feature_Types: [('Amenity', 'Amenity, eg Pool.'), ('Security', 'Securiyt, eg Burglar Alarm.')]\nRef_Property_Types: [('House', 'House, Bungalow, etc.'), ('Apartment', 'Apartment, Flat, Condo, etc.'), ('Field', 'Field, Meadow.')]\nOther_Available_Features: [(2, 'Amenity', 'AirCon', 'Air Conditioning.'), (3, 'Amenity', 'Pool', 'Swimming Pool.'), (4, 'Security', 'BurglarAlarm', 'Burglar Alarm')]\nProperties: [(1, 'House', '1991-06-21 23:52:10', '1979-05-13 16:58:06', 'park', '4745 Emerson Stravenue Suite 829\\nSouth Garret, IN 16772-5682', 7, 372652.2909, 1.68, 4201.8, 'aut', 'suscipit', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (2, 'House', '1990-05-25 23:01:51', '1990-11-14 19:16:38', 'the cole', '098 Tremaine Highway Suite 569\\nSouth Wilford, NJ 46587-3537', 1, 661536468.4429, 8.7122, 21769471.8328, 'est', 'est', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (3, 'Other', '1986-11-26 04:12:18', '1981-06-26 21:28:28', 'prism', '062 Micaela Court Apt. 707\\nMargretville, WV 51628-3617', 8, 1337, 11375259.502, 5, 'ut', 'et', None, None, None, None, None, None, None, None, None, None, None, None, None, None)]\nOther_Property_Features: [(15, 3, 'dolorem'), (12, 4, 'earum'), (6, 2, 'illo')]\n\nQuestion:\nHow many available features are there in total?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Other_Available_Features;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT, PRIMARY KEY(feature_type_code, feature_type_name)); CREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT, PRIMARY KEY(property_type_code, property_type_description)); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, PRIMARY KEY(feature_id, feature_type_code, feature_name, feature_description), FOREIGN KEY (feature_type_code) REFERENCES Ref_Feature_Types(feature_type_code)); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, PRIMARY KEY(property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details), FOREIGN KEY (property_type_code) REFERENCES Ref_Property_Types(property_type_code)); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, PRIMARY KEY(property_id, feature_id, property_feature_description), FOREIGN KEY (property_id) REFERENCES Properties(property_id), FOREIGN KEY (feature_id) REFERENCES Other_Available_Features(feature_id));\n\nSample rows of each table:\nRef_Feature_Types: [('Amenity', 'Amenity, eg Pool.'), ('Security', 'Securiyt, eg Burglar Alarm.')]\nRef_Property_Types: [('House', 'House, Bungalow, etc.'), ('Apartment', 'Apartment, Flat, Condo, etc.'), ('Field', 'Field, Meadow.')]\nOther_Available_Features: [(2, 'Amenity', 'AirCon', 'Air Conditioning.'), (3, 'Amenity', 'Pool', 'Swimming Pool.'), (4, 'Security', 'BurglarAlarm', 'Burglar Alarm')]\nProperties: [(1, 'House', '1991-06-21 23:52:10', '1979-05-13 16:58:06', 'park', '4745 Emerson Stravenue Suite 829\\nSouth Garret, IN 16772-5682', 7, 372652.2909, 1.68, 4201.8, 'aut', 'suscipit', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (2, 'House', '1990-05-25 23:01:51', '1990-11-14 19:16:38', 'the cole', '098 Tremaine Highway Suite 569\\nSouth Wilford, NJ 46587-3537', 1, 661536468.4429, 8.7122, 21769471.8328, 'est', 'est', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (3, 'Other', '1986-11-26 04:12:18', '1981-06-26 21:28:28', 'prism', '062 Micaela Court Apt. 707\\nMargretville, WV 51628-3617', 8, 1337, 11375259.502, 5, 'ut', 'et', None, None, None, None, None, None, None, None, None, None, None, None, None, None)]\nOther_Property_Features: [(15, 3, 'dolorem'), (12, 4, 'earum'), (6, 2, 'illo')]\n\nQuestion:\nWhat is the feature type name of feature AirCon?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\";",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT, PRIMARY KEY(feature_type_code, feature_type_name)); CREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT, PRIMARY KEY(property_type_code, property_type_description)); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, PRIMARY KEY(feature_id, feature_type_code, feature_name, feature_description), FOREIGN KEY (feature_type_code) REFERENCES Ref_Feature_Types(feature_type_code)); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, PRIMARY KEY(property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details), FOREIGN KEY (property_type_code) REFERENCES Ref_Property_Types(property_type_code)); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, PRIMARY KEY(property_id, feature_id, property_feature_description), FOREIGN KEY (property_id) REFERENCES Properties(property_id), FOREIGN KEY (feature_id) REFERENCES Other_Available_Features(feature_id));\n\nSample rows of each table:\nRef_Feature_Types: [('Amenity', 'Amenity, eg Pool.'), ('Security', 'Securiyt, eg Burglar Alarm.')]\nRef_Property_Types: [('House', 'House, Bungalow, etc.'), ('Apartment', 'Apartment, Flat, Condo, etc.'), ('Field', 'Field, Meadow.')]\nOther_Available_Features: [(2, 'Amenity', 'AirCon', 'Air Conditioning.'), (3, 'Amenity', 'Pool', 'Swimming Pool.'), (4, 'Security', 'BurglarAlarm', 'Burglar Alarm')]\nProperties: [(1, 'House', '1991-06-21 23:52:10', '1979-05-13 16:58:06', 'park', '4745 Emerson Stravenue Suite 829\\nSouth Garret, IN 16772-5682', 7, 372652.2909, 1.68, 4201.8, 'aut', 'suscipit', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (2, 'House', '1990-05-25 23:01:51', '1990-11-14 19:16:38', 'the cole', '098 Tremaine Highway Suite 569\\nSouth Wilford, NJ 46587-3537', 1, 661536468.4429, 8.7122, 21769471.8328, 'est', 'est', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (3, 'Other', '1986-11-26 04:12:18', '1981-06-26 21:28:28', 'prism', '062 Micaela Court Apt. 707\\nMargretville, WV 51628-3617', 8, 1337, 11375259.502, 5, 'ut', 'et', None, None, None, None, None, None, None, None, None, None, None, None, None, None)]\nOther_Property_Features: [(15, 3, 'dolorem'), (12, 4, 'earum'), (6, 2, 'illo')]\n\nQuestion:\nShow the property type descriptions of properties belonging to that code.\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code;",
        "prediction": "SELECT xx FROM xx"
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT, PRIMARY KEY(feature_type_code, feature_type_name)); CREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT, PRIMARY KEY(property_type_code, property_type_description)); CREATE TABLE Other_Available_Features (feature_id NUMBER, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, PRIMARY KEY(feature_id, feature_type_code, feature_name, feature_description), FOREIGN KEY (feature_type_code) REFERENCES Ref_Feature_Types(feature_type_code)); CREATE TABLE Properties (property_id NUMBER, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, PRIMARY KEY(property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details), FOREIGN KEY (property_type_code) REFERENCES Ref_Property_Types(property_type_code)); CREATE TABLE Other_Property_Features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, PRIMARY KEY(property_id, feature_id, property_feature_description), FOREIGN KEY (property_id) REFERENCES Properties(property_id), FOREIGN KEY (feature_id) REFERENCES Other_Available_Features(feature_id));\n\nSample rows of each table:\nRef_Feature_Types: [('Amenity', 'Amenity, eg Pool.'), ('Security', 'Securiyt, eg Burglar Alarm.')]\nRef_Property_Types: [('House', 'House, Bungalow, etc.'), ('Apartment', 'Apartment, Flat, Condo, etc.'), ('Field', 'Field, Meadow.')]\nOther_Available_Features: [(2, 'Amenity', 'AirCon', 'Air Conditioning.'), (3, 'Amenity', 'Pool', 'Swimming Pool.'), (4, 'Security', 'BurglarAlarm', 'Burglar Alarm')]\nProperties: [(1, 'House', '1991-06-21 23:52:10', '1979-05-13 16:58:06', 'park', '4745 Emerson Stravenue Suite 829\\nSouth Garret, IN 16772-5682', 7, 372652.2909, 1.68, 4201.8, 'aut', 'suscipit', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (2, 'House', '1990-05-25 23:01:51', '1990-11-14 19:16:38', 'the cole', '098 Tremaine Highway Suite 569\\nSouth Wilford, NJ 46587-3537', 1, 661536468.4429, 8.7122, 21769471.8328, 'est', 'est', None, None, None, None, None, None, None, None, None, None, None, None, None, None), (3, 'Other', '1986-11-26 04:12:18', '1981-06-26 21:28:28', 'prism', '062 Micaela Court Apt. 707\\nMargretville, WV 51628-3617', 8, 1337, 11375259.502, 5, 'ut', 'et', None, None, None, None, None, None, None, None, None, None, None, None, None, None)]\nOther_Property_Features: [(15, 3, 'dolorem'), (12, 4, 'earum'), (6, 2, 'illo')]\n\nQuestion:\nWhat are the names of properties that are either houses or apartments with more than 1 room?\n\nQuestion hint:\n\n\nThe incomplete SQL query:\n\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1;",
        "prediction": "SELECT xx FROM xx"
    }
]